package com.example.reproductor.gramm.comunication;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.example.reproductor.gramm.errors.*;
import com.example.reproductor.gramm.notas.*;
import com.example.reproductor.gramm.comunication.obj.*;

//Codigo para el parser, variables, metodos
parser code
{:
    //codigo
	List<ErrorGramm> syntaxErrors = new ArrayList<>();
    Object res = null;

	public void syntax_error(Symbol s) {
		int row = s.right+1;
		int column = s.left+1;
		String token = s.value + "";
		addError(row, column, ErrorType.SYNTACTIC, token, "Secuencia de Token no reconocida.");
		System.out.println("ERROR: Fila: "+(s.right+1)+", Columna: "+(s.left+1)+", Token: "+s.value);

	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		if(cur_token.toString().equals("#0")){
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  "Fin del archivo";
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
            
        }else{
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  (String) cur_token.value;
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando.");
			
        }
		System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
	}

	public void addError(int row, int column, ErrorType errorType, String token, String description){
        syntaxErrors.add(new ErrorGramm(new PositionToken(row, column), errorType, token, description));
    }

	public List<ErrorGramm> getSyntaxErrors(){
        return syntaxErrors;
    }

    public void setRes(Object obj){
        res = obj;
    }

    public Object getRes(){
        return res;
    }
	

:}

//Coidgo para las acciones gramaticales
action code
{:
    
:}

terminal solicitud_a, solicitud_c, lista, pista, tipo_a, tipo_c, nombre_a, nombre_c;
terminal listas_a, listas_c, lista_a, lista_c, nombre, pistas, pista_ab, duracion, aleatorio, si_rsv, no;
terminal pistas_a, pistas_c, canal_ab, numero_rsv, canal_c, nota_ab, frecuencia, pista_c;
// terminal pistanueva;
terminal datos_a, datos_c, canal_a, nota_a, nota_c, octava_a, octava_c, duracion_a, duracion_c;
terminal cerrar, igual, cadena, identificador;
terminal int numero;
terminal double decimal;
terminal do_rsv, re, mi, fa, sol, la, do_s, re_s, fa_s, sol_s, la_s, si;

non terminal INICIO, CODE, STATE_SOLICITUD, STATE_CONT_SOLICITUD, STATE_OPT_SOLICITUD, STATE_NUEVA_SOLICITUD;
non terminal STATE_DATOS, NOTA_STATE, STATE_OTROS, STATE_LISTA_LISTAS, STATE_CONT_LISTA_LISTAS;
non terminal STATE_LISTA_PISTAS, STATE_CONT_LISTA_PISTAS, STATE_LISTA_PISTAS_ONLY, STATE_ALEATORIO;
non terminal STATE_CONTE_LISTA_PISTAS_ONLY, STATE_PISTA, STATE_CONT_PISTA, STRUCT_PISTA, STATE_NOTES_CHANNEL;
non terminal STATE_EMPTY_LISTA_LISTAS, STATE_EMPTY_LISTA_PISTAS, STATE_EMPTY_LISTA_PISTAS_ONLY, STATE_EMPTY_PISTA, STATE_EMPTY_NOTES_CHANNEL;
/*non terminal ;
non terminal ;
non terminal ;
non terminal ;
*/

start with INICIO;

INICIO ::= CODE:a {:   RESULT = (Object) a; parser.setRes(a);:};

CODE ::= STATE_SOLICITUD:a {:RESULT = a;:}
        |STATE_OTROS:a {:RESULT = a;:};

STATE_SOLICITUD ::= solicitud_a STATE_CONT_SOLICITUD:a solicitud_c {:RESULT = a;:}
                    |error:e solicitud_c
                    {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la solicitud");:}
                    ;

STATE_CONT_SOLICITUD ::= tipo_a lista tipo_c STATE_OPT_SOLICITUD:b {:RESULT = new Solicitud(RequestType.LISTA,(String) b);:}
                        |tipo_a pista tipo_c STATE_OPT_SOLICITUD:b {:RESULT = new Solicitud(RequestType.PISTA,(String) b);:}
                        |tipo_a identificador:a tipo_c STATE_NUEVA_SOLICITUD:b {:RESULT = new Solicitud(RequestType.PISTANUEVA, (String) a, (List<DataPista>) b);:}
                        |error:e
                        {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la solicitud");:}
                        ;

STATE_OPT_SOLICITUD ::=  nombre_a cadena:a nombre_c {:RESULT = (String) a;:}
                        | {:RESULT = null;:};

STATE_NUEVA_SOLICITUD ::=    STATE_NUEVA_SOLICITUD:r STATE_DATOS:a
                            {:List<DataPista> list = (List<DataPista>) r; list.add((DataPista) a); RESULT = list;:}
                            |STATE_DATOS:a
                            {:List<DataPista> list = new ArrayList<>(); list.add((DataPista) a); RESULT = list;:}
                            |error:e STATE_DATOS
                            {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de los datos");:}
                            ;

STATE_DATOS ::= datos_a
                    canal_a numero:a canal_c
                    nota_a NOTA_STATE:b nota_c
                    octava_a numero:c octava_c
                    duracion_a numero:d duracion_c
                datos_c
                {:RESULT = new DataPista(a, (MusicalNotes) b, c, d);:}
                |error:e datos_c
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de los datos");:}
                ;

NOTA_STATE ::=	 do_rsv {:RESULT = MusicalNotes.C;:}
				|do_s {:RESULT = MusicalNotes.C_S;:}
				|re {:RESULT = MusicalNotes.D;:}
				|re_s {:RESULT = MusicalNotes.D_S;:}
				|mi {:RESULT = MusicalNotes.E;:}
				|fa {:RESULT = MusicalNotes.F;:}
				|fa_s {:RESULT = MusicalNotes.F_S;:}
				|sol {:RESULT = MusicalNotes.G;:}
				|sol_s {:RESULT = MusicalNotes.G_S;:}
				|la {:RESULT = MusicalNotes.A;:}
				|la_s {:RESULT = MusicalNotes.A_S;:}
				|si {:RESULT = MusicalNotes.B;:};

STATE_OTROS ::=  STATE_LISTA_LISTAS:a STATE_LISTA_PISTAS:b {:RESULT = new RequesLista((List<DataListaListas>) a, (List<DataListaPistas>) b);:}
                |STATE_LISTA_PISTAS_ONLY:a STATE_PISTA:b {:RESULT = new RequesPista((List<TrackOnList>) a, (List<DataStructPista>) b);;:}
                |error:e STATE_LISTA_PISTAS
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de listas");:}
                |error:e STATE_PISTA
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de las pistas");:}
                |STATE_LISTA_LISTAS error:e
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de pistas");:}
                |STATE_LISTA_PISTAS_ONLY error:e
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura del listado de los cales de pista");:}
                ;

STATE_LISTA_LISTAS ::=  listas_a
                            STATE_EMPTY_LISTA_LISTAS:a
                        listas_c {:RESULT = a;:}
                        |error:e listas_c
                        {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de Listas");:}
                        ;

STATE_CONT_LISTA_LISTAS ::= STATE_CONT_LISTA_LISTAS:r lista_a nombre igual cadena:a pistas igual numero:b cerrar
                            {:List<DataListaListas> list = (List<DataListaListas>) r; list.add(new DataListaListas((String) a, (int) b)); RESULT = list;:}
                            |lista_a nombre igual cadena:a pistas igual numero:b cerrar
                            {:List<DataListaListas> list = new ArrayList<>(); list.add(new DataListaListas((String) a, (int) b)); RESULT = list;:}
                            |error:e cerrar
                                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de listas");:}
                            ;

STATE_EMPTY_LISTA_LISTAS ::= STATE_CONT_LISTA_LISTAS:a {:RESULT = a;:}
                            | {:List<DataListaListas> list = new ArrayList<>(); RESULT = list;:};

STATE_LISTA_PISTAS ::=  STATE_LISTA_PISTAS:r lista_a nombre igual cadena:a aleatorio igual STATE_ALEATORIO:b cerrar
                            STATE_EMPTY_LISTA_PISTAS:c
                        lista_c
                        {:List<DataListaPistas> list = (List<DataListaPistas>) r; list.add(new DataListaPistas((String)a, (boolean) b, (List<TrackOnList>) c)); RESULT = list;:}
                        |lista_a nombre igual cadena:a aleatorio igual STATE_ALEATORIO:b cerrar
                            STATE_EMPTY_LISTA_PISTAS:c
                        lista_c
                        {:List<DataListaPistas> list = new ArrayList<>(); list.add(new DataListaPistas((String)a, (boolean) b, (List<TrackOnList>) c)); RESULT = list;:}
                        |error:e cerrar
                            STATE_EMPTY_LISTA_PISTAS:c
                        lista_c
                        {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la Lista de pistas");:}
                        |error:e lista_c
                        {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la Lista de pistas");:}
                        ;

STATE_ALEATORIO ::= si_rsv {:RESULT = true;:}
                    |no {:RESULT = false;:};

STATE_EMPTY_LISTA_PISTAS ::= STATE_CONT_LISTA_PISTAS:a {:RESULT = a;:}
                            | {:List<TrackOnList> list = new ArrayList<>(); RESULT = list;:};

STATE_CONT_LISTA_PISTAS ::= STATE_CONT_LISTA_PISTAS:r pista_ab nombre igual cadena:a duracion igual numero:b cerrar
                            {:List<TrackOnList> list = (List<TrackOnList>) r; list.add(new TrackOnList((String) a, (int) b)); RESULT = list;:}
                            |pista_ab nombre igual cadena:a duracion igual numero:b cerrar
                            {:List<TrackOnList> list = new ArrayList<>(); list.add(new TrackOnList((String) a, (int) b)); RESULT = list;:}
                            |error:e cerrar
                                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la lista de pistas");:}
                            ;

STATE_LISTA_PISTAS_ONLY ::= pistas_a
                                STATE_EMPTY_LISTA_PISTAS_ONLY:a
                            pistas_c {:RESULT = a;:}
                            |error:e pistas_c
                            {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la pistas");:}
                            ;

STATE_CONTE_LISTA_PISTAS_ONLY ::= STATE_CONTE_LISTA_PISTAS_ONLY:r pista_ab nombre igual cadena:a duracion igual numero:b cerrar
                                {:List<TrackOnList> list = (List<TrackOnList>) r; list.add(new TrackOnList((String) a, (int) b)); RESULT = list;:}
                                |pista_ab nombre igual cadena:a duracion igual numero:b cerrar
                                {:List<TrackOnList> list = new ArrayList<>(); list.add(new TrackOnList((String) a, (int) b)); RESULT = list;:}
                                |error:e cerrar
                                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la pista");:}
                                ;

STATE_EMPTY_LISTA_PISTAS_ONLY ::= STATE_CONTE_LISTA_PISTAS_ONLY:a {:RESULT = a;:}
                                |{:List<TrackOnList> list = new ArrayList<>(); RESULT = list;:};

STATE_PISTA ::= STATE_PISTA:r pista_ab nombre igual cadena:a cerrar
                    STATE_EMPTY_PISTA:b
                pista_c
                {:List<DataStructPista> list = (List<DataStructPista>) r; list.add(new DataStructPista((String) a, (List<DataChannel>) b)); RESULT = list;:}
                |pista_ab nombre igual cadena:a cerrar
                    STATE_EMPTY_PISTA:b
                pista_c
                {:List<DataStructPista> list = new ArrayList<>(); list.add(new DataStructPista((String) a, (List<DataChannel>) b)); RESULT = list;:}
                |error:e cerrar
                    STATE_EMPTY_PISTA:b
                pista_c
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la pista");:}
                |error:e pista_c
                {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la pista");:}
                ;

STATE_CONT_PISTA ::= STATE_CONT_PISTA:r STRUCT_PISTA:a
                    {:List<DataChannel> list = (List<DataChannel>) r; list.add((DataChannel) a); RESULT = list;:}
                    |STRUCT_PISTA:a
                    {:List<DataChannel> list = new ArrayList<>(); list.add((DataChannel) a); RESULT = list;:}
                    |error:e STRUCT_PISTA {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de la canal");:}
                    ;

STATE_EMPTY_PISTA ::= STATE_CONT_PISTA:a {:RESULT = a;:}
                    |{:List<DataChannel> list = new ArrayList<>(); RESULT = list;:};

STRUCT_PISTA ::=    canal_ab numero_rsv igual numero:a cerrar
                        STATE_EMPTY_NOTES_CHANNEL:b
                    canal_c
                    {:RESULT = new DataChannel((int) a, (List<DataNote>) b);:}
                    |error:e cerrar
                        STATE_EMPTY_NOTES_CHANNEL:b
                    canal_c
                    {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de los canales");:}
                    |error:e  canal_c
                    {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de los canales");:}
                    ;


STATE_NOTES_CHANNEL ::=  STATE_NOTES_CHANNEL:r nota_ab duracion igual numero:a frecuencia igual decimal:b cerrar
                        {:List<DataNote> list = (List<DataNote>) r; list.add(new DataNote((int) a, (double) b)); RESULT = list;:}
                        |nota_ab duracion igual numero:a frecuencia igual decimal:b cerrar
                        {:List<DataNote> list = new ArrayList<>(); list.add(new DataNote((int) a, (double) b)); RESULT = list;:}
                        |error:e cerrar
                        {:parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura de los datos de la nota");:}
                        ;

STATE_EMPTY_NOTES_CHANNEL ::= STATE_NOTES_CHANNEL:a {:RESULT = a;:}
                             |{:List<DataNote> list = new ArrayList<>(); RESULT = list;:};
