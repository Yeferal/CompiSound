
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.yeferal.desktopreproductor.gramm.comunication;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.yeferal.desktopreproductor.ast.errors.*;
import com.yeferal.desktopreproductor.ast.main.instructions.notas.MusicalNotes;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntaxAnalyzerCom extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolComCode.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntaxAnalyzerCom() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntaxAnalyzerCom(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzerCom(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\006\005\000" +
    "\002\006\002\000\002\007\004\000\002\007\003\000\002" +
    "\010\020\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\005\000\002\014\013\000\002\014\012" +
    "\000\002\015\012\000\002\020\003\000\002\020\003\000" +
    "\002\016\013\000\002\016\012\000\002\017\005\000\002" +
    "\021\013\000\002\021\012\000\002\022\011\000\002\023" +
    "\004\000\002\023\003\000\002\024\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\014\004\007\014\005\016\016\022\010\027" +
    "\013\001\002\000\004\002\000\001\002\000\004\016\177" +
    "\001\002\000\004\002\uffe8\001\002\000\004\010\123\001" +
    "\002\000\004\020\075\001\002\000\004\002\074\001\002" +
    "\000\004\002\uffff\001\002\000\004\022\053\001\002\000" +
    "\004\002\uffe7\001\002\000\004\002\ufffe\001\002\000\004" +
    "\020\021\001\002\000\004\002\uffe5\001\002\000\004\002" +
    "\uffe6\001\002\000\004\054\022\001\002\000\004\024\023" +
    "\001\002\000\006\025\025\026\026\001\002\000\004\050" +
    "\027\001\002\000\004\050\uffe0\001\002\000\004\050\uffdf" +
    "\001\002\000\004\022\031\001\002\000\006\017\041\022" +
    "\042\001\002\000\004\020\032\001\002\000\004\051\033" +
    "\001\002\000\004\054\034\001\002\000\004\023\035\001" +
    "\002\000\004\051\036\001\002\000\004\052\037\001\002" +
    "\000\004\050\040\001\002\000\006\017\uffdd\022\uffdd\001" +
    "\002\000\004\002\uffe1\001\002\000\004\020\043\001\002" +
    "\000\004\051\044\001\002\000\004\054\045\001\002\000" +
    "\004\023\046\001\002\000\004\051\047\001\002\000\004" +
    "\052\050\001\002\000\004\050\051\001\002\000\006\017" +
    "\uffde\022\uffde\001\002\000\006\022\064\030\063\001\002" +
    "\000\004\020\054\001\002\000\004\051\055\001\002\000" +
    "\004\054\056\001\002\000\004\023\057\001\002\000\004" +
    "\051\060\001\002\000\004\052\061\001\002\000\004\050" +
    "\062\001\002\000\006\022\uffda\030\uffda\001\002\000\004" +
    "\002\uffdc\001\002\000\004\020\065\001\002\000\004\051" +
    "\066\001\002\000\004\054\067\001\002\000\004\023\070" +
    "\001\002\000\004\051\071\001\002\000\004\052\072\001" +
    "\002\000\004\050\073\001\002\000\006\022\uffdb\030\uffdb" +
    "\001\002\000\004\002\001\001\002\000\004\051\076\001" +
    "\002\000\004\054\077\001\002\000\004\050\100\001\002" +
    "\000\004\031\102\001\002\000\006\007\uffd7\031\uffd7\001" +
    "\002\000\004\032\106\001\002\000\006\007\105\031\102" +
    "\001\002\000\006\007\uffd8\031\uffd8\001\002\000\004\002" +
    "\uffd9\001\002\000\004\051\107\001\002\000\004\052\110" +
    "\001\002\000\004\050\111\001\002\000\004\034\112\001" +
    "\002\000\004\023\113\001\002\000\004\051\114\001\002" +
    "\000\004\052\115\001\002\000\004\035\116\001\002\000" +
    "\004\051\117\001\002\000\004\053\120\001\002\000\004" +
    "\050\121\001\002\000\004\033\122\001\002\000\006\007" +
    "\uffd6\031\uffd6\001\002\000\010\006\126\007\127\036\130" +
    "\001\002\000\004\005\125\001\002\000\004\002\ufffd\001" +
    "\002\000\004\011\174\001\002\000\004\011\167\001\002" +
    "\000\004\011\131\001\002\000\004\037\134\001\002\000" +
    "\006\005\ufffa\037\134\001\002\000\006\005\ufff6\037\ufff6" +
    "\001\002\000\004\041\135\001\002\000\004\052\136\001" +
    "\002\000\004\033\137\001\002\000\004\042\140\001\002" +
    "\000\032\055\153\056\154\057\150\060\144\061\151\062" +
    "\142\063\155\064\141\065\146\066\147\067\152\070\145" +
    "\001\002\000\004\043\ufff1\001\002\000\004\043\uffeb\001" +
    "\002\000\004\043\156\001\002\000\004\043\uffef\001\002" +
    "\000\004\043\uffe9\001\002\000\004\043\uffee\001\002\000" +
    "\004\043\uffec\001\002\000\004\043\ufff0\001\002\000\004" +
    "\043\uffed\001\002\000\004\043\uffea\001\002\000\004\043" +
    "\ufff4\001\002\000\004\043\ufff2\001\002\000\004\043\ufff3" +
    "\001\002\000\004\044\157\001\002\000\004\052\160\001" +
    "\002\000\004\045\161\001\002\000\004\046\162\001\002" +
    "\000\004\052\163\001\002\000\004\047\164\001\002\000" +
    "\004\040\165\001\002\000\006\005\ufff5\037\ufff5\001\002" +
    "\000\006\005\ufff7\037\ufff7\001\002\000\006\005\ufff8\012" +
    "\170\001\002\000\004\054\172\001\002\000\004\005\ufffb" +
    "\001\002\000\004\013\173\001\002\000\004\005\ufff9\001" +
    "\002\000\006\005\ufff8\012\170\001\002\000\004\005\ufffc" +
    "\001\002\000\006\015\207\016\210\001\002\000\004\020" +
    "\200\001\002\000\004\051\201\001\002\000\004\054\202" +
    "\001\002\000\004\021\203\001\002\000\004\051\204\001" +
    "\002\000\004\052\205\001\002\000\004\050\206\001\002" +
    "\000\006\015\uffe2\016\uffe2\001\002\000\004\002\uffe4\001" +
    "\002\000\004\020\211\001\002\000\004\051\212\001\002" +
    "\000\004\054\213\001\002\000\004\021\214\001\002\000" +
    "\004\051\215\001\002\000\004\052\216\001\002\000\004" +
    "\050\217\001\002\000\006\015\uffe3\016\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\022\002\010\003\003\004\011\012\014\013" +
    "\005\015\013\017\017\022\016\001\001\000\002\001\001" +
    "\000\004\014\175\001\001\000\002\001\001\000\004\005" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\102\024\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\131\010\132\001\001\000\004\010\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxAnalyzerCom$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxAnalyzerCom$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxAnalyzerCom$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
	List<ErrorGramm> syntaxErrors = new ArrayList<>();

	public void syntax_error(Symbol s) {
		int row = s.right+1;
		int column = s.left+1;
		String token = s.value + "";
		addError(row, column, ErrorType.SYNTACTIC, token, "Secuencia de Token no reconocida.");
		System.out.println("ERROR: Fila: "+(s.right+1)+", Columna: "+(s.left+1)+", Token: "+s.value);

	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		if(cur_token.toString().equals("#0")){
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  "Fin del archivo";
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
            
        }else{
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  (String) cur_token.value;
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando.");
			
        }
		System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
	}

	public void addError(int row, int column, ErrorType errorType, String token, String description){
        syntaxErrors.add(new ErrorGramm(new PositionToken(row, column), errorType, token, description));
    }

	public List<ErrorGramm> getSyntaxErrors(){
        return syntaxErrors;
    }

	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntaxAnalyzerCom$actions {


    

  private final SyntaxAnalyzerCom parser;

  /** Constructor */
  CUP$SyntaxAnalyzerCom$actions(SyntaxAnalyzerCom parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerCom$do_action_part00000000(
    int                        CUP$SyntaxAnalyzerCom$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerCom$parser,
    java.util.Stack            CUP$SyntaxAnalyzerCom$stack,
    int                        CUP$SyntaxAnalyzerCom$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxAnalyzerCom$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxAnalyzerCom$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxAnalyzerCom$parser.done_parsing();
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CODE 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODE ::= STATE_SOLICITUD 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODE ::= STATE_OTROS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATE_SOLICITUD ::= solicitud_a STATE_CONT_SOLICITUD solicitud_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_SOLICITUD",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATE_CONT_SOLICITUD ::= tipo_a lista tipo_c STATE_OPT_SOLICITUD 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATE_CONT_SOLICITUD ::= tipo_a pista tipo_c STATE_OPT_SOLICITUD 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATE_CONT_SOLICITUD ::= tipo_a pistanueva tipo_c STATE_NUEVA_SOLICITUD 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATE_OPT_SOLICITUD ::= nombre_a cadena nombre_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OPT_SOLICITUD",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATE_OPT_SOLICITUD ::= 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OPT_SOLICITUD",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATE_NUEVA_SOLICITUD ::= STATE_NUEVA_SOLICITUD STATE_DATOS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_NUEVA_SOLICITUD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATE_NUEVA_SOLICITUD ::= STATE_DATOS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_NUEVA_SOLICITUD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATE_DATOS ::= datos_a canal_a numero canal_c nota_a NOTA_STATE nota_c octava_a numero octava_c duracion_a numero duracion_c datos_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_DATOS",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-13)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTA_STATE ::= do_rsv 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.C;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTA_STATE ::= do_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.C_S;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTA_STATE ::= re 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.D;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTA_STATE ::= re_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.D_S;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTA_STATE ::= mi 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.E;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NOTA_STATE ::= fa 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.F;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NOTA_STATE ::= fa_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.F_S;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOTA_STATE ::= sol 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.G;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOTA_STATE ::= sol_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.G_S;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOTA_STATE ::= la 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.A;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOTA_STATE ::= la_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.A_S;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOTA_STATE ::= si 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.B;
              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATE_OTROS ::= STATE_LISTA_LISTAS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OTROS",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATE_OTROS ::= STATE_LISTA_PISTAS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OTROS",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATE_OTROS ::= STATE_LISTA_PISTAS_ONLY 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OTROS",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATE_OTROS ::= STATE_PISTA 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_OTROS",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATE_LISTA_LISTAS ::= listas_a STATE_CONT_LISTA_LISTAS listas_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_LISTA_LISTAS",9, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATE_CONT_LISTA_LISTAS ::= STATE_CONT_LISTA_LISTAS lista_a nombre igual cadena pistas igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_LISTA_LISTAS",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATE_CONT_LISTA_LISTAS ::= lista_a nombre igual cadena pistas igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_LISTA_LISTAS",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATE_LISTA_PISTAS ::= lista_a nombre cadena aleatorio STATE_ALEATORIO cerrar STATE_CONT_LISTA_PISTAS lista_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_LISTA_PISTAS",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATE_ALEATORIO ::= si_rsv 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_ALEATORIO",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATE_ALEATORIO ::= no 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_ALEATORIO",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATE_CONT_LISTA_PISTAS ::= STATE_CONT_LISTA_PISTAS pista_ab nombre igual cadena duracion igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_LISTA_PISTAS",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STATE_CONT_LISTA_PISTAS ::= pista_ab nombre igual cadena duracion igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_LISTA_PISTAS",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATE_LISTA_PISTAS_ONLY ::= pistas_a STATE_CONTE_LISTA_PISTAS_ONLY pistas_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_LISTA_PISTAS_ONLY",13, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATE_CONTE_LISTA_PISTAS_ONLY ::= STATE_CONTE_LISTA_PISTAS_ONLY pista_ab nombre igual cadena duracion igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONTE_LISTA_PISTAS_ONLY",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATE_CONTE_LISTA_PISTAS_ONLY ::= pista_ab nombre igual cadena duracion igual numero cerrar 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONTE_LISTA_PISTAS_ONLY",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATE_PISTA ::= pista_ab nombre igual cadena cerrar STATE_CONT_PISTA pista 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_PISTA",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATE_CONT_PISTA ::= STATE_CONT_PISTA STRUCT_PISTA 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_PISTA",17, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATE_CONT_PISTA ::= STRUCT_PISTA 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STATE_CONT_PISTA",17, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRUCT_PISTA ::= canal_ab numero_rsv igual numero cerrar nota_ab duracion igual numero frecuencia igual decimal cerrar canal_c 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerCom$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.elementAt(CUP$SyntaxAnalyzerCom$top-13)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerCom$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerCom$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntaxAnalyzerCom$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerCom$do_action(
    int                        CUP$SyntaxAnalyzerCom$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerCom$parser,
    java.util.Stack            CUP$SyntaxAnalyzerCom$stack,
    int                        CUP$SyntaxAnalyzerCom$top)
    throws java.lang.Exception
    {
              return CUP$SyntaxAnalyzerCom$do_action_part00000000(
                               CUP$SyntaxAnalyzerCom$act_num,
                               CUP$SyntaxAnalyzerCom$parser,
                               CUP$SyntaxAnalyzerCom$stack,
                               CUP$SyntaxAnalyzerCom$top);
    }
}

}
