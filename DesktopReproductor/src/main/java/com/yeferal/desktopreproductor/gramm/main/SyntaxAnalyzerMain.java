
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.yeferal.desktopreproductor.gramm.main;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.yeferal.desktopreproductor.ast.errors.*;
import com.yeferal.desktopreproductor.ast.main.*;
import com.yeferal.desktopreproductor.ast.main.conditionals.*;
import com.yeferal.desktopreproductor.ast.main.instructions.*;
import com.yeferal.desktopreproductor.ast.main.instructions.notas.*;
import com.yeferal.desktopreproductor.ast.main.tablesymbol.DataType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntaxAnalyzerMain extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolMainCode.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntaxAnalyzerMain() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntaxAnalyzerMain(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzerMain(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\005\004\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\007" +
    "\004\000\002\007\002\000\002\007\004\000\002\010\005" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\002\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\013\005\000\002\013\005\000\002\016\005\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\005" +
    "\000\002\017\003\000\002\017\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\004\000\002\021\002\000\002\021" +
    "\004\000\002\021\004\000\002\022\006\000\002\022\006" +
    "\000\002\022\005\000\002\022\005\000\002\022\006\000" +
    "\002\022\006\000\002\022\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\024\005\000\002" +
    "\024\007\000\002\024\005\000\002\024\005\000\002\024" +
    "\007\000\002\025\006\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\005\000\002\025\005\000" +
    "\002\025\006\000\002\031\004\000\002\031\002\000\002" +
    "\031\004\000\002\031\004\000\002\032\005\000\002\032" +
    "\005\000\002\032\004\000\002\032\005\000\002\030\007" +
    "\000\002\030\007\000\002\030\005\000\002\030\005\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\005\000\002\033\005\000\002\033\003\000\002\033" +
    "\005\000\002\033\005\000\002\034\007\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\035\006\000" +
    "\002\035\005\000\002\035\006\000\002\035\005\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\027\005\000\002\027\006\000\002\027\005" +
    "\000\002\027\005\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\036\004\000\002\036\003\000\002" +
    "\036\004\000\002\037\004\000\002\037\003\000\002\037" +
    "\004\000\002\040\011\000\002\040\011\000\002\040\011" +
    "\000\002\041\011\000\002\041\011\000\002\041\011\000" +
    "\002\042\006\000\002\042\006\000\002\043\011\000\002" +
    "\043\011\000\002\043\011\000\002\044\006\000\002\044" +
    "\003\000\002\044\006\000\002\045\007\000\002\045\006" +
    "\000\002\045\007\000\002\045\007\000\002\045\007\000" +
    "\002\045\006\000\002\045\006\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\047" +
    "\015\000\002\047\015\000\002\047\015\000\002\047\015" +
    "\000\002\050\007\000\002\050\005\000\002\050\007\000" +
    "\002\050\007\000\002\050\007\000\002\050\007\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\051" +
    "\003\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\004\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\006\000\002\052\006\000\002" +
    "\052\005\000\002\053\011\000\002\053\011\000\002\053" +
    "\011\000\002\054\012\000\002\054\012\000\002\054\012" +
    "\000\002\055\011\000\002\055\012\000\002\055\012\000" +
    "\002\055\013\000\002\055\011\000\002\055\010\000\002" +
    "\055\012\000\002\055\012\000\002\055\012\000\002\055" +
    "\013\000\002\055\013\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\057\003\000\002\057\002\000\002" +
    "\060\006\000\002\060\004\000\002\060\006\000\002\060" +
    "\006\000\002\060\006\000\002\060\004\000\002\060\004" +
    "\000\002\061\014\000\002\061\014\000\002\061\014\000" +
    "\002\061\014\000\002\061\013\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\063\003\000\002\064\003\000\002" +
    "\065\003\000\002\066\010\000\002\066\010\000\002\066" +
    "\010\000\002\067\006\000\002\067\006\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\072\006\000\002\072\006\000\002\072\006" +
    "\000\002\073\006\000\002\073\006\000\002\073\006\000" +
    "\002\073\006\000\002\074\006\000\002\074\006\000\002" +
    "\075\010\000\002\075\005\000\002\075\007\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\006\000\002\077\005\000" +
    "\002\077\006\000\002\100\005\000\002\100\003\000\002" +
    "\100\005\000\002\100\005\000\002\101\004\000\002\101" +
    "\004\000\002\101\004\000\002\102\005\000\002\102\005" +
    "\000\002\102\005\000\002\102\005\000\002\102\005\000" +
    "\002\102\005\000\002\102\005\000\002\102\003\000\002" +
    "\102\005\000\002\102\004\000\002\103\005\000\002\103" +
    "\005\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\103\005\000\002\103\004\000\002\103\003\000" +
    "\002\103\004\000\002\104\005\000\002\104\005\000\002" +
    "\104\005\000\002\104\005\000\002\104\005\000\002\104" +
    "\004\000\002\104\004\000\002\104\003\000\002\105\003" +
    "\000\002\106\003\000\002\107\004\000\002\107\004\000" +
    "\002\107\004\000\002\107\004\000\002\107\004\000\002" +
    "\107\004\000\002\107\004\000\002\107\004\000\002\107" +
    "\004\000\002\107\004\000\002\107\005\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\107\005\000\002\107\005\000\002\107\002\000\002\112" +
    "\004\000\002\112\004\000\002\110\003\000\002\111\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e9\000\014\002\ufff9\003\006\004\005\005\013\006" +
    "\012\001\002\000\014\002\ufff9\003\006\004\005\005\013" +
    "\006\012\001\002\000\102\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\044\ufffd\045\ufffd\071\ufffd\072\ufffd\077\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd" +
    "\107\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd\121\ufffd\122" +
    "\ufffd\123\ufffd\124\ufffd\001\002\000\016\002\ufff9\003\006" +
    "\004\005\005\013\006\012\007\u02e5\001\002\000\004\002" +
    "\000\001\002\000\004\002\u02e4\001\002\000\014\002\ufff9" +
    "\003\006\004\005\005\013\006\012\001\002\000\006\003" +
    "\014\007\015\001\002\000\102\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\044\ufffc\045\ufffc\071\ufffc\072\ufffc\077\ufffc" +
    "\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\106" +
    "\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\121\ufffc" +
    "\122\ufffc\123\ufffc\124\ufffc\001\002\000\010\003\u02df\010" +
    "\020\070\ufff1\001\002\000\010\003\017\010\020\070\ufff1" +
    "\001\002\000\004\070\u02d9\001\002\000\010\003\021\007" +
    "\023\070\034\001\002\000\006\003\021\007\023\001\002" +
    "\000\004\011\031\001\002\000\010\003\024\011\025\070" +
    "\ufff2\001\002\000\010\003\uffee\011\uffee\070\uffee\001\002" +
    "\000\004\007\030\001\002\000\006\003\026\007\027\001" +
    "\002\000\010\003\uffec\011\uffec\070\uffec\001\002\000\010" +
    "\003\uffef\011\uffef\070\uffef\001\002\000\010\003\uffed\011" +
    "\uffed\070\uffed\001\002\000\004\007\032\001\002\000\010" +
    "\003\uffeb\011\uffeb\070\uffeb\001\002\000\010\003\024\011" +
    "\025\070\ufff0\001\002\000\034\004\uffe3\005\uffe3\007\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\044\uffe3\045" +
    "\uffe3\071\uffe3\110\uffe3\124\uffe3\001\002\000\034\004\005" +
    "\005\013\007\062\014\054\015\040\016\043\017\036\020" +
    "\046\044\055\045\uffd3\071\045\110\041\124\060\001\002" +
    "\000\006\003\uff36\007\uff36\001\002\000\034\004\uffe9\005" +
    "\uffe9\007\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\044\uffe9\045\uffe9\071\uffe9\110\uffe9\124\uffe9\001\002\000" +
    "\006\003\uff39\007\uff39\001\002\000\006\003\uff35\007\uff35" +
    "\001\002\000\034\004\uffe6\005\uffe6\007\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\044\uffe6\045\uffe6\071\uffe6" +
    "\110\uffe6\124\uffe6\001\002\000\006\003\uff38\007\uff38\001" +
    "\002\000\012\003\u02d2\011\u02d4\012\uffcc\046\u01c0\001\002" +
    "\000\014\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\001" +
    "\002\000\006\003\uff37\007\uff37\001\002\000\010\003\u02c6" +
    "\011\u02c7\066\u0195\001\002\000\034\004\uffe7\005\uffe7\007" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\044\uffe7" +
    "\045\uffe7\071\uffe7\110\uffe7\124\uffe7\001\002\000\034\004" +
    "\uffea\005\uffea\007\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\044\uffea\045\uffea\071\uffea\110\uffea\124\uffea\001" +
    "\002\000\004\045\u02bd\001\002\000\006\003\u02aa\007\u02ab" +
    "\001\002\000\006\003\uff3a\007\uff3a\001\002\000\022\007" +
    "\u0289\014\054\015\040\016\043\017\036\020\046\045\uffd4" +
    "\110\041\001\002\000\034\004\uffe8\005\uffe8\007\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\044\uffe8\045\uffe8" +
    "\071\uffe8\110\uffe8\124\uffe8\001\002\000\034\004\uffe5\005" +
    "\uffe5\007\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\044\uffe5\045\uffe5\071\uffe5\110\uffe5\124\uffe5\001\002\000" +
    "\006\003\u027f\075\u0280\001\002\000\034\004\uffe4\005\uffe4" +
    "\007\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\044" +
    "\uffe4\045\uffe4\071\uffe4\110\uffe4\124\uffe4\001\002\000\020" +
    "\003\063\046\066\062\064\063\071\064\065\066\072\075" +
    "\067\001\002\000\056\003\142\007\131\012\u027b\027\076" +
    "\035\106\046\u0279\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\052\003\142\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\004\012\u0276\001\002\000\052\003" +
    "\u0272\007\131\027\076\035\106\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\020\003\u0120\014\u011f\015\u0121\016\u011c\017" +
    "\u011a\020\u011d\076\uff33\001\002\000\010\003\u0112\046\u0113" +
    "\066\135\001\002\000\004\012\u0111\001\002\000\052\003" +
    "\123\007\131\027\076\035\106\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\056\011\ufeed\012\ufeed\021\ufeed\022\ufeed\023" +
    "\ufeed\024\ufeed\025\ufeed\026\ufeed\030\ufeed\031\ufeed\032\ufeed" +
    "\033\ufeed\034\ufeed\036\ufeed\037\ufeed\040\ufeed\041\ufeed\042" +
    "\ufeed\043\ufeed\067\ufeed\071\ufeed\076\ufeed\001\002\000\004" +
    "\075\373\001\002\000\056\011\ufef3\012\ufef3\021\ufef3\022" +
    "\ufef3\023\ufef3\024\ufef3\025\ufef3\026\ufef3\030\ufef3\031\ufef3" +
    "\032\ufef3\033\ufef3\034\ufef3\036\ufef3\037\ufef3\040\ufef3\041" +
    "\ufef3\042\ufef3\043\ufef3\067\ufef3\071\ufef3\076\ufef3\001\002" +
    "\000\050\003\372\007\131\027\076\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\056\011\ufef6\012\ufef6\021\ufef6\022\ufef6" +
    "\023\ufef6\024\ufef6\025\ufef6\026\ufef6\030\ufef6\031\ufef6\032" +
    "\ufef6\033\ufef6\034\ufef6\036\ufef6\037\ufef6\040\ufef6\041\ufef6" +
    "\042\ufef6\043\ufef6\067\ufef6\071\ufef6\076\ufef6\001\002\000" +
    "\004\075\362\001\002\000\056\011\ufef4\012\ufef4\021\ufef4" +
    "\022\ufef4\023\ufef4\024\ufef4\025\ufef4\026\ufef4\030\ufef4\031" +
    "\ufef4\032\ufef4\033\ufef4\034\ufef4\036\ufef4\037\ufef4\040\ufef4" +
    "\041\ufef4\042\ufef4\043\ufef4\067\ufef4\071\ufef4\076\ufef4\001" +
    "\002\000\056\011\ufeeb\012\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb" +
    "\024\ufeeb\025\ufeeb\026\ufeeb\030\ufeeb\031\ufeeb\032\ufeeb\033" +
    "\ufeeb\034\ufeeb\036\ufeeb\037\ufeeb\040\ufeeb\041\ufeeb\042\ufeeb" +
    "\043\ufeeb\067\ufeeb\071\ufeeb\076\ufeeb\001\002\000\056\011" +
    "\ufef1\012\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025\ufef1" +
    "\026\ufef1\030\ufef1\031\ufef1\032\ufef1\033\ufef1\034\ufef1\036" +
    "\ufef1\037\ufef1\040\ufef1\041\ufef1\042\ufef1\043\ufef1\067\ufef1" +
    "\071\ufef1\076\ufef1\001\002\000\056\011\ufefa\012\ufefa\021" +
    "\ufefa\022\ufefa\023\ufefa\024\ufefa\025\ufefa\026\ufefa\030\ufefa" +
    "\031\ufefa\032\ufefa\033\ufefa\034\ufefa\036\ufefa\037\ufefa\040" +
    "\ufefa\041\ufefa\042\ufefa\043\ufefa\067\ufefa\071\ufefa\076\ufefa" +
    "\001\002\000\056\011\ufed8\012\ufed8\021\ufed8\022\ufed8\023" +
    "\ufed8\024\ufed8\025\ufed8\026\ufed8\030\ufed8\031\ufed8\032\ufed8" +
    "\033\ufed8\034\ufed8\036\ufed8\037\ufed8\040\ufed8\041\ufed8\042" +
    "\ufed8\043\ufed8\067\ufed8\071\ufed8\076\ufed8\001\002\000\052" +
    "\003\360\007\131\027\076\035\106\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\056\011\ufeec\012\ufeec\021\ufeec\022\ufeec" +
    "\023\ufeec\024\ufeec\025\ufeec\026\ufeec\030\ufeec\031\ufeec\032" +
    "\ufeec\033\ufeec\034\ufeec\036\ufeec\037\ufeec\040\ufeec\041\ufeec" +
    "\042\ufeec\043\ufeec\067\ufeec\071\ufeec\076\ufeec\001\002\000" +
    "\056\011\ufef2\012\ufef2\021\ufef2\022\ufef2\023\ufef2\024\ufef2" +
    "\025\ufef2\026\ufef2\030\ufef2\031\ufef2\032\ufef2\033\ufef2\034" +
    "\ufef2\036\ufef2\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2" +
    "\067\ufef2\071\ufef2\076\ufef2\001\002\000\056\011\ufefb\012" +
    "\ufefb\021\ufefb\022\ufefb\023\ufefb\024\ufefb\025\ufefb\026\ufefb" +
    "\030\ufefb\031\ufefb\032\ufefb\033\ufefb\034\ufefb\036\ufefb\037" +
    "\ufefb\040\ufefb\041\ufefb\042\ufefb\043\ufefb\067\ufefb\071\ufefb" +
    "\076\ufefb\001\002\000\056\011\ufef0\012\ufef0\021\ufef0\022" +
    "\ufef0\023\ufef0\024\ufef0\025\ufef0\026\ufef0\030\ufef0\031\ufef0" +
    "\032\ufef0\033\ufef0\034\ufef0\036\ufef0\037\ufef0\040\ufef0\041" +
    "\ufef0\042\ufef0\043\ufef0\067\ufef0\071\ufef0\076\ufef0\001\002" +
    "\000\056\011\ufef8\012\ufef8\021\ufef8\022\ufef8\023\ufef8\024" +
    "\ufef8\025\ufef8\026\ufef8\030\ufef8\031\ufef8\032\ufef8\033\ufef8" +
    "\034\ufef8\036\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8\043" +
    "\ufef8\067\ufef8\071\ufef8\076\ufef8\001\002\000\004\075\303" +
    "\001\002\000\056\011\ufef7\012\ufef7\021\ufef7\022\ufef7\023" +
    "\ufef7\024\ufef7\025\ufef7\026\ufef7\030\ufef7\031\ufef7\032\ufef7" +
    "\033\ufef7\034\ufef7\036\ufef7\037\ufef7\040\ufef7\041\ufef7\042" +
    "\ufef7\043\ufef7\067\ufef7\071\ufef7\076\ufef7\001\002\000\056" +
    "\011\ufeee\012\ufeee\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025" +
    "\ufeee\026\ufeee\030\ufeee\031\ufeee\032\ufeee\033\ufeee\034\ufeee" +
    "\036\ufeee\037\ufeee\040\ufeee\041\ufeee\042\ufeee\043\ufeee\067" +
    "\ufeee\071\ufeee\076\ufeee\001\002\000\042\011\ufec5\012\ufec5" +
    "\021\272\022\274\023\273\024\271\025\270\026\267\030" +
    "\ufec5\031\ufec5\032\ufec5\033\ufec5\034\ufec5\067\ufec5\071\ufec5" +
    "\076\ufec5\001\002\000\004\075\214\001\002\000\046\003" +
    "\210\007\131\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\056" +
    "\011\ufef9\012\ufef9\021\ufef9\022\ufef9\023\ufef9\024\ufef9\025" +
    "\ufef9\026\ufef9\030\ufef9\031\ufef9\032\ufef9\033\ufef9\034\ufef9" +
    "\036\ufef9\037\ufef9\040\ufef9\041\ufef9\042\ufef9\043\ufef9\067" +
    "\ufef9\071\ufef9\076\ufef9\001\002\000\052\003\142\007\131" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\066\072\067\207" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\056\011\ufece\012\ufece\021\ufece\022\ufece\023\ufece\024\ufece" +
    "\025\ufece\026\ufece\030\ufece\031\ufece\032\ufece\033\ufece\034" +
    "\ufece\036\147\037\150\040\145\041\152\042\146\043\151" +
    "\067\ufece\071\ufece\076\ufece\001\002\000\056\011\ufeef\012" +
    "\ufeef\021\ufeef\022\ufeef\023\ufeef\024\ufeef\025\ufeef\026\ufeef" +
    "\030\ufeef\031\ufeef\032\ufeef\033\ufeef\034\ufeef\036\ufeef\037" +
    "\ufeef\040\ufeef\041\ufeef\042\ufeef\043\ufeef\067\ufeef\071\ufeef" +
    "\076\ufeef\001\002\000\004\067\206\001\002\000\056\011" +
    "\ufeea\012\ufeea\021\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea" +
    "\026\ufeea\030\ufeea\031\ufeea\032\ufeea\033\ufeea\034\ufeea\036" +
    "\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea\043\ufeea\067\ufeea" +
    "\071\ufeea\076\ufeea\001\002\000\026\011\ufec4\012\ufec4\030" +
    "\175\031\176\032\177\033\200\034\174\067\ufec4\071\ufec4" +
    "\076\ufec4\001\002\000\064\003\132\011\ufef5\012\ufef5\021" +
    "\ufef5\022\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5\030\ufef5" +
    "\031\ufef5\032\ufef5\033\ufef5\034\ufef5\036\ufef5\037\ufef5\040" +
    "\ufef5\041\ufef5\042\ufef5\043\ufef5\066\072\067\ufef5\071\ufef5" +
    "\075\133\076\ufef5\001\002\000\056\011\ufee1\012\ufee1\021" +
    "\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\030\ufee1" +
    "\031\ufee1\032\ufee1\033\ufee1\034\ufee1\036\ufee1\037\ufee1\040" +
    "\ufee1\041\ufee1\042\ufee1\043\ufee1\067\ufee1\071\ufee1\076\ufee1" +
    "\001\002\000\054\003\163\007\131\027\076\035\106\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\075\121\076\162\111" +
    "\120\113\074\121\100\122\114\001\002\000\060\011\ufee2" +
    "\012\ufee2\021\ufee2\022\ufee2\023\ufee2\024\ufee2\025\ufee2\026" +
    "\ufee2\030\ufee2\031\ufee2\032\ufee2\033\ufee2\034\ufee2\036\ufee2" +
    "\037\ufee2\040\ufee2\041\ufee2\042\ufee2\043\ufee2\066\135\067" +
    "\ufee2\071\ufee2\076\ufee2\001\002\000\052\003\136\007\131" +
    "\027\076\035\106\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\052\003\142\007\131\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\066\072\067\144\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\004\067\140\001\002\000\064\003" +
    "\uff91\011\uff91\012\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\046\uff91\066\uff91\067\uff91\071\uff91\076\uff91\001\002\000" +
    "\060\011\ufee0\012\ufee0\021\ufee0\022\ufee0\023\ufee0\024\ufee0" +
    "\025\ufee0\026\ufee0\030\ufee0\031\ufee0\032\ufee0\033\ufee0\034" +
    "\ufee0\036\ufee0\037\ufee0\040\ufee0\041\ufee0\042\ufee0\043\ufee0" +
    "\066\135\067\ufee0\071\ufee0\076\ufee0\001\002\000\050\003" +
    "\142\007\131\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\066" +
    "\072\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\056\011\ufed6\012\ufed6\021\ufed6\022\ufed6\023\ufed6\024" +
    "\ufed6\025\ufed6\026\ufed6\030\ufed6\031\ufed6\032\ufed6\033\ufed6" +
    "\034\ufed6\036\147\037\150\040\145\041\152\042\146\043" +
    "\151\067\ufed6\071\ufed6\076\ufed6\001\002\000\064\003\uff8f" +
    "\011\uff8f\012\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\046" +
    "\uff8f\066\uff8f\067\uff8f\071\uff8f\076\uff8f\001\002\000\046" +
    "\003\142\007\131\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\046\003\142\007\131\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\046\003\142\007\131\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\046\003\142\007\131\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\046\003\142\007\131\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\046\003\142\007\131\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\056\011\ufedc\012\ufedc\021\ufedc\022" +
    "\ufedc\023\ufedc\024\ufedc\025\ufedc\026\ufedc\030\ufedc\031\ufedc" +
    "\032\ufedc\033\ufedc\034\ufedc\036\ufedc\037\ufedc\040\ufedc\041" +
    "\ufedc\042\ufedc\043\151\067\ufedc\071\ufedc\076\ufedc\001\002" +
    "\000\056\011\ufeda\012\ufeda\021\ufeda\022\ufeda\023\ufeda\024" +
    "\ufeda\025\ufeda\026\ufeda\030\ufeda\031\ufeda\032\ufeda\033\ufeda" +
    "\034\ufeda\036\ufeda\037\ufeda\040\ufeda\041\ufeda\042\ufeda\043" +
    "\ufeda\067\ufeda\071\ufeda\076\ufeda\001\002\000\056\011\ufede" +
    "\012\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede\026" +
    "\ufede\030\ufede\031\ufede\032\ufede\033\ufede\034\ufede\036\ufede" +
    "\037\ufede\040\145\041\152\042\146\043\151\067\ufede\071" +
    "\ufede\076\ufede\001\002\000\056\011\ufedf\012\ufedf\021\ufedf" +
    "\022\ufedf\023\ufedf\024\ufedf\025\ufedf\026\ufedf\030\ufedf\031" +
    "\ufedf\032\ufedf\033\ufedf\034\ufedf\036\ufedf\037\ufedf\040\145" +
    "\041\152\042\146\043\151\067\ufedf\071\ufedf\076\ufedf\001" +
    "\002\000\056\011\ufedb\012\ufedb\021\ufedb\022\ufedb\023\ufedb" +
    "\024\ufedb\025\ufedb\026\ufedb\030\ufedb\031\ufedb\032\ufedb\033" +
    "\ufedb\034\ufedb\036\ufedb\037\ufedb\040\ufedb\041\ufedb\042\ufedb" +
    "\043\151\067\ufedb\071\ufedb\076\ufedb\001\002\000\056\011" +
    "\ufedd\012\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025\ufedd" +
    "\026\ufedd\030\ufedd\031\ufedd\032\ufedd\033\ufedd\034\ufedd\036" +
    "\ufedd\037\ufedd\040\ufedd\041\ufedd\042\ufedd\043\151\067\ufedd" +
    "\071\ufedd\076\ufedd\001\002\000\006\011\171\076\170\001" +
    "\002\000\056\011\ufee8\012\ufee8\021\ufee8\022\ufee8\023\ufee8" +
    "\024\ufee8\025\ufee8\026\ufee8\030\ufee8\031\ufee8\032\ufee8\033" +
    "\ufee8\034\ufee8\036\ufee8\037\ufee8\040\ufee8\041\ufee8\042\ufee8" +
    "\043\ufee8\067\ufee8\071\ufee8\076\ufee8\001\002\000\054\003" +
    "\142\007\131\011\165\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\066\072\075\121\076\166\111\120\113\074\121\100" +
    "\122\114\001\002\000\006\011\ufee5\076\ufee5\001\002\000" +
    "\052\003\142\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\056\011\ufee7\012\ufee7\021\ufee7\022" +
    "\ufee7\023\ufee7\024\ufee7\025\ufee7\026\ufee7\030\ufee7\031\ufee7" +
    "\032\ufee7\033\ufee7\034\ufee7\036\ufee7\037\ufee7\040\ufee7\041" +
    "\ufee7\042\ufee7\043\ufee7\067\ufee7\071\ufee7\076\ufee7\001\002" +
    "\000\006\011\ufee4\076\ufee4\001\002\000\056\011\ufee9\012" +
    "\ufee9\021\ufee9\022\ufee9\023\ufee9\024\ufee9\025\ufee9\026\ufee9" +
    "\030\ufee9\031\ufee9\032\ufee9\033\ufee9\034\ufee9\036\ufee9\037" +
    "\ufee9\040\ufee9\041\ufee9\042\ufee9\043\ufee9\067\ufee9\071\ufee9" +
    "\076\ufee9\001\002\000\052\003\172\007\131\027\076\035" +
    "\106\047\077\050\115\051\122\052\113\053\104\054\111" +
    "\055\101\056\075\057\110\060\103\061\112\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\054\003\142" +
    "\007\131\011\ufee3\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\066\072\075\121\076\ufee3\111\120\113\074\121\100\122" +
    "\114\001\002\000\006\011\ufee6\076\ufee6\001\002\000\052" +
    "\003\142\007\131\027\076\035\106\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\052\003\142\007\131\027\076\035\106" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\052\003\142\007" +
    "\131\027\076\035\106\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\052\003\142\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\052\003\142\007\131\027\076" +
    "\035\106\047\077\050\115\051\122\052\113\053\104\054" +
    "\111\055\101\056\075\057\110\060\103\061\112\075\121" +
    "\111\120\113\074\121\100\122\114\001\002\000\026\011" +
    "\ufec9\012\ufec9\030\175\031\176\032\ufec9\033\ufec9\034\ufec9" +
    "\067\ufec9\071\ufec9\076\ufec9\001\002\000\026\011\ufeca\012" +
    "\ufeca\030\175\031\176\032\ufeca\033\ufeca\034\ufeca\067\ufeca" +
    "\071\ufeca\076\ufeca\001\002\000\026\011\ufecb\012\ufecb\030" +
    "\ufecb\031\ufecb\032\ufecb\033\ufecb\034\ufecb\067\ufecb\071\ufecb" +
    "\076\ufecb\001\002\000\026\011\ufecc\012\ufecc\030\ufecc\031" +
    "\ufecc\032\ufecc\033\ufecc\034\ufecc\067\ufecc\071\ufecc\076\ufecc" +
    "\001\002\000\026\011\ufec8\012\ufec8\030\175\031\176\032" +
    "\ufec8\033\ufec8\034\ufec8\067\ufec8\071\ufec8\076\ufec8\001\002" +
    "\000\064\003\uff90\011\uff90\012\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\046\uff90\066\uff90\067\uff90\071\uff90\076\uff90" +
    "\001\002\000\064\003\uff8e\011\uff8e\012\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\046\uff8e\066\uff8e\067\uff8e\071\uff8e" +
    "\076\uff8e\001\002\000\052\003\142\007\131\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\066\072\075\121\076\213\111" +
    "\120\113\074\121\100\122\114\001\002\000\020\036\147" +
    "\037\150\040\145\041\152\042\146\043\151\076\212\001" +
    "\002\000\056\011\ufed9\012\ufed9\021\ufed9\022\ufed9\023\ufed9" +
    "\024\ufed9\025\ufed9\026\ufed9\030\ufed9\031\ufed9\032\ufed9\033" +
    "\ufed9\034\ufed9\036\ufed9\037\ufed9\040\ufed9\041\ufed9\042\ufed9" +
    "\043\ufed9\067\ufed9\071\ufed9\076\ufed9\001\002\000\056\011" +
    "\ufed7\012\ufed7\021\ufed7\022\ufed7\023\ufed7\024\ufed7\025\ufed7" +
    "\026\ufed7\030\ufed7\031\ufed7\032\ufed7\033\ufed7\034\ufed7\036" +
    "\ufed7\037\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7\067\ufed7" +
    "\071\ufed7\076\ufed7\001\002\000\034\003\226\072\221\125" +
    "\230\126\231\127\224\130\220\131\225\132\216\133\232" +
    "\134\215\135\222\136\223\137\227\001\002\000\004\011" +
    "\uff23\001\002\000\004\011\uff1d\001\002\000\004\011\245" +
    "\001\002\000\004\011\uff21\001\002\000\004\011\uff1b\001" +
    "\002\000\004\011\uff20\001\002\000\004\011\uff1e\001\002" +
    "\000\004\011\uff22\001\002\000\004\011\uff1f\001\002\000" +
    "\004\011\233\001\002\000\004\011\uff1c\001\002\000\004" +
    "\011\uff26\001\002\000\004\011\uff24\001\002\000\004\011" +
    "\uff25\001\002\000\052\003\142\007\131\027\076\035\106" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\004\011\236\001" +
    "\002\000\004\011\uff1a\001\002\000\052\003\142\007\131" +
    "\027\076\035\106\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\004\011\241\001\002\000\004\011\uff19\001\002\000\052" +
    "\003\142\007\131\027\076\035\106\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\004\076\244\001\002\000\004\076\uff18" +
    "\001\002\000\056\011\uff2a\012\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\024\uff2a\025\uff2a\026\uff2a\030\uff2a\031\uff2a\032\uff2a" +
    "\033\uff2a\034\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042" +
    "\uff2a\043\uff2a\067\uff2a\071\uff2a\076\uff2a\001\002\000\052" +
    "\003\247\007\131\027\076\035\106\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\004\011\255\001\002\000\052\003\142" +
    "\007\131\011\250\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\066\072\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\052\003\142\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\004\011\252\001\002\000" +
    "\052\003\142\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\004\076\254\001\002\000\056\011" +
    "\uff29\012\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025\uff29" +
    "\026\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034\uff29\036" +
    "\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29\067\uff29" +
    "\071\uff29\076\uff29\001\002\000\052\003\257\007\131\027" +
    "\076\035\106\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\004" +
    "\011\263\001\002\000\052\003\142\007\131\011\260\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\066\072\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\052\003\142" +
    "\007\131\027\076\035\106\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\004\076\262\001\002\000\056\011\uff28\012\uff28" +
    "\021\uff28\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\030" +
    "\uff28\031\uff28\032\uff28\033\uff28\034\uff28\036\uff28\037\uff28" +
    "\040\uff28\041\uff28\042\uff28\043\uff28\067\uff28\071\uff28\076" +
    "\uff28\001\002\000\052\003\265\007\131\027\076\035\106" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\004\076\266\001" +
    "\002\000\124\003\142\007\131\011\uff27\012\uff27\021\uff27" +
    "\022\uff27\023\uff27\024\uff27\025\uff27\026\uff27\030\uff27\031" +
    "\uff27\032\uff27\033\uff27\034\uff27\036\uff27\037\uff27\040\uff27" +
    "\041\uff27\042\uff27\043\uff27\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\066\072\067\uff27\071\uff27\075\121\076\uff27\111" +
    "\120\113\074\121\100\122\114\001\002\000\056\011\uff2b" +
    "\012\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026" +
    "\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034\uff2b\036\uff2b" +
    "\037\uff2b\040\uff2b\041\uff2b\042\uff2b\043\uff2b\067\uff2b\071" +
    "\uff2b\076\uff2b\001\002\000\050\003\142\007\131\027\076" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\050\003\142\007" +
    "\131\027\076\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\050" +
    "\003\142\007\131\027\076\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\050\003\142\007\131\027\076\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\050\003\142\007\131\027\076\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\050\003\142\007\131" +
    "\027\076\047\077\050\115\051\122\052\113\053\104\054" +
    "\111\055\101\056\075\057\110\060\103\061\112\075\121" +
    "\111\120\113\074\121\100\122\114\001\002\000\042\011" +
    "\ufed4\012\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4\025\ufed4" +
    "\026\ufed4\030\ufed4\031\ufed4\032\ufed4\033\ufed4\034\ufed4\067" +
    "\ufed4\071\ufed4\076\ufed4\001\002\000\042\011\ufed3\012\ufed3" +
    "\021\ufed3\022\ufed3\023\ufed3\024\ufed3\025\ufed3\026\ufed3\030" +
    "\ufed3\031\ufed3\032\ufed3\033\ufed3\034\ufed3\067\ufed3\071\ufed3" +
    "\076\ufed3\001\002\000\042\011\ufed5\012\ufed5\021\ufed5\022" +
    "\ufed5\023\ufed5\024\ufed5\025\ufed5\026\ufed5\030\ufed5\031\ufed5" +
    "\032\ufed5\033\ufed5\034\ufed5\067\ufed5\071\ufed5\076\ufed5\001" +
    "\002\000\042\011\ufed2\012\ufed2\021\ufed2\022\ufed2\023\ufed2" +
    "\024\ufed2\025\ufed2\026\ufed2\030\ufed2\031\ufed2\032\ufed2\033" +
    "\ufed2\034\ufed2\067\ufed2\071\ufed2\076\ufed2\001\002\000\042" +
    "\011\ufed1\012\ufed1\021\ufed1\022\ufed1\023\ufed1\024\ufed1\025" +
    "\ufed1\026\ufed1\030\ufed1\031\ufed1\032\ufed1\033\ufed1\034\ufed1" +
    "\067\ufed1\071\ufed1\076\ufed1\001\002\000\042\011\ufed0\012" +
    "\ufed0\021\ufed0\022\ufed0\023\ufed0\024\ufed0\025\ufed0\026\ufed0" +
    "\030\ufed0\031\ufed0\032\ufed0\033\ufed0\034\ufed0\067\ufed0\071" +
    "\ufed0\076\ufed0\001\002\000\012\003\305\007\306\047\304" +
    "\070\310\001\002\000\004\076\357\001\002\000\004\076" +
    "\356\001\002\000\004\076\355\001\002\000\004\076\354" +
    "\001\002\000\056\003\314\007\131\027\076\035\106\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\070\313\071\312\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\006" +
    "\011\333\071\353\001\002\000\012\003\uffa3\011\uffa3\012" +
    "\uffa3\076\uffa3\001\002\000\054\003\346\007\131\027\076" +
    "\035\106\047\077\050\115\051\122\052\113\053\104\054" +
    "\111\055\101\056\075\057\110\060\103\061\112\070\313" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\054\003\142\007\131\011\327\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\066\072\071\344\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\006\011\uff98\071\uff98\001" +
    "\002\000\010\003\317\011\321\071\320\001\002\000\004" +
    "\070\336\001\002\000\012\003\uffa5\011\uffa5\012\uffa5\076" +
    "\uffa5\001\002\000\004\070\322\001\002\000\054\003\324" +
    "\007\131\027\076\035\106\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\070\313\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\006\011\333\071\332\001\002\000\054" +
    "\003\142\007\131\011\327\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\066\072\071\330\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\010\003\317\011\321\071\326" +
    "\001\002\000\010\003\uffa1\011\uffa1\071\uffa1\001\002\000" +
    "\052\003\142\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\010\003\uff9d\011\uff9d\071\uff9d\001" +
    "\002\000\006\011\uff96\071\uff96\001\002\000\010\003\uffa0" +
    "\011\uffa0\071\uffa0\001\002\000\052\003\334\007\131\027" +
    "\076\035\106\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\054" +
    "\003\142\007\131\011\uff97\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\066\072\071\uff97\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\006\011\uff99\071\uff99\001\002" +
    "\000\054\003\340\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\070\313\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\006\011\333\071\343" +
    "\001\002\000\052\003\142\007\131\011\327\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\066\072\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\010\003\317\011\321" +
    "\071\342\001\002\000\010\003\uff9c\011\uff9c\071\uff9c\001" +
    "\002\000\010\003\uff9b\011\uff9b\071\uff9b\001\002\000\012" +
    "\003\uffa2\011\uffa2\012\uffa2\076\uffa2\001\002\000\006\011" +
    "\333\071\352\001\002\000\054\003\142\007\131\011\327" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\066\072\071\351" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\010\003\317\011\321\071\350\001\002\000\010\003\uff9f" +
    "\011\uff9f\071\uff9f\001\002\000\010\003\uff9a\011\uff9a\071" +
    "\uff9a\001\002\000\010\003\uff9e\011\uff9e\071\uff9e\001\002" +
    "\000\012\003\uffa4\011\uffa4\012\uffa4\076\uffa4\001\002\000" +
    "\056\011\uff03\012\uff03\021\uff03\022\uff03\023\uff03\024\uff03" +
    "\025\uff03\026\uff03\030\uff03\031\uff03\032\uff03\033\uff03\034" +
    "\uff03\036\uff03\037\uff03\040\uff03\041\uff03\042\uff03\043\uff03" +
    "\067\uff03\071\uff03\076\uff03\001\002\000\056\011\uff04\012" +
    "\uff04\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\026\uff04" +
    "\030\uff04\031\uff04\032\uff04\033\uff04\034\uff04\036\uff04\037" +
    "\uff04\040\uff04\041\uff04\042\uff04\043\uff04\067\uff04\071\uff04" +
    "\076\uff04\001\002\000\056\011\uff01\012\uff01\021\uff01\022" +
    "\uff01\023\uff01\024\uff01\025\uff01\026\uff01\030\uff01\031\uff01" +
    "\032\uff01\033\uff01\034\uff01\036\uff01\037\uff01\040\uff01\041" +
    "\uff01\042\uff01\043\uff01\067\uff01\071\uff01\076\uff01\001\002" +
    "\000\056\011\uff02\012\uff02\021\uff02\022\uff02\023\uff02\024" +
    "\uff02\025\uff02\026\uff02\030\uff02\031\uff02\032\uff02\033\uff02" +
    "\034\uff02\036\uff02\037\uff02\040\uff02\041\uff02\042\uff02\043" +
    "\uff02\067\uff02\071\uff02\076\uff02\001\002\000\074\003\142" +
    "\007\131\011\ufec6\012\ufec6\030\ufec6\031\ufec6\032\ufec6\033" +
    "\ufec6\034\ufec6\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\066" +
    "\072\067\ufec6\071\ufec6\075\121\076\ufec6\111\120\113\074" +
    "\121\100\122\114\001\002\000\026\011\ufec7\012\ufec7\030" +
    "\ufec7\031\ufec7\032\ufec7\033\ufec7\034\ufec7\067\ufec7\071\ufec7" +
    "\076\ufec7\001\002\000\010\003\363\007\364\070\310\001" +
    "\002\000\004\076\370\001\002\000\004\076\367\001\002" +
    "\000\004\076\366\001\002\000\056\011\uff06\012\uff06\021" +
    "\uff06\022\uff06\023\uff06\024\uff06\025\uff06\026\uff06\030\uff06" +
    "\031\uff06\032\uff06\033\uff06\034\uff06\036\uff06\037\uff06\040" +
    "\uff06\041\uff06\042\uff06\043\uff06\067\uff06\071\uff06\076\uff06" +
    "\001\002\000\056\011\uff07\012\uff07\021\uff07\022\uff07\023" +
    "\uff07\024\uff07\025\uff07\026\uff07\030\uff07\031\uff07\032\uff07" +
    "\033\uff07\034\uff07\036\uff07\037\uff07\040\uff07\041\uff07\042" +
    "\uff07\043\uff07\067\uff07\071\uff07\076\uff07\001\002\000\056" +
    "\011\uff05\012\uff05\021\uff05\022\uff05\023\uff05\024\uff05\025" +
    "\uff05\026\uff05\030\uff05\031\uff05\032\uff05\033\uff05\034\uff05" +
    "\036\uff05\037\uff05\040\uff05\041\uff05\042\uff05\043\uff05\067" +
    "\uff05\071\uff05\076\uff05\001\002\000\042\011\ufecf\012\ufecf" +
    "\021\ufecf\022\ufecf\023\ufecf\024\ufecf\025\ufecf\026\ufecf\030" +
    "\ufecf\031\ufecf\032\ufecf\033\ufecf\034\ufecf\067\ufecf\071\ufecf" +
    "\076\ufecf\001\002\000\110\003\142\007\131\011\ufecd\012" +
    "\ufecd\021\ufecd\022\ufecd\023\ufecd\024\ufecd\025\ufecd\026\ufecd" +
    "\030\ufecd\031\ufecd\032\ufecd\033\ufecd\034\ufecd\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\066\072\067\ufecd\071\ufecd\075" +
    "\121\076\ufecd\111\120\113\074\121\100\122\114\001\002" +
    "\000\010\003\374\007\375\070\310\001\002\000\006\011" +
    "\u010f\076\u010e\001\002\000\004\011\u010b\001\002\000\004" +
    "\076\u010a\001\002\000\006\003\u0100\011\u0101\001\002\000" +
    "\014\114\u0107\115\u0104\116\u0102\117\u0105\120\u0108\001\002" +
    "\000\016\003\u0106\114\u0107\115\u0104\116\u0102\117\u0105\120" +
    "\u0108\001\002\000\004\076\uff0a\001\002\000\004\076\uff11" +
    "\001\002\000\004\076\uff0b\001\002\000\004\076\uff09\001" +
    "\002\000\004\076\uff0d\001\002\000\004\076\uff0c\001\002" +
    "\000\004\076\uff08\001\002\000\004\076\uff0e\001\002\000" +
    "\056\011\uff14\012\uff14\021\uff14\022\uff14\023\uff14\024\uff14" +
    "\025\uff14\026\uff14\030\uff14\031\uff14\032\uff14\033\uff14\034" +
    "\uff14\036\uff14\037\uff14\040\uff14\041\uff14\042\uff14\043\uff14" +
    "\067\uff14\071\uff14\076\uff14\001\002\000\016\003\u010d\114" +
    "\u0107\115\u0104\116\u0102\117\u0105\120\u0108\001\002\000\004" +
    "\076\uff12\001\002\000\004\076\uff0f\001\002\000\056\011" +
    "\uff13\012\uff13\021\uff13\022\uff13\023\uff13\024\uff13\025\uff13" +
    "\026\uff13\030\uff13\031\uff13\032\uff13\033\uff13\034\uff13\036" +
    "\uff13\037\uff13\040\uff13\041\uff13\042\uff13\043\uff13\067\uff13" +
    "\071\uff13\076\uff13\001\002\000\014\114\u0107\115\u0104\116" +
    "\u0102\117\u0105\120\u0108\001\002\000\004\076\uff10\001\002" +
    "\000\076\003\uffc7\004\uffc7\005\uffc7\007\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\044\uffc7\045\uffc7\071\uffc7" +
    "\072\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\113\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\001\002\000" +
    "\052\003\142\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\052\003\u0114\007\131\027\076\035" +
    "\106\047\077\050\115\051\122\052\113\053\104\054\111" +
    "\055\101\056\075\057\110\060\103\061\112\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\052\003\142" +
    "\007\131\012\u0117\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\066\072\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\004\012\u0116\001\002\000\076\003\uff95\004\uff95" +
    "\005\uff95\007\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\044\uff95\045\uff95\071\uff95\072\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107" +
    "\uff95\110\uff95\111\uff95\112\uff95\113\uff95\121\uff95\122\uff95" +
    "\123\uff95\124\uff95\001\002\000\076\003\uff92\004\uff92\005" +
    "\uff92\007\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\044\uff92\045\uff92\071\uff92\072\uff92\077\uff92\100\uff92\101" +
    "\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92" +
    "\110\uff92\111\uff92\112\uff92\113\uff92\121\uff92\122\uff92\123" +
    "\uff92\124\uff92\001\002\000\004\012\u0119\001\002\000\076" +
    "\003\uff93\004\uff93\005\uff93\007\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\044\uff93\045\uff93\071\uff93\072\uff93" +
    "\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105" +
    "\uff93\106\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93" +
    "\121\uff93\122\uff93\123\uff93\124\uff93\001\002\000\010\003" +
    "\uffce\007\uffce\065\uffce\001\002\000\006\011\u026c\076\uff34" +
    "\001\002\000\010\003\uffd0\007\uffd0\065\uffd0\001\002\000" +
    "\010\003\uffcf\007\uffcf\065\uffcf\001\002\000\004\076\u0266" +
    "\001\002\000\010\003\uffd2\007\uffd2\065\uffd2\001\002\000" +
    "\010\007\u0126\011\u0127\076\u0125\001\002\000\010\003\uffd1" +
    "\007\uffd1\065\uffd1\001\002\000\006\003\u0123\007\u0124\001" +
    "\002\000\006\011\uff2c\076\uff2c\001\002\000\006\011\uff31" +
    "\076\uff31\001\002\000\004\070\u012a\001\002\000\006\011" +
    "\uff2d\076\uff2d\001\002\000\014\014\u011f\015\u0121\016\u011c" +
    "\017\u011a\020\u011d\001\002\000\004\007\u0129\001\002\000" +
    "\006\011\uff30\076\uff30\001\002\000\052\003\ufeae\004\ufeae" +
    "\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101" +
    "\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae" +
    "\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000" +
    "\004\071\u0265\001\002\000\052\003\u0140\004\005\005\013" +
    "\007\u0132\045\u013b\071\ufeaa\072\u0135\077\u0147\101\u0137\103" +
    "\u013f\104\u0138\105\u0148\106\u012d\107\u014c\111\120\112\u0136" +
    "\113\074\121\100\122\114\123\u0141\001\002\000\004\012" +
    "\u0264\001\002\000\056\003\ufebc\004\ufebc\005\ufebc\007\ufebc" +
    "\045\ufebc\071\ufebc\072\ufebc\077\ufebc\100\ufebc\101\ufebc\102" +
    "\ufebc\103\ufebc\104\ufebc\105\ufebc\106\ufebc\107\ufebc\111\ufebc" +
    "\112\ufebc\113\ufebc\121\ufebc\122\ufebc\123\ufebc\001\002\000" +
    "\004\012\u0263\001\002\000\056\003\ufec0\004\ufec0\005\ufec0" +
    "\007\ufec0\045\ufec0\071\ufec0\072\ufec0\077\ufec0\100\ufec0\101" +
    "\ufec0\102\ufec0\103\ufec0\104\ufec0\105\ufec0\106\ufec0\107\ufec0" +
    "\111\ufec0\112\ufec0\113\ufec0\121\ufec0\122\ufec0\123\ufec0\001" +
    "\002\000\056\003\ufec2\004\ufec2\005\ufec2\007\ufec2\045\ufec2" +
    "\071\ufec2\072\ufec2\077\ufec2\100\ufec2\101\ufec2\102\ufec2\103" +
    "\ufec2\104\ufec2\105\ufec2\106\ufec2\107\ufec2\111\ufec2\112\ufec2" +
    "\113\ufec2\121\ufec2\122\ufec2\123\ufec2\001\002\000\020\003" +
    "\063\046\066\062\064\063\071\064\065\066\072\075\133" +
    "\001\002\000\004\012\u0262\001\002\000\004\012\u0261\001" +
    "\002\000\004\075\u0253\001\002\000\004\075\u0248\001\002" +
    "\000\004\012\u0247\001\002\000\004\075\u0239\001\002\000" +
    "\056\003\ufebd\004\ufebd\005\ufebd\007\ufebd\045\ufebd\071\ufebd" +
    "\072\ufebd\077\ufebd\100\ufebd\101\ufebd\102\ufebd\103\ufebd\104" +
    "\ufebd\105\ufebd\106\ufebd\107\ufebd\111\ufebd\112\ufebd\113\ufebd" +
    "\121\ufebd\122\ufebd\123\ufebd\001\002\000\062\003\uff81\004" +
    "\uff81\005\uff81\007\uff81\045\uff81\071\uff81\072\uff81\073\u01bd" +
    "\074\u01b7\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\106\uff81\107\uff81\111\uff81\112\uff81\113\uff81" +
    "\121\uff81\122\uff81\123\uff81\001\002\000\016\003\u022c\014" +
    "\u011f\015\u0121\016\u011c\017\u011a\020\u011d\001\002\000\056" +
    "\003\ufec1\004\ufec1\005\ufec1\007\ufec1\045\ufec1\071\ufec1\072" +
    "\ufec1\077\ufec1\100\ufec1\101\ufec1\102\ufec1\103\ufec1\104\ufec1" +
    "\105\ufec1\106\ufec1\107\ufec1\111\ufec1\112\ufec1\113\ufec1\121" +
    "\ufec1\122\ufec1\123\ufec1\001\002\000\004\012\u022b\001\002" +
    "\000\012\003\u0225\011\u0226\012\uffcc\046\u01c0\001\002\000" +
    "\004\075\u01dd\001\002\000\032\003\u01bc\011\u01b9\012\uffcc" +
    "\014\u011f\015\u0121\016\u011c\017\u011a\020\u011d\046\u01c0\066" +
    "\u0195\073\u01bd\074\u01b7\001\002\000\004\075\u01b2\001\002" +
    "\000\056\003\ufebe\004\ufebe\005\ufebe\007\ufebe\045\ufebe\071" +
    "\ufebe\072\ufebe\077\ufebe\100\ufebe\101\ufebe\102\ufebe\103\ufebe" +
    "\104\ufebe\105\ufebe\106\ufebe\107\ufebe\111\ufebe\112\ufebe\113" +
    "\ufebe\121\ufebe\122\ufebe\123\ufebe\001\002\000\056\003\ufebb" +
    "\004\ufebb\005\ufebb\007\ufebb\045\ufebb\071\ufebb\072\ufebb\077" +
    "\ufebb\100\ufebb\101\ufebb\102\ufebb\103\ufebb\104\ufebb\105\ufebb" +
    "\106\ufebb\107\ufebb\111\ufebb\112\ufebb\113\ufebb\121\ufebb\122" +
    "\ufebb\123\ufebb\001\002\000\004\012\u01b1\001\002\000\056" +
    "\003\ufeb9\004\ufeb9\005\ufeb9\007\ufeb9\045\ufeb9\071\ufeb9\072" +
    "\ufeb9\077\ufeb9\100\ufeb9\101\ufeb9\102\ufeb9\103\ufeb9\104\ufeb9" +
    "\105\ufeb9\106\ufeb9\107\ufeb9\111\ufeb9\112\ufeb9\113\ufeb9\121" +
    "\ufeb9\122\ufeb9\123\ufeb9\001\002\000\010\003\u0192\011\u0193" +
    "\066\u0195\001\002\000\004\075\u0163\001\002\000\004\070" +
    "\u0156\001\002\000\056\003\ufebf\004\ufebf\005\ufebf\007\ufebf" +
    "\045\ufebf\071\ufebf\072\ufebf\077\ufebf\100\ufebf\101\ufebf\102" +
    "\ufebf\103\ufebf\104\ufebf\105\ufebf\106\ufebf\107\ufebf\111\ufebf" +
    "\112\ufebf\113\ufebf\121\ufebf\122\ufebf\123\ufebf\001\002\000" +
    "\004\012\u0155\001\002\000\056\003\ufeba\004\ufeba\005\ufeba" +
    "\007\ufeba\045\ufeba\071\ufeba\072\ufeba\077\ufeba\100\ufeba\101" +
    "\ufeba\102\ufeba\103\ufeba\104\ufeba\105\ufeba\106\ufeba\107\ufeba" +
    "\111\ufeba\112\ufeba\113\ufeba\121\ufeba\122\ufeba\123\ufeba\001" +
    "\002\000\052\003\u0153\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\062\003\uff7e\004\uff7e\005" +
    "\uff7e\007\uff7e\045\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e" +
    "\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105" +
    "\uff7e\106\uff7e\107\uff7e\111\uff7e\112\uff7e\113\uff7e\121\uff7e" +
    "\122\uff7e\123\uff7e\001\002\000\004\012\u0151\001\002\000" +
    "\004\012\u0150\001\002\000\056\003\ufeb6\004\ufeb6\005\ufeb6" +
    "\007\ufeb6\045\ufeb6\071\ufeb6\072\ufeb6\077\ufeb6\100\ufeb6\101" +
    "\ufeb6\102\ufeb6\103\ufeb6\104\ufeb6\105\ufeb6\106\ufeb6\107\ufeb6" +
    "\111\ufeb6\112\ufeb6\113\ufeb6\121\ufeb6\122\ufeb6\123\ufeb6\001" +
    "\002\000\056\003\ufeb3\004\ufeb3\005\ufeb3\007\ufeb3\045\ufeb3" +
    "\071\ufeb3\072\ufeb3\077\ufeb3\100\ufeb3\101\ufeb3\102\ufeb3\103" +
    "\ufeb3\104\ufeb3\105\ufeb3\106\ufeb3\107\ufeb3\111\ufeb3\112\ufeb3" +
    "\113\ufeb3\121\ufeb3\122\ufeb3\123\ufeb3\001\002\000\004\012" +
    "\ufead\001\002\000\052\003\142\007\131\012\ufeac\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\066\072\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\020\012\ufec3\030" +
    "\175\031\176\032\177\033\200\034\174\076\ufec3\001\002" +
    "\000\056\003\ufeb5\004\ufeb5\005\ufeb5\007\ufeb5\045\ufeb5\071" +
    "\ufeb5\072\ufeb5\077\ufeb5\100\ufeb5\101\ufeb5\102\ufeb5\103\ufeb5" +
    "\104\ufeb5\105\ufeb5\106\ufeb5\107\ufeb5\111\ufeb5\112\ufeb5\113" +
    "\ufeb5\121\ufeb5\122\ufeb5\123\ufeb5\001\002\000\052\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae" +
    "\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001" +
    "\002\000\052\003\u0140\004\005\005\013\007\u0132\045\u013b" +
    "\071\u0158\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105" +
    "\u0148\106\u012d\107\u014c\111\120\112\u0136\113\074\121\100" +
    "\122\114\123\u0141\001\002\000\006\003\u0159\104\u015a\001" +
    "\002\000\004\075\u0160\001\002\000\004\075\u015b\001\002" +
    "\000\052\003\u015d\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\004\076\u015f\001\002\000\052" +
    "\003\142\007\131\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\066\072\075\121\076\u015e\111\120\113\074\121\100\122" +
    "\114\001\002\000\056\003\uff47\004\uff47\005\uff47\007\uff47" +
    "\045\uff47\071\uff47\072\uff47\077\uff47\100\uff47\101\uff47\102" +
    "\uff47\103\uff47\104\uff47\105\uff47\106\uff47\107\uff47\111\uff47" +
    "\112\uff47\113\uff47\121\uff47\122\uff47\123\uff47\001\002\000" +
    "\056\003\uff48\004\uff48\005\uff48\007\uff48\045\uff48\071\uff48" +
    "\072\uff48\077\uff48\100\uff48\101\uff48\102\uff48\103\uff48\104" +
    "\uff48\105\uff48\106\uff48\107\uff48\111\uff48\112\uff48\113\uff48" +
    "\121\uff48\122\uff48\123\uff48\001\002\000\052\003\142\007" +
    "\131\027\076\035\106\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\004\076\u0162\001\002\000\056\003\uff46\004\uff46\005" +
    "\uff46\007\uff46\045\uff46\071\uff46\072\uff46\077\uff46\100\uff46" +
    "\101\uff46\102\uff46\103\uff46\104\uff46\105\uff46\106\uff46\107" +
    "\uff46\111\uff46\112\uff46\113\uff46\121\uff46\122\uff46\123\uff46" +
    "\001\002\000\052\003\u0164\007\131\027\076\035\106\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\052\003\142\007\131" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\066\072\075\121" +
    "\076\u018d\111\120\113\074\121\100\122\114\001\002\000" +
    "\004\076\u0166\001\002\000\004\070\u0167\001\002\000\006" +
    "\003\u0168\100\u0169\001\002\000\006\071\u0188\100\u0189\001" +
    "\002\000\014\003\u0180\047\u0170\050\u0173\053\u016f\054\u016e" +
    "\001\002\000\004\071\u017f\001\002\000\010\071\uff70\100" +
    "\u016d\102\u016c\001\002\000\006\003\u017b\013\u017c\001\002" +
    "\000\014\003\u0171\047\u0170\050\u0173\053\u016f\054\u016e\001" +
    "\002\000\006\003\uff67\013\uff67\001\002\000\006\003\uff64" +
    "\013\uff64\001\002\000\006\003\uff66\013\uff66\001\002\000" +
    "\004\013\u0179\001\002\000\006\003\u0174\013\u0175\001\002" +
    "\000\006\003\uff65\013\uff65\001\002\000\056\003\ufeae\004" +
    "\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae" +
    "\100\ufeae\101\ufeae\102\ufeae\103\ufeae\104\ufeae\105\ufeae\106" +
    "\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae" +
    "\123\ufeae\001\002\000\056\003\ufeae\004\ufeae\005\ufeae\007" +
    "\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\100\ufeae\101\ufeae" +
    "\102\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111" +
    "\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002" +
    "\000\010\071\uff6e\100\uff6e\102\uff6e\001\002\000\056\003" +
    "\u0140\004\005\005\013\007\u0132\045\u013b\071\ufeab\072\u0135" +
    "\077\u0147\100\ufeab\101\u0137\102\ufeab\103\u013f\104\u0138\105" +
    "\u0148\106\u012d\107\u014c\111\120\112\u0136\113\074\121\100" +
    "\122\114\123\u0141\001\002\000\010\071\uff6a\100\uff6a\102" +
    "\uff6a\001\002\000\056\003\ufeae\004\ufeae\005\ufeae\007\ufeae" +
    "\045\ufeae\071\ufeae\072\ufeae\077\ufeae\100\ufeae\101\ufeae\102" +
    "\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae" +
    "\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000" +
    "\010\071\uff6b\100\uff6b\102\uff6b\001\002\000\052\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae" +
    "\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001" +
    "\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae" +
    "\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105" +
    "\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae" +
    "\122\ufeae\123\ufeae\001\002\000\052\003\u0140\004\005\005" +
    "\013\007\u0132\045\u013b\071\uff71\072\u0135\077\u0147\101\u0137" +
    "\103\u013f\104\u0138\105\u0148\106\u012d\107\u014c\111\120\112" +
    "\u0136\113\074\121\100\122\114\123\u0141\001\002\000\052" +
    "\003\u0140\004\005\005\013\007\u0132\045\u013b\071\uff6f\072" +
    "\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d" +
    "\107\u014c\111\120\112\u0136\113\074\121\100\122\114\123" +
    "\u0141\001\002\000\056\003\uff74\004\uff74\005\uff74\007\uff74" +
    "\045\uff74\071\uff74\072\uff74\077\uff74\100\uff74\101\uff74\102" +
    "\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74\111\uff74" +
    "\112\uff74\113\uff74\121\uff74\122\uff74\123\uff74\001\002\000" +
    "\004\013\u0186\001\002\000\006\003\u0183\013\u0182\001\002" +
    "\000\056\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071" +
    "\ufeae\072\ufeae\077\ufeae\100\ufeae\101\ufeae\102\ufeae\103\ufeae" +
    "\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113" +
    "\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\056\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\100\ufeae\101\ufeae\102\ufeae\103\ufeae\104\ufeae\105\ufeae" +
    "\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122" +
    "\ufeae\123\ufeae\001\002\000\010\071\uff68\100\uff68\102\uff68" +
    "\001\002\000\010\071\uff6d\100\uff6d\102\uff6d\001\002\000" +
    "\056\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae" +
    "\072\ufeae\077\ufeae\100\ufeae\101\ufeae\102\ufeae\103\ufeae\104" +
    "\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae" +
    "\121\ufeae\122\ufeae\123\ufeae\001\002\000\010\071\uff69\100" +
    "\uff69\102\uff69\001\002\000\056\003\uff72\004\uff72\005\uff72" +
    "\007\uff72\045\uff72\071\uff72\072\uff72\077\uff72\100\uff72\101" +
    "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72" +
    "\111\uff72\112\uff72\113\uff72\121\uff72\122\uff72\123\uff72\001" +
    "\002\000\012\047\u0170\050\u0173\053\u016f\054\u016e\001\002" +
    "\000\004\013\u018b\001\002\000\056\003\ufeae\004\ufeae\005" +
    "\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\100\ufeae" +
    "\101\ufeae\102\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107" +
    "\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae" +
    "\001\002\000\010\071\uff6c\100\uff6c\102\uff6c\001\002\000" +
    "\004\070\u018e\001\002\000\006\003\u018f\100\u0169\001\002" +
    "\000\004\100\u0189\001\002\000\004\071\u0191\001\002\000" +
    "\056\003\uff73\004\uff73\005\uff73\007\uff73\045\uff73\071\uff73" +
    "\072\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104" +
    "\uff73\105\uff73\106\uff73\107\uff73\111\uff73\112\uff73\113\uff73" +
    "\121\uff73\122\uff73\123\uff73\001\002\000\014\003\u01ac\007" +
    "\u01ad\012\uffa8\046\u019d\066\u01ae\001\002\000\006\003\u01a9" +
    "\007\u01aa\001\002\000\012\003\u019c\012\uffa8\046\u019d\066" +
    "\u019e\001\002\000\054\003\u0196\007\131\027\076\035\106" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\067\u0197\075\121" +
    "\111\120\113\074\121\100\122\114\001\002\000\052\003" +
    "\142\007\131\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\066" +
    "\072\067\u019a\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\012\003\uffad\012\uffad\046\uffad\066\uffad\001" +
    "\002\000\004\067\u0199\001\002\000\012\003\uffae\012\uffae" +
    "\046\uffae\066\uffae\001\002\000\012\003\uffac\012\uffac\046" +
    "\uffac\066\uffac\001\002\000\004\012\u01a8\001\002\000\006" +
    "\012\u01a7\070\310\001\002\000\006\003\u01a4\070\310\001" +
    "\002\000\054\003\u019f\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\067\u01a0\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\052\003\142\007" +
    "\131\047\077\050\115\051\122\052\113\053\104\054\111" +
    "\055\101\056\075\057\110\060\103\061\112\066\072\067" +
    "\u01a3\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\012\003\uffaf\012\uffaf\046\uffaf\066\uffaf\001\002\000" +
    "\004\067\u01a2\001\002\000\012\003\uffb0\012\uffb0\046\uffb0" +
    "\066\uffb0\001\002\000\012\003\uffaa\012\uffaa\046\uffaa\066" +
    "\uffaa\001\002\000\004\012\uffa6\001\002\000\004\012\uffa9" +
    "\001\002\000\004\012\uffa7\001\002\000\056\003\uff8a\004" +
    "\uff8a\005\uff8a\007\uff8a\045\uff8a\071\uff8a\072\uff8a\077\uff8a" +
    "\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\111\uff8a\112\uff8a\113\uff8a\121\uff8a\122\uff8a" +
    "\123\uff8a\001\002\000\056\003\uff8d\004\uff8d\005\uff8d\007" +
    "\uff8d\045\uff8d\071\uff8d\072\uff8d\077\uff8d\100\uff8d\101\uff8d" +
    "\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\111" +
    "\uff8d\112\uff8d\113\uff8d\121\uff8d\122\uff8d\123\uff8d\001\002" +
    "\000\010\003\uff86\011\uff86\066\uff86\001\002\000\010\003" +
    "\uff89\011\uff89\066\uff89\001\002\000\004\012\u01b0\001\002" +
    "\000\004\070\310\001\002\000\010\003\uff87\011\uff87\066" +
    "\uff87\001\002\000\004\067\u01af\001\002\000\012\003\uffab" +
    "\012\uffab\046\uffab\066\uffab\001\002\000\056\003\uff8b\004" +
    "\uff8b\005\uff8b\007\uff8b\045\uff8b\071\uff8b\072\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\107\uff8b\111\uff8b\112\uff8b\113\uff8b\121\uff8b\122\uff8b" +
    "\123\uff8b\001\002\000\056\003\ufeb7\004\ufeb7\005\ufeb7\007" +
    "\ufeb7\045\ufeb7\071\ufeb7\072\ufeb7\077\ufeb7\100\ufeb7\101\ufeb7" +
    "\102\ufeb7\103\ufeb7\104\ufeb7\105\ufeb7\106\ufeb7\107\ufeb7\111" +
    "\ufeb7\112\ufeb7\113\ufeb7\121\ufeb7\122\ufeb7\123\ufeb7\001\002" +
    "\000\052\003\u01b3\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\052\003\142\007\131\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\066\072\075\121\076\u01b6" +
    "\111\120\113\074\121\100\122\114\001\002\000\004\076" +
    "\u01b5\001\002\000\004\012\uff00\001\002\000\004\012\ufeff" +
    "\001\002\000\004\075\u01cf\001\002\000\012\003\u01ac\012" +
    "\uffa8\046\u019d\066\u019e\001\002\000\004\007\u01cc\001\002" +
    "\000\004\012\u01cb\001\002\000\056\003\uff80\004\uff80\005" +
    "\uff80\007\uff80\045\uff80\071\uff80\072\uff80\077\uff80\100\uff80" +
    "\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107" +
    "\uff80\111\uff80\112\uff80\113\uff80\121\uff80\122\uff80\123\uff80" +
    "\001\002\000\054\003\142\007\131\027\076\035\106\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\066\u01ae\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\006\003\u01c4" +
    "\070\u01c5\001\002\000\062\003\uff7d\004\uff7d\005\uff7d\007" +
    "\uff7d\045\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\077\uff7d" +
    "\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106" +
    "\uff7d\107\uff7d\111\uff7d\112\uff7d\113\uff7d\121\uff7d\122\uff7d" +
    "\123\uff7d\001\002\000\004\007\u01c3\001\002\000\052\003" +
    "\u01c1\007\131\027\076\035\106\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\052\003\142\007\131\012\uffcb\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\066\072\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\004\012\uffcd\001\002" +
    "\000\012\003\uffbd\011\uffbd\012\uffbd\046\uffbd\001\002\000" +
    "\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae" +
    "\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106" +
    "\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae" +
    "\123\ufeae\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007" +
    "\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae" +
    "\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113" +
    "\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003\u0140" +
    "\004\005\005\013\007\u0132\045\u013b\071\u01c7\072\u0135\077" +
    "\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107\u014c" +
    "\111\120\112\u0136\113\074\121\100\122\114\123\u0141\001" +
    "\002\000\056\003\uff76\004\uff76\005\uff76\007\uff76\045\uff76" +
    "\071\uff76\072\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103" +
    "\uff76\104\uff76\105\uff76\106\uff76\107\uff76\111\uff76\112\uff76" +
    "\113\uff76\121\uff76\122\uff76\123\uff76\001\002\000\052\003" +
    "\u0140\004\005\005\013\007\u0132\045\u013b\071\u01c9\072\u0135" +
    "\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107" +
    "\u014c\111\120\112\u0136\113\074\121\100\122\114\123\u0141" +
    "\001\002\000\056\003\uff75\004\uff75\005\uff75\007\uff75\045" +
    "\uff75\071\uff75\072\uff75\077\uff75\100\uff75\101\uff75\102\uff75" +
    "\103\uff75\104\uff75\105\uff75\106\uff75\107\uff75\111\uff75\112" +
    "\uff75\113\uff75\121\uff75\122\uff75\123\uff75\001\002\000\004" +
    "\012\uffca\001\002\000\056\003\uffc0\004\uffc0\005\uffc0\007" +
    "\uffc0\045\uffc0\071\uffc0\072\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\111" +
    "\uffc0\112\uffc0\113\uffc0\121\uffc0\122\uffc0\123\uffc0\001\002" +
    "\000\012\003\uffba\011\uffba\012\uffba\046\uffba\001\002\000" +
    "\004\012\u01ce\001\002\000\056\003\uff8c\004\uff8c\005\uff8c" +
    "\007\uff8c\045\uff8c\071\uff8c\072\uff8c\077\uff8c\100\uff8c\101" +
    "\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c" +
    "\111\uff8c\112\uff8c\113\uff8c\121\uff8c\122\uff8c\123\uff8c\001" +
    "\002\000\052\003\u01d1\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\004\076\u01d6\001\002\000" +
    "\052\003\142\007\131\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\066\072\075\121\076\u01d2\111\120\113\074\121\100" +
    "\122\114\001\002\000\004\070\u01d3\001\002\000\052\003" +
    "\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae" +
    "\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107" +
    "\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae" +
    "\001\002\000\052\003\u0140\004\005\005\013\007\u0132\045" +
    "\u013b\071\u01d5\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138" +
    "\105\u0148\106\u012d\107\u014c\111\120\112\u0136\113\074\121" +
    "\100\122\114\123\u0141\001\002\000\062\003\uff78\004\uff78" +
    "\005\uff78\007\uff78\045\uff78\071\uff78\072\uff78\073\uff78\074" +
    "\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78" +
    "\105\uff78\106\uff78\107\uff78\111\uff78\112\uff78\113\uff78\121" +
    "\uff78\122\uff78\123\uff78\001\002\000\006\003\u01d7\070\u01d8" +
    "\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045" +
    "\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae" +
    "\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121" +
    "\ufeae\122\ufeae\123\ufeae\001\002\000\052\003\ufeae\004\ufeae" +
    "\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101" +
    "\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae" +
    "\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000" +
    "\052\003\u0140\004\005\005\013\007\u0132\045\u013b\071\u01da" +
    "\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106" +
    "\u012d\107\u014c\111\120\112\u0136\113\074\121\100\122\114" +
    "\123\u0141\001\002\000\062\003\uff79\004\uff79\005\uff79\007" +
    "\uff79\045\uff79\071\uff79\072\uff79\073\uff79\074\uff79\077\uff79" +
    "\100\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\106" +
    "\uff79\107\uff79\111\uff79\112\uff79\113\uff79\121\uff79\122\uff79" +
    "\123\uff79\001\002\000\052\003\u0140\004\005\005\013\007" +
    "\u0132\045\u013b\071\u01dc\072\u0135\077\u0147\101\u0137\103\u013f" +
    "\104\u0138\105\u0148\106\u012d\107\u014c\111\120\112\u0136\113" +
    "\074\121\100\122\114\123\u0141\001\002\000\062\003\uff77" +
    "\004\uff77\005\uff77\007\uff77\045\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77" +
    "\104\uff77\105\uff77\106\uff77\107\uff77\111\uff77\112\uff77\113" +
    "\uff77\121\uff77\122\uff77\123\uff77\001\002\000\010\003\u01df" +
    "\007\u01e1\045\u01e0\001\002\000\004\012\u0210\001\002\000" +
    "\006\012\u01f6\046\u01f5\001\002\000\016\003\u01e7\014\u011f" +
    "\015\u0121\016\u011c\017\u011a\020\u011d\001\002\000\006\003" +
    "\u01e2\046\u01e3\001\002\000\052\003\142\007\131\027\076" +
    "\035\106\047\077\050\115\051\122\052\113\053\104\054" +
    "\111\055\101\056\075\057\110\060\103\061\112\075\121" +
    "\111\120\113\074\121\100\122\114\001\002\000\052\003" +
    "\u01e4\007\131\027\076\035\106\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\052\003\142\007\131\012\uff57\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\066\072\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\004\012\uff5e\001\002" +
    "\000\004\012\uff58\001\002\000\004\007\u01f2\001\002\000" +
    "\006\003\u01e9\007\u01ea\001\002\000\004\046\u01f0\001\002" +
    "\000\006\003\u01eb\046\u01ec\001\002\000\052\003\142\007" +
    "\131\027\076\035\106\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\052\003\u01ed\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\052\003\142\007\131\012\uff5a" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\066\072\075\121" +
    "\111\120\113\074\121\100\122\114\001\002\000\004\012" +
    "\uff5f\001\002\000\004\012\uff5b\001\002\000\052\003\142" +
    "\007\131\027\076\035\106\047\077\050\115\051\122\052" +
    "\113\053\104\054\111\055\101\056\075\057\110\060\103" +
    "\061\112\075\121\111\120\113\074\121\100\122\114\001" +
    "\002\000\004\012\uff5c\001\002\000\004\046\u01f3\001\002" +
    "\000\052\003\142\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\004\012\uff5d\001\002\000\052" +
    "\003\142\007\131\027\076\035\106\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\075\121\111\120\113\074\121\100\122" +
    "\114\001\002\000\052\003\142\007\131\027\076\035\106" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\075\121\111\120" +
    "\113\074\121\100\122\114\001\002\000\004\012\uff56\001" +
    "\002\000\004\012\u01f9\001\002\000\006\003\u01fa\007\u01fb" +
    "\001\002\000\004\046\u020d\001\002\000\014\003\u0202\046" +
    "\u0204\062\u0201\063\u0205\064\u0203\001\002\000\004\076\u01fd" +
    "\001\002\000\004\070\u01fe\001\002\000\052\003\ufeae\004" +
    "\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae" +
    "\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111" +
    "\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002" +
    "\000\052\003\u0140\004\005\005\013\007\u0132\045\u013b\071" +
    "\u0200\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148" +
    "\106\u012d\107\u014c\111\120\112\u0136\113\074\121\100\122" +
    "\114\123\u0141\001\002\000\056\003\uff62\004\uff62\005\uff62" +
    "\007\uff62\045\uff62\071\uff62\072\uff62\077\uff62\100\uff62\101" +
    "\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62" +
    "\111\uff62\112\uff62\113\uff62\121\uff62\122\uff62\123\uff62\001" +
    "\002\000\052\003\142\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\054\003\142\007\131\012" +
    "\u020a\027\076\035\106\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\004\076\uff52\001\002\000\052\003\u0206\007\131\027" +
    "\076\035\106\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\004" +
    "\076\uff53\001\002\000\054\003\142\007\131\012\u0208\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\066\072\075\121\076" +
    "\uff4f\111\120\113\074\121\100\122\114\001\002\000\004" +
    "\076\uff55\001\002\000\004\076\uff4d\001\002\000\006\012" +
    "\u020b\076\uff50\001\002\000\004\076\uff4c\001\002\000\004" +
    "\076\uff4e\001\002\000\004\076\uff54\001\002\000\052\003" +
    "\142\007\131\027\076\035\106\047\077\050\115\051\122" +
    "\052\113\053\104\054\111\055\101\056\075\057\110\060" +
    "\103\061\112\075\121\111\120\113\074\121\100\122\114" +
    "\001\002\000\004\076\uff51\001\002\000\004\012\uff59\001" +
    "\002\000\052\003\u0211\007\131\027\076\035\106\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\075\121\111\120\113\074" +
    "\121\100\122\114\001\002\000\052\003\142\007\131\012" +
    "\u021e\047\077\050\115\051\122\052\113\053\104\054\111" +
    "\055\101\056\075\057\110\060\103\061\112\066\072\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\004" +
    "\012\u0213\001\002\000\006\003\u0214\007\u01fb\001\002\000" +
    "\006\046\u020d\076\u021a\001\002\000\004\076\u0216\001\002" +
    "\000\004\070\u0217\001\002\000\052\003\ufeae\004\ufeae\005" +
    "\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae" +
    "\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112" +
    "\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052" +
    "\003\u0140\004\005\005\013\007\u0132\045\u013b\071\u0219\072" +
    "\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d" +
    "\107\u014c\111\120\112\u0136\113\074\121\100\122\114\123" +
    "\u0141\001\002\000\056\003\uff63\004\uff63\005\uff63\007\uff63" +
    "\045\uff63\071\uff63\072\uff63\077\uff63\100\uff63\101\uff63\102" +
    "\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107\uff63\111\uff63" +
    "\112\uff63\113\uff63\121\uff63\122\uff63\123\uff63\001\002\000" +
    "\004\070\u021b\001\002\000\052\003\ufeae\004\ufeae\005\ufeae" +
    "\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103" +
    "\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae" +
    "\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003" +
    "\u0140\004\005\005\013\007\u0132\045\u013b\071\u021d\072\u0135" +
    "\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107" +
    "\u014c\111\120\112\u0136\113\074\121\100\122\114\123\u0141" +
    "\001\002\000\056\003\uff60\004\uff60\005\uff60\007\uff60\045" +
    "\uff60\071\uff60\072\uff60\077\uff60\100\uff60\101\uff60\102\uff60" +
    "\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\111\uff60\112" +
    "\uff60\113\uff60\121\uff60\122\uff60\123\uff60\001\002\000\006" +
    "\003\u01fa\007\u01fb\001\002\000\004\076\u0220\001\002\000" +
    "\004\070\u0221\001\002\000\052\003\ufeae\004\ufeae\005\ufeae" +
    "\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103" +
    "\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae" +
    "\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003" +
    "\u0140\004\005\005\013\007\u0132\045\u013b\071\u0223\072\u0135" +
    "\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107" +
    "\u014c\111\120\112\u0136\113\074\121\100\122\114\123\u0141" +
    "\001\002\000\056\003\uff61\004\uff61\005\uff61\007\uff61\045" +
    "\uff61\071\uff61\072\uff61\077\uff61\100\uff61\101\uff61\102\uff61" +
    "\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61\111\uff61\112" +
    "\uff61\113\uff61\121\uff61\122\uff61\123\uff61\001\002\000\004" +
    "\012\u022a\001\002\000\054\003\142\007\131\012\u0229\027" +
    "\076\035\106\047\077\050\115\051\122\052\113\053\104" +
    "\054\111\055\101\056\075\057\110\060\103\061\112\075" +
    "\121\111\120\113\074\121\100\122\114\001\002\000\006" +
    "\003\u0227\007\u0228\001\002\000\012\003\uffb9\011\uffb9\012" +
    "\uffb9\046\uffb9\001\002\000\012\003\uffbf\011\uffbf\012\uffbf" +
    "\046\uffbf\001\002\000\056\003\uffc1\004\uffc1\005\uffc1\007" +
    "\uffc1\045\uffc1\071\uffc1\072\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\111" +
    "\uffc1\112\uffc1\113\uffc1\121\uffc1\122\uffc1\123\uffc1\001\002" +
    "\000\056\003\uffc2\004\uffc2\005\uffc2\007\uffc2\045\uffc2\071" +
    "\uffc2\072\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2" +
    "\104\uffc2\105\uffc2\106\uffc2\107\uffc2\111\uffc2\112\uffc2\113" +
    "\uffc2\121\uffc2\122\uffc2\123\uffc2\001\002\000\056\003\ufeb8" +
    "\004\ufeb8\005\ufeb8\007\ufeb8\045\ufeb8\071\ufeb8\072\ufeb8\077" +
    "\ufeb8\100\ufeb8\101\ufeb8\102\ufeb8\103\ufeb8\104\ufeb8\105\ufeb8" +
    "\106\ufeb8\107\ufeb8\111\ufeb8\112\ufeb8\113\ufeb8\121\ufeb8\122" +
    "\ufeb8\123\ufeb8\001\002\000\006\007\u0235\065\u0234\001\002" +
    "\000\010\003\u022e\007\u0230\065\u022f\001\002\000\014\003" +
    "\uffbb\007\u0233\011\uffbb\012\uffbb\046\uffbb\001\002\000\006" +
    "\003\u0231\007\u0232\001\002\000\012\003\uffbe\011\uffbe\012" +
    "\uffbe\046\uffbe\001\002\000\010\003\uff83\011\uff83\066\uff83" +
    "\001\002\000\010\003\uff88\011\uff88\066\uff88\001\002\000" +
    "\010\003\uff84\011\uff84\066\uff84\001\002\000\004\007\u0236" +
    "\001\002\000\012\003\uffbc\011\uffbc\012\uffbc\046\uffbc\001" +
    "\002\000\010\003\uff85\011\uff85\066\uff85\001\002\000\062" +
    "\003\uff7f\004\uff7f\005\uff7f\007\uff7f\045\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\111\uff7f\112" +
    "\uff7f\113\uff7f\121\uff7f\122\uff7f\123\uff7f\001\002\000\056" +
    "\003\uff82\004\uff82\005\uff82\007\uff82\045\uff82\071\uff82\072" +
    "\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\105\uff82\106\uff82\107\uff82\111\uff82\112\uff82\113\uff82\121" +
    "\uff82\122\uff82\123\uff82\001\002\000\052\003\u023b\007\131" +
    "\027\076\035\106\047\077\050\115\051\122\052\113\053" +
    "\104\054\111\055\101\056\075\057\110\060\103\061\112" +
    "\075\121\111\120\113\074\121\100\122\114\001\002\000" +
    "\004\076\u0240\001\002\000\052\003\142\007\131\047\077" +
    "\050\115\051\122\052\113\053\104\054\111\055\101\056" +
    "\075\057\110\060\103\061\112\066\072\075\121\076\u023c" +
    "\111\120\113\074\121\100\122\114\001\002\000\004\070" +
    "\u023d\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae" +
    "\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104" +
    "\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae" +
    "\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003\u0140\004" +
    "\005\005\013\007\u0132\045\u013b\071\u023f\072\u0135\077\u0147" +
    "\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107\u014c\111" +
    "\120\112\u0136\113\074\121\100\122\114\123\u0141\001\002" +
    "\000\056\003\uff4a\004\uff4a\005\uff4a\007\uff4a\045\uff4a\071" +
    "\uff4a\072\uff4a\077\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a" +
    "\104\uff4a\105\uff4a\106\uff4a\107\uff4a\111\uff4a\112\uff4a\113" +
    "\uff4a\121\uff4a\122\uff4a\123\uff4a\001\002\000\006\003\u0241" +
    "\070\u0242\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007" +
    "\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae" +
    "\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113" +
    "\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae" +
    "\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001" +
    "\002\000\052\003\u0140\004\005\005\013\007\u0132\045\u013b" +
    "\071\u0244\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105" +
    "\u0148\106\u012d\107\u014c\111\120\112\u0136\113\074\121\100" +
    "\122\114\123\u0141\001\002\000\056\003\uff4b\004\uff4b\005" +
    "\uff4b\007\uff4b\045\uff4b\071\uff4b\072\uff4b\077\uff4b\100\uff4b" +
    "\101\uff4b\102\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\107" +
    "\uff4b\111\uff4b\112\uff4b\113\uff4b\121\uff4b\122\uff4b\123\uff4b" +
    "\001\002\000\052\003\u0140\004\005\005\013\007\u0132\045" +
    "\u013b\071\u0246\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138" +
    "\105\u0148\106\u012d\107\u014c\111\120\112\u0136\113\074\121" +
    "\100\122\114\123\u0141\001\002\000\056\003\uff49\004\uff49" +
    "\005\uff49\007\uff49\045\uff49\071\uff49\072\uff49\077\uff49\100" +
    "\uff49\101\uff49\102\uff49\103\uff49\104\uff49\105\uff49\106\uff49" +
    "\107\uff49\111\uff49\112\uff49\113\uff49\121\uff49\122\uff49\123" +
    "\uff49\001\002\000\056\003\ufeb0\004\ufeb0\005\ufeb0\007\ufeb0" +
    "\045\ufeb0\071\ufeb0\072\ufeb0\077\ufeb0\100\ufeb0\101\ufeb0\102" +
    "\ufeb0\103\ufeb0\104\ufeb0\105\ufeb0\106\ufeb0\107\ufeb0\111\ufeb0" +
    "\112\ufeb0\113\ufeb0\121\ufeb0\122\ufeb0\123\ufeb0\001\002\000" +
    "\052\003\u0249\007\131\027\076\035\106\047\077\050\115" +
    "\051\122\052\113\053\104\054\111\055\101\056\075\057" +
    "\110\060\103\061\112\075\121\111\120\113\074\121\100" +
    "\122\114\001\002\000\052\003\142\007\131\011\u0250\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\066\072\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\004\011\u024b" +
    "\001\002\000\052\003\u024c\007\131\027\076\035\106\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\075\121\111\120\113" +
    "\074\121\100\122\114\001\002\000\052\003\142\007\131" +
    "\047\077\050\115\051\122\052\113\053\104\054\111\055" +
    "\101\056\075\057\110\060\103\061\112\066\072\075\121" +
    "\076\u024f\111\120\113\074\121\100\122\114\001\002\000" +
    "\004\076\u024e\001\002\000\004\012\uff17\001\002\000\004" +
    "\012\uff15\001\002\000\052\003\142\007\131\027\076\035" +
    "\106\047\077\050\115\051\122\052\113\053\104\054\111" +
    "\055\101\056\075\057\110\060\103\061\112\075\121\111" +
    "\120\113\074\121\100\122\114\001\002\000\004\076\u0252" +
    "\001\002\000\004\012\uff16\001\002\000\052\003\u0255\007" +
    "\131\027\076\035\106\047\077\050\115\051\122\052\113" +
    "\053\104\054\111\055\101\056\075\057\110\060\103\061" +
    "\112\075\121\111\120\113\074\121\100\122\114\001\002" +
    "\000\004\076\u025a\001\002\000\052\003\142\007\131\047" +
    "\077\050\115\051\122\052\113\053\104\054\111\055\101" +
    "\056\075\057\110\060\103\061\112\066\072\075\121\076" +
    "\u0256\111\120\113\074\121\100\122\114\001\002\000\004" +
    "\070\u0257\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007" +
    "\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae" +
    "\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113" +
    "\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\052\003\u0140" +
    "\004\005\005\013\007\u0132\045\u013b\071\u0259\072\u0135\077" +
    "\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d\107\u014c" +
    "\111\120\112\u0136\113\074\121\100\122\114\123\u0141\001" +
    "\002\000\062\003\uff7b\004\uff7b\005\uff7b\007\uff7b\045\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\077\uff7b\100\uff7b\101" +
    "\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b" +
    "\111\uff7b\112\uff7b\113\uff7b\121\uff7b\122\uff7b\123\uff7b\001" +
    "\002\000\006\003\u025b\070\u025c\001\002\000\052\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae" +
    "\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001" +
    "\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae" +
    "\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105" +
    "\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae" +
    "\122\ufeae\123\ufeae\001\002\000\052\003\u0140\004\005\005" +
    "\013\007\u0132\045\u013b\071\u025e\072\u0135\077\u0147\101\u0137" +
    "\103\u013f\104\u0138\105\u0148\106\u012d\107\u014c\111\120\112" +
    "\u0136\113\074\121\100\122\114\123\u0141\001\002\000\062" +
    "\003\uff7c\004\uff7c\005\uff7c\007\uff7c\045\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\111\uff7c\112" +
    "\uff7c\113\uff7c\121\uff7c\122\uff7c\123\uff7c\001\002\000\052" +
    "\003\u0140\004\005\005\013\007\u0132\045\u013b\071\u0260\072" +
    "\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148\106\u012d" +
    "\107\u014c\111\120\112\u0136\113\074\121\100\122\114\123" +
    "\u0141\001\002\000\062\003\uff7a\004\uff7a\005\uff7a\007\uff7a" +
    "\045\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a" +
    "\107\uff7a\111\uff7a\112\uff7a\113\uff7a\121\uff7a\122\uff7a\123" +
    "\uff7a\001\002\000\056\003\ufeb1\004\ufeb1\005\ufeb1\007\ufeb1" +
    "\045\ufeb1\071\ufeb1\072\ufeb1\077\ufeb1\100\ufeb1\101\ufeb1\102" +
    "\ufeb1\103\ufeb1\104\ufeb1\105\ufeb1\106\ufeb1\107\ufeb1\111\ufeb1" +
    "\112\ufeb1\113\ufeb1\121\ufeb1\122\ufeb1\123\ufeb1\001\002\000" +
    "\056\003\ufeb4\004\ufeb4\005\ufeb4\007\ufeb4\045\ufeb4\071\ufeb4" +
    "\072\ufeb4\077\ufeb4\100\ufeb4\101\ufeb4\102\ufeb4\103\ufeb4\104" +
    "\ufeb4\105\ufeb4\106\ufeb4\107\ufeb4\111\ufeb4\112\ufeb4\113\ufeb4" +
    "\121\ufeb4\122\ufeb4\123\ufeb4\001\002\000\056\003\ufeb2\004" +
    "\ufeb2\005\ufeb2\007\ufeb2\045\ufeb2\071\ufeb2\072\ufeb2\077\ufeb2" +
    "\100\ufeb2\101\ufeb2\102\ufeb2\103\ufeb2\104\ufeb2\105\ufeb2\106" +
    "\ufeb2\107\ufeb2\111\ufeb2\112\ufeb2\113\ufeb2\121\ufeb2\122\ufeb2" +
    "\123\ufeb2\001\002\000\056\003\ufeaf\004\ufeaf\005\ufeaf\007" +
    "\ufeaf\045\ufeaf\071\ufeaf\072\ufeaf\077\ufeaf\100\ufeaf\101\ufeaf" +
    "\102\ufeaf\103\ufeaf\104\ufeaf\105\ufeaf\106\ufeaf\107\ufeaf\111" +
    "\ufeaf\112\ufeaf\113\ufeaf\121\ufeaf\122\ufeaf\123\ufeaf\001\002" +
    "\000\034\004\uff41\005\uff41\007\uff41\014\uff41\015\uff41\016" +
    "\uff41\017\uff41\020\uff41\044\uff41\045\uff41\071\uff41\110\uff41" +
    "\124\uff41\001\002\000\006\003\u0267\070\u0268\001\002\000" +
    "\004\071\u026b\001\002\000\052\003\ufeae\004\ufeae\005\ufeae" +
    "\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103" +
    "\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae" +
    "\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\004\071" +
    "\u026a\001\002\000\034\004\uff45\005\uff45\007\uff45\014\uff45" +
    "\015\uff45\016\uff45\017\uff45\020\uff45\044\uff45\045\uff45\071" +
    "\uff45\110\uff45\124\uff45\001\002\000\034\004\uff40\005\uff40" +
    "\007\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\044" +
    "\uff40\045\uff40\071\uff40\110\uff40\124\uff40\001\002\000\016" +
    "\003\u026d\014\u011f\015\u0121\016\u011c\017\u011a\020\u011d\001" +
    "\002\000\004\007\u0271\001\002\000\006\003\u026f\007\u0270" +
    "\001\002\000\006\011\uff2e\076\uff2e\001\002\000\006\011" +
    "\uff32\076\uff32\001\002\000\006\011\uff2f\076\uff2f\001\002" +
    "\000\052\003\142\007\131\012\u0275\047\077\050\115\051" +
    "\122\052\113\053\104\054\111\055\101\056\075\057\110" +
    "\060\103\061\112\066\072\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\004\012\u0274\001\002\000\076" +
    "\003\uffc9\004\uffc9\005\uffc9\007\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\044\uffc9\045\uffc9\071\uffc9\072\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9" +
    "\121\uffc9\122\uffc9\123\uffc9\124\uffc9\001\002\000\076\003" +
    "\uffc4\004\uffc4\005\uffc4\007\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\044\uffc4\045\uffc4\071\uffc4\072\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\121" +
    "\uffc4\122\uffc4\123\uffc4\124\uffc4\001\002\000\076\003\uffc6" +
    "\004\uffc6\005\uffc6\007\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\044\uffc6\045\uffc6\071\uffc6\072\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\121\uffc6" +
    "\122\uffc6\123\uffc6\124\uffc6\001\002\000\004\012\u0278\001" +
    "\002\000\076\003\uffc8\004\uffc8\005\uffc8\007\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\044\uffc8\045\uffc8\071" +
    "\uffc8\072\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112" +
    "\uffc8\113\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\001\002" +
    "\000\052\003\142\007\131\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\004\012\u027c\001\002\000\076" +
    "\003\uffc3\004\uffc3\005\uffc3\007\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\044\uffc3\045\uffc3\071\uffc3\072\uffc3" +
    "\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3" +
    "\121\uffc3\122\uffc3\123\uffc3\124\uffc3\001\002\000\076\003" +
    "\uffc5\004\uffc5\005\uffc5\007\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\044\uffc5\045\uffc5\071\uffc5\072\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\121" +
    "\uffc5\122\uffc5\123\uffc5\124\uffc5\001\002\000\004\012\u027e" +
    "\001\002\000\076\003\uff94\004\uff94\005\uff94\007\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\044\uff94\045\uff94" +
    "\071\uff94\072\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94" +
    "\112\uff94\113\uff94\121\uff94\122\uff94\123\uff94\124\uff94\001" +
    "\002\000\006\070\u0286\071\u0285\001\002\000\004\076\u0281" +
    "\001\002\000\004\070\u0282\001\002\000\052\003\ufeae\004" +
    "\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae" +
    "\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111" +
    "\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002" +
    "\000\052\003\u0140\004\005\005\013\007\u0132\045\u013b\071" +
    "\u0284\072\u0135\077\u0147\101\u0137\103\u013f\104\u0138\105\u0148" +
    "\106\u012d\107\u014c\111\120\112\u0136\113\074\121\100\122" +
    "\114\123\u0141\001\002\000\034\004\ufefe\005\ufefe\007\ufefe" +
    "\014\ufefe\015\ufefe\016\ufefe\017\ufefe\020\ufefe\044\ufefe\045" +
    "\ufefe\071\ufefe\110\ufefe\124\ufefe\001\002\000\034\004\ufefd" +
    "\005\ufefd\007\ufefd\014\ufefd\015\ufefd\016\ufefd\017\ufefd\020" +
    "\ufefd\044\ufefd\045\ufefd\071\ufefd\110\ufefd\124\ufefd\001\002" +
    "\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071" +
    "\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae" +
    "\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122" +
    "\ufeae\123\ufeae\001\002\000\052\003\u0140\004\005\005\013" +
    "\007\u0132\045\u013b\071\u0288\072\u0135\077\u0147\101\u0137\103" +
    "\u013f\104\u0138\105\u0148\106\u012d\107\u014c\111\120\112\u0136" +
    "\113\074\121\100\122\114\123\u0141\001\002\000\034\004" +
    "\ufefc\005\ufefc\007\ufefc\014\ufefc\015\ufefc\016\ufefc\017\ufefc" +
    "\020\ufefc\044\ufefc\045\ufefc\071\ufefc\110\ufefc\124\ufefc\001" +
    "\002\000\004\075\u029f\001\002\000\006\003\u028b\007\u028c" +
    "\001\002\000\004\075\u0298\001\002\000\004\075\u028d\001" +
    "\002\000\020\003\u028f\014\u011f\015\u0121\016\u011c\017\u011a" +
    "\020\u011d\076\uff33\001\002\000\004\076\u0294\001\002\000" +
    "\010\007\u0126\011\u0127\076\u0290\001\002\000\004\070\u0291" +
    "\001\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045" +
    "\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae" +
    "\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121" +
    "\ufeae\122\ufeae\123\ufeae\001\002\000\004\071\u0293\001\002" +
    "\000\034\004\uff3b\005\uff3b\007\uff3b\014\uff3b\015\uff3b\016" +
    "\uff3b\017\uff3b\020\uff3b\044\uff3b\045\uff3b\071\uff3b\110\uff3b" +
    "\124\uff3b\001\002\000\004\070\u0295\001\002\000\052\003" +
    "\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae" +
    "\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107" +
    "\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae" +
    "\001\002\000\004\071\u0297\001\002\000\034\004\uff42\005" +
    "\uff42\007\uff42\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42" +
    "\044\uff42\045\uff42\071\uff42\110\uff42\124\uff42\001\002\000" +
    "\020\003\u029a\014\u011f\015\u0121\016\u011c\017\u011a\020\u011d" +
    "\076\uff33\001\002\000\004\076\u029b\001\002\000\006\007" +
    "\u0126\011\u0127\001\002\000\004\070\u029c\001\002\000\052" +
    "\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072" +
    "\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae" +
    "\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123" +
    "\ufeae\001\002\000\004\071\u029e\001\002\000\034\004\uff3c" +
    "\005\uff3c\007\uff3c\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\044\uff3c\045\uff3c\071\uff3c\110\uff3c\124\uff3c\001\002" +
    "\000\020\003\u02a1\014\u011f\015\u0121\016\u011c\017\u011a\020" +
    "\u011d\076\uff33\001\002\000\004\076\u02a6\001\002\000\010" +
    "\007\u0126\011\u0127\076\u02a2\001\002\000\004\070\u02a3\001" +
    "\002\000\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae" +
    "\071\ufeae\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105" +
    "\ufeae\106\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae" +
    "\122\ufeae\123\ufeae\001\002\000\004\071\u02a5\001\002\000" +
    "\034\004\uff3d\005\uff3d\007\uff3d\014\uff3d\015\uff3d\016\uff3d" +
    "\017\uff3d\020\uff3d\044\uff3d\045\uff3d\071\uff3d\110\uff3d\124" +
    "\uff3d\001\002\000\004\070\u02a7\001\002\000\052\003\ufeae" +
    "\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077" +
    "\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae" +
    "\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001" +
    "\002\000\004\071\u02a9\001\002\000\034\004\uff43\005\uff43" +
    "\007\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43\044" +
    "\uff43\045\uff43\071\uff43\110\uff43\124\uff43\001\002\000\004" +
    "\075\u02b7\001\002\000\004\075\u02ac\001\002\000\020\003" +
    "\u02ae\014\u011f\015\u0121\016\u011c\017\u011a\020\u011d\076\uff33" +
    "\001\002\000\004\076\u02b3\001\002\000\010\007\u0126\011" +
    "\u0127\076\u02af\001\002\000\004\070\u02b0\001\002\000\052" +
    "\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae\072" +
    "\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106\ufeae" +
    "\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae\123" +
    "\ufeae\001\002\000\004\071\u02b2\001\002\000\034\004\uff3e" +
    "\005\uff3e\007\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020" +
    "\uff3e\044\uff3e\045\uff3e\071\uff3e\110\uff3e\124\uff3e\001\002" +
    "\000\004\070\u02b4\001\002\000\052\003\ufeae\004\ufeae\005" +
    "\ufeae\007\ufeae\045\ufeae\071\ufeae\072\ufeae\077\ufeae\101\ufeae" +
    "\103\ufeae\104\ufeae\105\ufeae\106\ufeae\107\ufeae\111\ufeae\112" +
    "\ufeae\113\ufeae\121\ufeae\122\ufeae\123\ufeae\001\002\000\004" +
    "\071\u02b6\001\002\000\034\004\uff44\005\uff44\007\uff44\014" +
    "\uff44\015\uff44\016\uff44\017\uff44\020\uff44\044\uff44\045\uff44" +
    "\071\uff44\110\uff44\124\uff44\001\002\000\020\003\u029a\014" +
    "\u011f\015\u0121\016\u011c\017\u011a\020\u011d\076\uff33\001\002" +
    "\000\004\076\u02b9\001\002\000\004\070\u02ba\001\002\000" +
    "\052\003\ufeae\004\ufeae\005\ufeae\007\ufeae\045\ufeae\071\ufeae" +
    "\072\ufeae\077\ufeae\101\ufeae\103\ufeae\104\ufeae\105\ufeae\106" +
    "\ufeae\107\ufeae\111\ufeae\112\ufeae\113\ufeae\121\ufeae\122\ufeae" +
    "\123\ufeae\001\002\000\004\071\u02bc\001\002\000\034\004" +
    "\uff3f\005\uff3f\007\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f" +
    "\020\uff3f\044\uff3f\045\uff3f\071\uff3f\110\uff3f\124\uff3f\001" +
    "\002\000\016\003\u02be\014\u011f\015\u0121\016\u011c\017\u011a" +
    "\020\u011d\001\002\000\004\007\u02c5\001\002\000\010\003" +
    "\u02c0\007\u02c1\065\u02c2\001\002\000\014\003\uffd6\007\u02c4" +
    "\011\uffd6\012\uffd6\046\uffd6\001\002\000\012\003\uffd8\011" +
    "\uffd8\012\uffd8\046\uffd8\001\002\000\004\007\u02c3\001\002" +
    "\000\010\003\uffb4\011\uffb4\066\uffb4\001\002\000\010\003" +
    "\uffb1\011\uffb1\066\uffb1\001\002\000\012\003\uffd7\011\uffd7" +
    "\012\uffd7\046\uffd7\001\002\000\014\003\u01ac\007\u02d0\012" +
    "\uffa8\046\u019d\066\u01ae\001\002\000\006\003\u02cd\007\u02ce" +
    "\001\002\000\012\003\u02ca\012\uffa8\046\u019d\066\u019e\001" +
    "\002\000\004\012\u02cc\001\002\000\006\012\u02cb\070\310" +
    "\001\002\000\034\004\uffb6\005\uffb6\007\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\044\uffb6\045\uffb6\071\uffb6" +
    "\110\uffb6\124\uffb6\001\002\000\034\004\uffb8\005\uffb8\007" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\044\uffb8" +
    "\045\uffb8\071\uffb8\110\uffb8\124\uffb8\001\002\000\010\003" +
    "\uffb2\011\uffb2\066\uffb2\001\002\000\010\003\uffb5\011\uffb5" +
    "\066\uffb5\001\002\000\004\012\u02d1\001\002\000\010\003" +
    "\uffb3\011\uffb3\066\uffb3\001\002\000\034\004\uffb7\005\uffb7" +
    "\007\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\044" +
    "\uffb7\045\uffb7\071\uffb7\110\uffb7\124\uffb7\001\002\000\054" +
    "\003\142\007\131\012\u02d8\027\076\035\106\047\077\050" +
    "\115\051\122\052\113\053\104\054\111\055\101\056\075" +
    "\057\110\060\103\061\112\075\121\111\120\113\074\121" +
    "\100\122\114\001\002\000\004\012\u02d7\001\002\000\006" +
    "\003\u02d5\007\u02d6\001\002\000\012\003\uffd5\011\uffd5\012" +
    "\uffd5\046\uffd5\001\002\000\012\003\uffd9\011\uffd9\012\uffd9" +
    "\046\uffd9\001\002\000\034\004\uffdb\005\uffdb\007\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\044\uffdb\045\uffdb" +
    "\071\uffdb\110\uffdb\124\uffdb\001\002\000\034\004\uffda\005" +
    "\uffda\007\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\044\uffda\045\uffda\071\uffda\110\uffda\124\uffda\001\002\000" +
    "\036\003\u02da\004\uffe3\005\uffe3\007\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\044\uffe3\045\uffe3\071\uffe3\110" +
    "\uffe3\124\uffe3\001\002\000\004\071\u02dd\001\002\000\034" +
    "\004\005\005\013\007\062\014\054\015\040\016\043\017" +
    "\036\020\046\044\055\045\uffd3\071\u02dc\110\041\124\060" +
    "\001\002\000\014\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\001\002\000\014\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\001\002\000\004\070\u02e0\001\002\000\006\003" +
    "\021\007\023\001\002\000\034\004\uffe3\005\uffe3\007\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\044\uffe3\045" +
    "\uffe3\071\uffe3\110\uffe3\124\uffe3\001\002\000\034\004\005" +
    "\005\013\007\062\014\054\015\040\016\043\017\036\020" +
    "\046\044\055\045\uffd3\071\u02e2\110\041\124\060\001\002" +
    "\000\014\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\001\001\002" +
    "\000\010\003\u02df\010\020\070\ufff1\001\002\000\004\002" +
    "\ufff8\001\002\000\004\070\u02e8\001\002\000\034\004\uffe3" +
    "\005\uffe3\007\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\044\uffe3\045\uffe3\071\uffe3\110\uffe3\124\uffe3\001\002" +
    "\000\034\004\005\005\013\007\062\014\054\015\040\016" +
    "\043\017\036\020\046\044\055\045\uffd3\071\u02ea\110\041" +
    "\124\060\001\002\000\014\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e9\000\012\002\007\004\010\005\006\006\003\001" +
    "\001\000\010\004\010\005\u02ea\006\003\001\001\000\002" +
    "\001\001\000\010\004\010\005\u02e5\006\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\010\005\u02e2" +
    "\006\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u02dd\001\001\000\004\007\015\001\001\000\002" +
    "\001\001\000\004\010\032\001\001\000\004\010\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\034\001\001\000" +
    "\030\004\050\013\036\016\043\017\051\022\055\023\047" +
    "\024\046\034\041\055\056\056\052\075\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u02d2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u02c7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u0289\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\067\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u0279\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u0276\001\001" +
    "\000\002\001\001\000\030\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\u0272\001\001\000\010\020\u0121\057\u011d\060\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\123" +
    "\103\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\116" +
    "\104\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\210\001\001\000" +
    "\002\001\001\000\024\035\140\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\133\001\001\000" +
    "\002\001\001\000\032\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\100\160\101\115\102\123\103\116\104" +
    "\127\105\163\001\001\000\002\001\001\000\030\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\136\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\140\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\157" +
    "\001\001\000\022\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\156\001\001\000\022\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\155\001\001\000\022\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\154\001\001\000\022\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\153\001\001\000\022\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\140\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\142\001\001" +
    "\000\002\001\001\000\030\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\123\103\116\104\127\105" +
    "\172\001\001\000\024\035\140\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\142\001\001\000" +
    "\002\001\001\000\026\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\123\103\116\104\204\001" +
    "\001\000\026\061\072\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\123\103\116\104\203\001\001\000" +
    "\026\061\072\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\202\001\001\000\026\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\123\103\116\104\201\001\001\000\026\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\123" +
    "\103\116\104\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\035\140\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\061\072\063\233\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\127\105\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\061" +
    "\072\064\236\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\127\105\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\061\072\065\241" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\061\072\063" +
    "\245\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\123\103\116\104\127\105\234\001\001\000\002\001" +
    "\001\000\024\035\140\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\142\001\001\000\032\061" +
    "\072\064\250\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\127\105\237\001\001\000" +
    "\002\001\001\000\032\061\072\065\252\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\127\105\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\061\072\064\255\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\127\105\237" +
    "\001\001\000\002\001\001\000\024\035\140\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\142" +
    "\001\001\000\032\061\072\065\260\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\061\072\065\263\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\123\103\116\104\127\105\242\001" +
    "\001\000\002\001\001\000\024\035\140\061\072\067\106" +
    "\072\101\073\126\076\104\077\124\101\115\102\142\001" +
    "\001\000\002\001\001\000\024\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\301\001" +
    "\001\000\024\061\072\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\123\103\300\001\001\000\024\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\123\103\277\001\001\000\024\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\276" +
    "\001\001\000\024\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\275\001\001\000\024" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\123\103\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\030\315\033\310\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\127\105\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\030\346\033\344\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\314\001\001\000\024\035\140\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\030\324\033\322" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\123\103\116\104\127\105\314\001\001\000\002" +
    "\001\001\000\024\035\140\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\116" +
    "\104\127\105\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\127\105\334\001\001\000\024\035\140\061\072\067\106" +
    "\072\101\073\126\076\104\077\124\101\115\102\142\001" +
    "\001\000\002\001\001\000\034\030\340\033\336\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\314\001\001\000\002\001\001" +
    "\000\024\035\140\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\140\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\004\032\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\140\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\142\001\001" +
    "\000\006\032\376\070\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u0108\001\001\000\004\071\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u0117\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u0114\001\001" +
    "\000\024\035\140\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\107\u012b\111\u012a\001\001\000" +
    "\002\001\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f" +
    "\026\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043" +
    "\u012d\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e" +
    "\072\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u0236\042\u0237\001\001\000\004\020\u022c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0223\001\001\000\002\001\001\000\014\020\u01be\021\u01b9" +
    "\025\u01b7\041\u01bd\042\u01ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0193\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\u0153\106\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\035\140\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\u0156\001\001\000\056\004" +
    "\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141" +
    "\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054" +
    "\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d" +
    "\077\u012e\112\u0133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\u0153\106\u015b\001\001\000\002\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\u0153\106\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\123" +
    "\103\116\104\127\105\u0164\001\001\000\024\035\140\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u0169\045\u016a\001\001\000\002\001\001\000\004" +
    "\046\u0180\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\107\u0176\110\u0177" +
    "\001\001\000\006\107\u0176\110\u0175\001\001\000\002\001" +
    "\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148" +
    "\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047" +
    "\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149" +
    "\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002\001" +
    "\001\000\006\107\u0176\110\u0179\001\001\000\002\001\001" +
    "\000\004\107\u017d\001\001\000\004\107\u017c\001\001\000" +
    "\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145" +
    "\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053" +
    "\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132" +
    "\074\u014d\077\u012e\112\u0133\001\001\000\056\004\u0130\014" +
    "\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138" +
    "\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061" +
    "\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e" +
    "\112\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u0176\110\u0184\001\001\000\006" +
    "\107\u0176\110\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\u0176\110\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u0189\001\001\000\002\001" +
    "\001\000\006\107\u0176\110\u018b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u018f\045\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u01aa\001\001\000\002\001\001\000\004\031\u019a\001" +
    "\001\000\030\061\072\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\123\103\116\104\127\105\u0197\001" +
    "\001\000\024\035\140\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u01a5\001\001\000\004\032" +
    "\u01a4\001\001\000\030\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\123\103\116\104\127\105" +
    "\u01a0\001\001\000\024\035\140\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u01a5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\123" +
    "\103\116\104\127\105\u01b3\001\001\000\024\035\140\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u01cc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\061\072\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\127\105\u01c9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\123\103\116\104\127\105\u01c1\001\001\000\024" +
    "\035\140\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\u01c7\001\001\000\004\107\u01c5\001" +
    "\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148" +
    "\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047" +
    "\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149" +
    "\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002\001" +
    "\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148" +
    "\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047" +
    "\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149" +
    "\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\123" +
    "\103\116\104\u0153\106\u01cf\001\001\000\002\001\001\000" +
    "\024\035\140\061\072\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\142\001\001\000\002\001\001\000" +
    "\004\107\u01d3\001\001\000\056\004\u0130\014\u013b\015\u013d" +
    "\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040" +
    "\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143" +
    "\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\u01da" +
    "\001\001\000\004\107\u01d8\001\001\000\056\004\u0130\014" +
    "\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138" +
    "\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061" +
    "\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e" +
    "\112\u0133\001\001\000\002\001\001\000\056\004\u0130\014" +
    "\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138" +
    "\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061" +
    "\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e" +
    "\112\u0133\001\001\000\002\001\001\000\004\050\u01dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u01e7" +
    "\001\001\000\002\001\001\000\030\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\116" +
    "\104\127\105\u01e5\001\001\000\030\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\116" +
    "\104\127\105\u01e4\001\001\000\024\035\140\061\072\067" +
    "\106\072\101\073\126\076\104\077\124\101\115\102\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u01ee\001\001" +
    "\000\030\061\072\067\106\072\101\073\126\076\104\077" +
    "\124\101\115\102\123\103\116\104\127\105\u01ed\001\001" +
    "\000\024\035\140\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\u01f0\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\061\072\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\127\105\u01f3\001\001\000" +
    "\002\001\001\000\030\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\123\103\116\104\127\105" +
    "\u020e\001\001\000\032\051\u01f7\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\u0153\106\u01f6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u01fb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\u01fe" +
    "\001\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026" +
    "\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d" +
    "\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072" +
    "\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002" +
    "\001\001\000\030\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\127\105\u020b" +
    "\001\001\000\030\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\127\105\u0208" +
    "\001\001\000\002\001\001\000\030\061\072\067\106\072" +
    "\101\073\126\076\104\077\124\101\115\102\123\103\116" +
    "\104\127\105\u0206\001\001\000\002\001\001\000\024\035" +
    "\140\061\072\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\u020d\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\051\u0211\061\072\067\106\072\101\073\126\076\104" +
    "\077\124\101\115\102\123\103\116\104\u0153\106\u01f6\001" +
    "\001\000\024\035\140\061\072\067\106\072\101\073\126" +
    "\076\104\077\124\101\115\102\142\001\001\000\002\001" +
    "\001\000\004\052\u0214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\u0217\001\001\000" +
    "\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145" +
    "\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053" +
    "\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132" +
    "\074\u014d\077\u012e\112\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u021b\001\001\000\056\004\u0130" +
    "\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141\036" +
    "\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054\u0144" +
    "\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d\077" +
    "\u012e\112\u0133\001\001\000\002\001\001\000\004\052\u021e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\u0221\001\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f" +
    "\026\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043" +
    "\u012d\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e" +
    "\072\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\061\072\067\106" +
    "\072\101\073\126\076\104\077\124\101\115\102\123\103" +
    "\116\104\127\105\u01c9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\123\103\116\104" +
    "\u0153\106\u0239\001\001\000\002\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\004\107\u023d" +
    "\001\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026" +
    "\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d" +
    "\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072" +
    "\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\u0244\001\001\000" +
    "\004\107\u0242\001\001\000\056\004\u0130\014\u013b\015\u013d" +
    "\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040" +
    "\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143" +
    "\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001" +
    "\001\000\002\001\001\000\056\004\u0130\014\u013b\015\u013d" +
    "\022\u012f\026\u0148\027\u0145\034\u0141\036\u0138\037\u0139\040" +
    "\u014c\043\u012d\047\u0142\053\u014a\054\u0144\061\u013c\066\u0143" +
    "\067\u014e\072\u0149\073\u0132\074\u014d\077\u012e\112\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\u0249\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\030\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\u024c\001\001\000\024\035\140" +
    "\061\072\067\106\072\101\073\126\076\104\077\124\101" +
    "\115\102\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\061\072\067\106\072\101\073" +
    "\126\076\104\077\124\101\115\102\123\103\116\104\127" +
    "\105\u0250\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\061\072\067\106\072\101\073\126\076\104\077\124" +
    "\101\115\102\123\103\116\104\u0153\106\u0253\001\001\000" +
    "\002\001\001\000\024\035\140\061\072\067\106\072\101" +
    "\073\126\076\104\077\124\101\115\102\142\001\001\000" +
    "\002\001\001\000\004\107\u0257\001\001\000\056\004\u0130" +
    "\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034\u0141\036" +
    "\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a\054\u0144" +
    "\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074\u014d\077" +
    "\u012e\112\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u025e\001\001\000\004\107\u025c\001\001\000" +
    "\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145" +
    "\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053" +
    "\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132" +
    "\074\u014d\077\u012e\112\u0133\001\001\000\002\001\001\000" +
    "\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145" +
    "\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053" +
    "\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132" +
    "\074\u014d\077\u012e\112\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\u012b\111\u0268\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u026d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\035\140\061" +
    "\072\067\106\072\101\073\126\076\104\077\124\101\115" +
    "\102\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\061\072\067\106\072\101\073\126\076" +
    "\104\077\124\101\115\102\123\103\116\104\127\105\u027c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u0282\001" +
    "\001\000\056\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148" +
    "\027\u0145\034\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047" +
    "\u0142\053\u014a\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149" +
    "\073\u0132\074\u014d\077\u012e\112\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u0286\001\001\000\056" +
    "\004\u0130\014\u013b\015\u013d\022\u012f\026\u0148\027\u0145\034" +
    "\u0141\036\u0138\037\u0139\040\u014c\043\u012d\047\u0142\053\u014a" +
    "\054\u0144\061\u013c\066\u0143\067\u014e\072\u0149\073\u0132\074" +
    "\u014d\077\u012e\112\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\u0121\057\u028d\060\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u012b\111\u0291\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\107\u012b\111\u0295\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\u0121\057\u0298" +
    "\060\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u012b\111\u029c\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\u0121\057\u029f\060" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\u012b\111\u02a3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\u012b" +
    "\111\u02a7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\u0121\057\u02ac" +
    "\060\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u012b\111\u02b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u012b\111\u02b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\u0121\057\u02b7\060\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\107\u012b\111\u02ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u02be\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u02ce\001\001" +
    "\000\002\001\001\000\004\031\u02c8\001\001\000\002\001" +
    "\001\000\004\032\u01a5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\061\072" +
    "\067\106\072\101\073\126\076\104\077\124\101\115\102" +
    "\123\103\116\104\127\105\u01c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u02da\001\001" +
    "\000\002\001\001\000\030\004\050\013\036\016\043\017" +
    "\051\022\055\023\047\024\046\034\041\055\056\056\052" +
    "\075\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\032\001\001\000\004\011\u02e0" +
    "\001\001\000\030\004\050\013\036\016\043\017\051\022" +
    "\055\023\047\024\046\034\041\055\056\056\052\075\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u02e6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u02e8\001\001\000\030\004\050\013" +
    "\036\016\043\017\051\022\055\023\047\024\046\034\041" +
    "\055\056\056\052\075\060\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxAnalyzerMain$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxAnalyzerMain$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxAnalyzerMain$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
	List<ErrorGramm> syntaxErrors = new ArrayList<>();
	List<Node> listTrack = new ArrayList<>();

	public void syntax_error(Symbol s) {
		int row = s.right+1;
		int column = s.left+1;
		String token = (String) s.value;
		addError(row, column, ErrorType.SYNTACTIC, token, "Secuencia de Token no reconocida.");
		System.out.println("ERROR: Fila: "+(s.right+1)+", Columna: "+(s.left+1)+", Token: "+s.value);

	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		if(cur_token.toString().equals("#0")){
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  "Fin del archivo";
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
            
        }else{
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  (String) cur_token.value;
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando.");
			
        }
		System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
	}

	public void addError(int row, int column, ErrorType errorType, String token, String description){
        syntaxErrors.add(new ErrorGramm(new PositionToken(row, column), errorType, token, description));
    }

	public List<ErrorGramm> getSyntaxErrors(){
        return syntaxErrors;
    }

	public List<Node> getListTracks(){
		return listTrack;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntaxAnalyzerMain$actions {


    

  private final SyntaxAnalyzerMain parser;

  /** Constructor */
  CUP$SyntaxAnalyzerMain$actions(SyntaxAnalyzerMain parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerMain$do_action_part00000000(
    int                        CUP$SyntaxAnalyzerMain$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerMain$parser,
    java.util.Stack            CUP$SyntaxAnalyzerMain$stack,
    int                        CUP$SyntaxAnalyzerMain$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxAnalyzerMain$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxAnalyzerMain$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxAnalyzerMain$parser.done_parsing();
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CODIGO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> listTrack = (List<Node>) b; parser.listTrack = listTrack; RESULT = listTrack;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLANCOS ::= COMENTARIOS BLANCOS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("BLANCOS",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLANCOS ::= 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("BLANCOS",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMENTARIOS ::= comentario_linea 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMENTARIOS ::= comentario_bloque 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= STRUCT_PISTA CODIGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> listTrack = (List<Node>) b; listTrack.add((Node) a); RESULT = listTrack;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CODIGO",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= COMENTARIOS CODIGO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> listTrack = (List<Node>) b; RESULT = listTrack;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CODIGO",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= 
            {
              Object RESULT =null;
		List<Node> listTrack = new ArrayList<>(); RESULT = listTrack;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CODIGO",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGO ::= error CODIGO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura pista");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CODIGO",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STRUCT_PISTA ::= pista identificador EXTIENDE_STATE llave_a STRUCT_CODE llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		TrackNode track = new TrackNode((String) a, (List<String>) b, (List<Node>) c, new PositionToken(aright+1, aleft+1), null); 
RESULT = track; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STRUCT_PISTA ::= error identificador EXTIENDE_STATE llave_a STRUCT_CODE llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura pista, se esperava el token 'pista'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STRUCT_PISTA ::= pista error EXTIENDE_STATE llave_a STRUCT_CODE llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura pista, se esperava un IDENTIFICADOR");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCT_PISTA ::= pista identificador error llave_a STRUCT_CODE llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura pista, en los valores extendidos");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCT_PISTA ::= pista identificador EXTIENDE_STATE llave_a error llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura pista, en las sentencias de codigo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXTIENDE_STATE ::= extiende STRUCT_EXTIENDE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = (List<String>) a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("EXTIENDE_STATE",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXTIENDE_STATE ::= 
            {
              Object RESULT =null;
		List<String> list = new ArrayList<>(); RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("EXTIENDE_STATE",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXTIENDE_STATE ::= error STRUCT_EXTIENDE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura EXTIENDE, se esperaba una la palabra reservada 'extiende'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("EXTIENDE_STATE",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCT_EXTIENDE ::= STRUCT_EXTIENDE coma identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<String> list = (List<String>) a; list.add((String) b); RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_EXTIENDE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCT_EXTIENDE ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<String> list = new ArrayList<>(); list.add((String) a); RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_EXTIENDE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_EXTIENDE ::= STRUCT_EXTIENDE error identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura EXTIENDE, se esperaba una COMA ','");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_EXTIENDE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCT_EXTIENDE ::= STRUCT_EXTIENDE coma error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura EXTIENDE, se esperaba un IDENTIFICADOR");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_EXTIENDE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRUCT_EXTIENDE ::= error coma identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrutura EXTIENDE");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_EXTIENDE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRUCT_CODE ::= STRUCT_CODE COMENTARIOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> instructions = (List<Node>) a; RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRUCT_CODE ::= STRUCT_CODE STRUCT_DECLARACION_VARIABLE_GLOBAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRUCT_CODE ::= STRUCT_CODE STRUCT_ASIGNACION_VAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STRUCT_CODE ::= STRUCT_CODE STRUCT_DECLARACION_ARREGLO_GLOBAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STRUCT_CODE ::= STRUCT_CODE STRUCT_ASIGNACION_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STRUCT_CODE ::= STRUCT_CODE STRUCT_FUNCION_PROC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STRUCT_CODE ::= STRUCT_CODE STRUCT_METODO_PRINCIPAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> instructions = (List<Node>) a; instructions.add((Node) b); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STRUCT_CODE ::= 
            {
              Object RESULT =null;
		List<Node> instructions = new ArrayList<>(); RESULT = instructions;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN COMENTARIOS 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN STRUCT_DECLARACION_VARIABLE_GLOBAL 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN STRUCT_ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN STRUCT_DECLARACION_ARREGLO_GLOBAL 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN STRUCT_ASIGNACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRUCT_CODE_MAIN ::= STRUCT_CODE_MAIN STRUCT_FUNCION_PROC 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCT_CODE_MAIN ::= 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CODE_MAIN",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCT_DECLARACION_VARIABLE_GLOBAL ::= DECLARACION_VARIABLE_GLOBAL_STATE ASIGNACION_STATE punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		ListDeclaration list = (ListDeclaration) d;
										list.setAsignation((Node) a);
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_VARIABLE_GLOBAL",9, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCT_DECLARACION_VARIABLE_GLOBAL ::= DECLARACION_VARIABLE_GLOBAL_STATE error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion en la seccion de asignacion de valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_VARIABLE_GLOBAL",9, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLE_GLOBAL_STATE ::= DECLARACION_VARIABLE_GLOBAL_STATE coma identificador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = (ListDeclaration) d;
										list.addDeclaration(new DeclarationVar(list.isKeep(), list.getDataType(), (String) a, null, new PositionToken(aright+1, aleft+1), list.getDataType()));
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_GLOBAL_STATE",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE_GLOBAL_STATE ::= KEEP_STATE var TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = new ListDeclaration((Boolean) a, (DataType) b, new PositionToken(mright+1, mleft+1), (DataType) b);
										list.addDeclaration(new DeclarationVar((Boolean) a, (DataType) b, (String) c, null, new PositionToken(cright+1, cleft+1), (DataType) b));
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_GLOBAL_STATE",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE_GLOBAL_STATE ::= KEEP_STATE var error identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion, se esperaba un tipo de dato");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_GLOBAL_STATE",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE_GLOBAL_STATE ::= KEEP_STATE var TIPO_DATO_STATE error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_GLOBAL_STATE",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE_GLOBAL_STATE ::= DECLARACION_VARIABLE_GLOBAL_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_GLOBAL_STATE",12, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // KEEP_STATE ::= keep 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("KEEP_STATE",13, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // KEEP_STATE ::= 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("KEEP_STATE",13, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_DATO_STATE ::= entero 
            {
              Object RESULT =null;
		RESULT = DataType.ENTERO;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_DATO_STATE ::= doble 
            {
              Object RESULT =null;
		RESULT = DataType.DOBLE;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_DATO_STATE ::= boolean_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.BOOLEAN;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_DATO_STATE ::= cadena_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.CADENA;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_DATO_STATE ::= caracter_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.CARACTER;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE",14, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION_STATE ::= igual VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = (Node) a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STATE",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION_STATE ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STATE",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION_STATE ::= igual error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STATE",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION_STATE ::= error VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STATE",15, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRUCT_ASIGNACION_VAR ::= identificador igual VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new AsignationVar((String) a, (Node) b, new PositionToken(aright+1, aleft+1), null);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRUCT_ASIGNACION_VAR ::= identificador mas_igual VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeOp = new OperationArithmetic(ArithType.ADD, nodeId, (Node) b, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STRUCT_ASIGNACION_VAR ::= identificador mas_mas punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeAdd = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, 1);
							Node nodeOp = new OperationArithmetic(ArithType.ADD, nodeId, nodeAdd, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STRUCT_ASIGNACION_VAR ::= identificador menos_menos punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeSub = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, 1);
							Node nodeOp = new OperationArithmetic(ArithType.SUBTRAC, nodeId, nodeSub, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STRUCT_ASIGNACION_VAR ::= identificador error VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRUCT_ASIGNACION_VAR ::= identificador igual error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba un valor de asignacion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRUCT_ASIGNACION_VAR ::= identificador error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '(=, +=, ++, --)'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRUCT_DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_STATE ASIGNACION_STATE punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		ListDeclaration list = (ListDeclaration) d;
								list.setAsignation((Node) a);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRUCT_DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_STATE error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRUCT_DECLARACION_VARIABLE ::= error ASIGNACION_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_VARIABLE",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_VARIABLE_STATE ::= DECLARACION_VARIABLE_STATE coma identificador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = (ListDeclaration) d;
								list.addDeclaration(new DeclarationVar(list.isKeep(), list.getDataType(), (String) a, null, new PositionToken(aright+1, aleft+1), list.getDataType()));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_VARIABLE_STATE ::= var TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = new ListDeclaration(false, (DataType) b, new PositionToken(mright+1, mleft+1), (DataType) b);
								list.addDeclaration(new DeclarationVar(false, (DataType) b, (String) c, null, new PositionToken(cright+1, cleft+1), (DataType) b));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLE_STATE ::= error TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba u token 'var'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_VARIABLE_STATE ::= var error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba un tipo de dato");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_VARIABLE_STATE ::= var TIPO_DATO_STATE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_VARIABLE_STATE ::= error coma identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_VARIABLE_STATE ::= DECLARACION_VARIABLE_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_STATE",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STRUCT_DECLARACION_ARREGLO_GLOBAL ::= DECLARACION_ARREGLO_GLOBAL_STATE STRUCT_DIMENSION_ARREGLO ASIGNACION_ARREGLO_STATE punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		ListDeclaration list = (ListDeclaration) d;
										list.setAsignation((Node) a);
										list.setDimensions((List<Node>) b);
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO_GLOBAL",17, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STRUCT_DECLARACION_ARREGLO_GLOBAL ::= DECLARACION_ARREGLO_GLOBAL_STATE error ASIGNACION_ARREGLO_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaraion del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO_GLOBAL",17, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRUCT_DECLARACION_ARREGLO_GLOBAL ::= DECLARACION_ARREGLO_GLOBAL_STATE STRUCT_DIMENSION_ARREGLO error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaraion del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO_GLOBAL",17, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_ARREGLO_GLOBAL_STATE ::= DECLARACION_ARREGLO_GLOBAL_STATE coma identificador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = (ListDeclaration) d;
										list.addDeclaration(new DeclaracionArray(list.isKeep(), list.getDataType(), (String) a, null, null, new PositionToken(aright+1, aleft+1), list.getDataType()));
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_GLOBAL_STATE",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_ARREGLO_GLOBAL_STATE ::= KEEP_STATE var TIPO_DATO_STATE arreglo identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = new ListDeclaration((Boolean) a, true, (DataType) b, new PositionToken(mright+1, mleft+1), (DataType) b);
										list.addDeclaration(new DeclaracionArray((Boolean) a, (DataType) b, (String) c, null, null, new PositionToken(cright+1, cleft+1), (DataType) b));
										RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_GLOBAL_STATE",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_ARREGLO_GLOBAL_STATE ::= DECLARACION_ARREGLO_GLOBAL_STATE error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaraion del arreglo se esperaba una coma ','");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_GLOBAL_STATE",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_ARREGLO_GLOBAL_STATE ::= DECLARACION_ARREGLO_GLOBAL_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_GLOBAL_STATE",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_ARREGLO_GLOBAL_STATE ::= KEEP_STATE var TIPO_DATO_STATE error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo se esperaba su dimension");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_GLOBAL_STATE",18, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STRUCT_DIMENSION_ARREGLO ::= STRUCT_DIMENSION_ARREGLO corchete_a VALOR_STATE corchete_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = (List<Node>) d;
								list.add((Node) a);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STRUCT_DIMENSION_ARREGLO ::= STRUCT_DIMENSION_ARREGLO corchete_a corchete_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		List<Node> list = (List<Node>) d;
								list.add(null);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STRUCT_DIMENSION_ARREGLO ::= corchete_a VALOR_STATE corchete_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = new ArrayList<>();
								list.add((Node) a);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRUCT_DIMENSION_ARREGLO ::= corchete_a corchete_c 
            {
              Object RESULT =null;
		List<Node> list = new ArrayList<>();
								list.add(null);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STRUCT_DIMENSION_ARREGLO ::= corchete_a error corchete_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion de dimension del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STRUCT_DIMENSION_ARREGLO ::= error corchete_a corchete_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion de dimension del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STRUCT_DIMENSION_ARREGLO ::= STRUCT_DIMENSION_ARREGLO corchete_a error corchete_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion de dimension del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DIMENSION_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNACION_ARREGLO_STATE ::= igual VALOR_ARREGLO_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO_STATE",23, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION_ARREGLO_STATE ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO_STATE",23, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION_ARREGLO_STATE ::= error VALOR_ARREGLO_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba un singno igual '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO_STATE",23, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNACION_ARREGLO_STATE ::= igual error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperava un valor para el arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO_STATE",23, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_ARREGLO_STATE ::= llave_a VALOR_ARREGLO_MULTI_STATE llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_STATE",24, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR_ARREGLO_STATE ::= llave_a VALOR_UNIT_ARREGLO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_STATE",24, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR_ARREGLO_STATE ::= llave_a llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new DataArreglo(new ArrayList<>(), new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_STATE",24, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR_ARREGLO_STATE ::= llave_a error llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_STATE",24, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR_ARREGLO_MULTI_STATE ::= VALOR_ARREGLO_MULTI_STATE coma llave_a VALOR_ARREGLO_MULTI_STATE llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = (List<Node>) d;
								list.add(new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1)));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR_ARREGLO_MULTI_STATE ::= VALOR_ARREGLO_MULTI_STATE coma llave_a VALOR_UNIT_ARREGLO llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = (List<Node>) d;
								list.add(new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1)));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR_ARREGLO_MULTI_STATE ::= llave_a VALOR_ARREGLO_MULTI_STATE llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = new ArrayList<>();
								list.add(new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1)));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR_ARREGLO_MULTI_STATE ::= llave_a VALOR_UNIT_ARREGLO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = new ArrayList<>();
								list.add(new DataArreglo((List<Node>) a, new PositionToken(mright+1, mleft+1)));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR_ARREGLO_MULTI_STATE ::= VALOR_ARREGLO_MULTI_STATE coma llave_a error llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR_ARREGLO_MULTI_STATE ::= VALOR_ARREGLO_MULTI_STATE error llave_a VALOR_ARREGLO_MULTI_STATE llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo, se esperava una COMA ','");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR_ARREGLO_MULTI_STATE ::= VALOR_ARREGLO_MULTI_STATE error llave_a VALOR_UNIT_ARREGLO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo, se esperava una COMA ','");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR_ARREGLO_MULTI_STATE ::= llave_a error llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ARREGLO_MULTI_STATE",22, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR_UNIT_ARREGLO ::= VALOR_UNIT_ARREGLO coma VALOR_STATE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = (List<Node>) d;
						list.add((Node) a);
						RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_UNIT_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_UNIT_ARREGLO ::= VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = new ArrayList<>();
						list.add((Node) a);
						RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_UNIT_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_UNIT_ARREGLO ::= VALOR_UNIT_ARREGLO coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_UNIT_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_UNIT_ARREGLO ::= error coma VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el valor del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_UNIT_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STRUCT_ASIGNACION_ARREGLO ::= identificador DIMESION_POS_ARREGLO igual VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new AsignationArray((String) a,( List<Node>) b, (Node) c, new PositionToken(aright+1, aleft+1), null);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STRUCT_ASIGNACION_ARREGLO ::= identificador error igual VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion del arreglo; en la dimension");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STRUCT_ASIGNACION_ARREGLO ::= identificador DIMESION_POS_ARREGLO error VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion del arreglo, se esperaba un igual '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STRUCT_ASIGNACION_ARREGLO ::= identificador DIMESION_POS_ARREGLO igual error punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion del arreglo, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_ARREGLO",26, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DIMESION_POS_ARREGLO ::= DIMESION_POS_ARREGLO corchete_a VALOR_STATE corchete_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = (List<Node>) d;
						list.add((Node) a);
						RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DIMESION_POS_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DIMESION_POS_ARREGLO ::= corchete_a VALOR_STATE corchete_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> list = new ArrayList<>();
						list.add((Node) a);
						RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DIMESION_POS_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DIMESION_POS_ARREGLO ::= DIMESION_POS_ARREGLO corchete_a error corchete_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la dimension del arreglo, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DIMESION_POS_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DIMESION_POS_ARREGLO ::= corchete_a error corchete_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la dimension del arreglo, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DIMESION_POS_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STRUCT_DECLARACION_ARREGLO ::= DECLARACION_ARREGLO_STATE STRUCT_DIMENSION_ARREGLO ASIGNACION_ARREGLO_STATE punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		ListDeclaration list = (ListDeclaration) d;
								list.setAsignation((Node) a);
								list.setDimensions((List<Node>) b);
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STRUCT_DECLARACION_ARREGLO ::= error STRUCT_DIMENSION_ARREGLO ASIGNACION_ARREGLO_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // STRUCT_DECLARACION_ARREGLO ::= DECLARACION_ARREGLO_STATE error ASIGNACION_ARREGLO_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, en la dimension");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STRUCT_DECLARACION_ARREGLO ::= DECLARACION_ARREGLO_STATE STRUCT_DIMENSION_ARREGLO error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, en la asignacion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION_ARREGLO_STATE ::= DECLARACION_ARREGLO_STATE coma identificador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = (ListDeclaration) d;
								list.addDeclaration(new DeclaracionArray(list.isKeep(), list.getDataType(), (String) a, null, null, new PositionToken(aright+1, aleft+1), list.getDataType()));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION_ARREGLO_STATE ::= var TIPO_DATO_STATE arreglo identificador 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ListDeclaration list = new ListDeclaration(false, true, (DataType) b, new PositionToken(mright+1, mleft+1), (DataType) b);
								list.addDeclaration(new DeclaracionArray(false, (DataType) b, (String) c, null, null, new PositionToken(cright+1, cleft+1), (DataType) b));
								RESULT = list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION_ARREGLO_STATE ::= DECLARACION_ARREGLO_STATE error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba una COMA ','");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION_ARREGLO_STATE ::= DECLARACION_ARREGLO_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION_ARREGLO_STATE ::= var error arreglo identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba un tipo de dato");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION_ARREGLO_STATE ::= var TIPO_DATO_STATE error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba la palabra reservada 'arreglo'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION_ARREGLO_STATE ::= var TIPO_DATO_STATE arreglo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la declaracion del arreglo, se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_STATE",21, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICIONAL_SI_SINO_SI ::= CONDICIONAL_SI_SINO_SI_STATE STRUCT_CONDICIONAL_SINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ConditionalSi conditionalSi = (ConditionalSi) a;
							conditionalSi.setConditionalSino((Node) b);
							RESULT = conditionalSi; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI",28, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICIONAL_SI_SINO_SI ::= CONDICIONAL_SI_SINO_SI_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI",28, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICIONAL_SI_SINO_SI ::= error STRUCT_CONDICIONAL_SINO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SI o SINO_SI");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI",28, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICIONAL_SI_SINO_SI_STATE ::= CONDICIONAL_SI_SINO_SI_STATE STRUCT_CONDICIONAL_SINO_SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		ConditionalSi conditionalSi = (ConditionalSi) a;
								conditionalSi.addConditionalSinoSi((Node) b);
								RESULT = conditionalSi; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI_STATE",29, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICIONAL_SI_SINO_SI_STATE ::= STRUCT_CONDICIONAL_SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI_STATE",29, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICIONAL_SI_SINO_SI_STATE ::= error STRUCT_CONDICIONAL_SINO_SI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SI o SINO_SI");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI_SINO_SI_STATE",29, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // STRUCT_CONDICIONAL_SI ::= si pa_a VALOR_CODICIONAL pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		 RESULT = new ConditionalSi((Node) a, (List<Node>) b, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SI",30, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // STRUCT_CONDICIONAL_SI ::= si pa_a error pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SI, se esperaba in valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SI",30, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // STRUCT_CONDICIONAL_SI ::= si pa_a VALOR_CODICIONAL pa_c error SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SI se esperaban llaves '{'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SI",30, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // STRUCT_CONDICIONAL_SINO_SI ::= sino_si pa_a VALOR_CODICIONAL pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalSinoSi((Node) a, (List<Node>) b, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SINO_SI",31, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // STRUCT_CONDICIONAL_SINO_SI ::= sino_si pa_a error pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SINO_SI, se esperaba in valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SINO_SI",31, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // STRUCT_CONDICIONAL_SINO_SI ::= sino_si pa_a VALOR_CODICIONAL pa_c error SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SINO_SI, se esperaba in valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SINO_SI",31, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // STRUCT_CONDICIONAL_SINO ::= sino llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalSino((List<Node>) a, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SINO",32, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // STRUCT_CONDICIONAL_SINO ::= sino error SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SINO, se esperaba in valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SINO",32, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // STRUCT_CONDICIONAL_SWITCH ::= switch_rsv pa_a VALOR_STATE pa_c llave_a CASO_STATE llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalSwitch((Node) a, (List<Node>) b, null, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SWITCH",33, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // STRUCT_CONDICIONAL_SWITCH ::= switch_rsv pa_a error pa_c llave_a CASO_STATE llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SWITCH, en valor de la condicion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SWITCH",33, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // STRUCT_CONDICIONAL_SWITCH ::= switch_rsv pa_a VALOR_STATE pa_c llave_a error llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en las condicional SWITCH, en los CASOS");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CONDICIONAL_SWITCH",33, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASO_STATE ::= STRUCT_CASO default_rsv dos_puntos SENTENCIAS_CODIGO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = (List<Node>) a; 
				list.add(new NodeDefault((List<Node>) a, new PositionToken(mright+1, mleft+1)));
				RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CASO_STATE",34, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASO_STATE ::= STRUCT_CASO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = (List<Node>) a; RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CASO_STATE",34, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASO_STATE ::= STRUCT_CASO default_rsv error SENTENCIAS_CODIGO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso default, se esperaba dos puntos ':'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CASO_STATE",34, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // STRUCT_CASO ::= STRUCT_CASO caso VALOR_CASO dos_puntos SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = (List<Node>) c;
				list.add(new ConditionalCase((Node) a, (List<Node>) b, new PositionToken(mright+1, mleft+1)));
				RESULT = (List<Node>) list; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // STRUCT_CASO ::= caso VALOR_CASO dos_puntos SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = new ArrayList<>();
					list.add(new ConditionalCase((Node) a, (List<Node>) b, new PositionToken(mright+1, mleft+1)));
					RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // STRUCT_CASO ::= error caso VALOR_CASO dos_puntos SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso del switch");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // STRUCT_CASO ::= STRUCT_CASO caso error dos_puntos SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso del switch, se esperaba un valor primitivo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // STRUCT_CASO ::= STRUCT_CASO caso VALOR_CASO error SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso del switch, se esperaban dos puntos ':'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // STRUCT_CASO ::= caso error dos_puntos SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso del switch, se esperaba un valor primitivo");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // STRUCT_CASO ::= caso VALOR_CASO error SENTENCIAS_CODIGO_CASO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra del caso del switch, se esperaban dos puntos ':'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_CASO",35, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VALOR_CASO ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_CASO",36, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // VALOR_CASO ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_CASO",36, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VALOR_CASO ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_CASO",36, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VALOR_CASO ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_CASO",36, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // STRUCT_PARA ::= para pa_a ASIG_PARA_STATE punto_coma COND_PARA_STATE punto_coma SENTENCIAS_PARA_STATE pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalPara((Node) a, (Node) b, (Node) c, (List<Node>) d, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARA",37, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // STRUCT_PARA ::= para pa_a error punto_coma COND_PARA_STATE punto_coma SENTENCIAS_PARA_STATE pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asignacion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARA",37, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // STRUCT_PARA ::= para pa_a ASIG_PARA_STATE punto_coma error punto_coma SENTENCIAS_PARA_STATE pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARA",37, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // STRUCT_PARA ::= para pa_a ASIG_PARA_STATE punto_coma COND_PARA_STATE punto_coma error pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la sentencia de incremento");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARA",37, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ASIG_PARA_STATE ::= var TIPO_DATO_STATE identificador igual VALOR_STATE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new DeclarationVar(false, (DataType) c, (String) a, (Node) b, new PositionToken(mright+1, mleft+1), (DataType) c); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ASIG_PARA_STATE ::= identificador igual VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new AsignationVar((String) a, (Node) b, new PositionToken(aright+1, aleft+1), null);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ASIG_PARA_STATE ::= var error identificador igual VALOR_STATE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un tipo de dato");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ASIG_PARA_STATE ::= var TIPO_DATO_STATE error igual VALOR_STATE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIG_PARA_STATE ::= var TIPO_DATO_STATE identificador error VALOR_STATE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un igual '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASIG_PARA_STATE ::= var TIPO_DATO_STATE identificador igual error 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ASIG_PARA_STATE ::= error igual VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ASIG_PARA_STATE ::= identificador error VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un signo igual '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ASIG_PARA_STATE ::= identificador igual error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estrucutra de la condiciona Para, en la asinganacion, se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("ASIG_PARA_STATE",38, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // COND_PARA_STATE ::= VALOR_CODICIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("COND_PARA_STATE",39, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIAS_PARA_STATE ::= identificador igual VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new AsignationVar((String) a, (Node) b, new PositionToken(aright+1, aleft+1), null);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIAS_PARA_STATE ::= identificador mas_igual VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeOp = new OperationArithmetic(ArithType.ADD, nodeId, (Node) b, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIAS_PARA_STATE ::= identificador mas_mas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeAdd = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, 1);
							Node nodeOp = new OperationArithmetic(ArithType.ADD, nodeId, nodeAdd, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIAS_PARA_STATE ::= identificador menos_menos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		
							Node nodeId = new Identifier((String) a, new PositionToken(aright+1, aleft+1), null);
							Node nodeSub = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, 1);
							Node nodeOp = new OperationArithmetic(ArithType.SUBTRAC, nodeId, nodeSub, new PositionToken(aright+1, aleft+1), null);
							RESULT = new AsignationVar((String) a, nodeOp, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIAS_PARA_STATE ::= error igual VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba un identificador");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIAS_PARA_STATE ::= identificador error VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIAS_PARA_STATE ::= identificador igual error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba un valor");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIAS_PARA_STATE ::= identificador error VALOR_STATE punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '='");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIAS_PARA_STATE ::= identificador igual error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba un valor de asignacion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIAS_PARA_STATE ::= identificador error punto_coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la asignacion se esperaba una signo '(=, +=, ++, --)'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PARA_STATE",40, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // STRUCT_MIENTRAS ::= mientras pa_a VALOR_CODICIONAL pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalMientras((Node) a, (List<Node>) b, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_MIENTRAS",41, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // STRUCT_MIENTRAS ::= mientras pa_a error pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la condicional Mientras, se esperaba el valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_MIENTRAS",41, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // STRUCT_MIENTRAS ::= mientras pa_a VALOR_CODICIONAL pa_c error SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la condicional Mientras, se esperaba la apertura de llaves '{'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_MIENTRAS",41, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // STRUCT_HACER_MIENTRAS ::= hacer llave_a SENTENCIAS_CODIGO llave_c mientras pa_a VALOR_CODICIONAL pa_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new ConditionalHacerMientras((List<Node>) b, (Node) a, new PositionToken(mright+1, mleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_HACER_MIENTRAS",42, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // STRUCT_HACER_MIENTRAS ::= hacer llave_a SENTENCIAS_CODIGO llave_c mientras pa_a error pa_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la condicional Hacer Mientras, se esperaba el valor condicional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_HACER_MIENTRAS",42, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // STRUCT_HACER_MIENTRAS ::= hacer llave_a SENTENCIAS_CODIGO llave_c error pa_a VALOR_CODICIONAL pa_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la condicional Hacer Mientras, se esperaba la palabra reservada 'Mientras'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_HACER_MIENTRAS",42, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // STRUCT_FUNCION_PROC ::= identificador pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new FunctionProc(false, false, (String) a, (List<Node>) b, (List<Node>) c, new PositionToken(aright+1, aleft+1), DataType.VOID);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // STRUCT_FUNCION_PROC ::= TIPO_DATO_STATE_OPTIONAL identificador pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new FunctionProc(false, true, (String) a, (List<Node>) b, (List<Node>) c, new PositionToken(aright+1, aleft+1), (DataType) d);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // STRUCT_FUNCION_PROC ::= keep identificador pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new FunctionProc(true, false, (String) a, (List<Node>) b, (List<Node>) c, new PositionToken(aright+1, aleft+1), DataType.VOID);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // STRUCT_FUNCION_PROC ::= keep TIPO_DATO_STATE_OPTIONAL identificador pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new FunctionProc(true, true, (String) a, (List<Node>) b, (List<Node>) c, new PositionToken(aright+1, aleft+1), (DataType) d);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // STRUCT_FUNCION_PROC ::= identificador pa_a error pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. en la seccion de parametros'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // STRUCT_FUNCION_PROC ::= identificador pa_a STRUCT_PARAMS_STATE pa_c error llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. en la seccion de sentencias'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // STRUCT_FUNCION_PROC ::= TIPO_DATO_STATE_OPTIONAL error pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. se esperaba un identificador'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // STRUCT_FUNCION_PROC ::= TIPO_DATO_STATE_OPTIONAL identificador pa_a error pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. en la seccion de parametros'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // STRUCT_FUNCION_PROC ::= keep identificador pa_a error pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. en la seccion de parametros'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // STRUCT_FUNCION_PROC ::= keep TIPO_DATO_STATE_OPTIONAL error pa_a STRUCT_PARAMS_STATE pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. se esperaba un identificador'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // STRUCT_FUNCION_PROC ::= keep TIPO_DATO_STATE_OPTIONAL identificador pa_a error pa_c llave_a SENTENCIAS_CODIGO_FUNC_PROC llave_c 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de la funcion o metodo. en la seccion de parametros'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_FUNCION_PROC",43, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO_DATO_STATE_OPTIONAL ::= entero 
            {
              Object RESULT =null;
		RESULT = DataType.ENTERO;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO_DATO_STATE_OPTIONAL ::= doble 
            {
              Object RESULT =null;
		RESULT = DataType.DOBLE;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO_DATO_STATE_OPTIONAL ::= boolean_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.BOOLEAN;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO_DATO_STATE_OPTIONAL ::= cadena_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.CADENA;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO_DATO_STATE_OPTIONAL ::= caracter_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.CARACTER;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO_DATO_STATE_OPTIONAL ::= void_rsv 
            {
              Object RESULT =null;
		RESULT = DataType.VOID;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_STATE_OPTIONAL",44, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // STRUCT_PARAMS_STATE ::= STRUCT_PARAMS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS_STATE",45, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // STRUCT_PARAMS_STATE ::= 
            {
              Object RESULT =null;
		List<Node> list = new ArrayList<>(); RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS_STATE",45, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // STRUCT_PARAMS ::= STRUCT_PARAMS coma TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = (List<Node>) a;
					list.add(new DeclarationVar(false, (DataType) b, (String) c, null, new PositionToken(bright+1, bleft+1), (DataType) b));
					RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // STRUCT_PARAMS ::= TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> list = new ArrayList<>();
					list.add(new DeclarationVar(false, (DataType) a, (String) b, null, new PositionToken(aright+1, aleft+1), (DataType) a));
					RESULT = (List<Node>) list;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // STRUCT_PARAMS ::= error coma TIPO_DATO_STATE identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de los parametros'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // STRUCT_PARAMS ::= STRUCT_PARAMS coma error identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de los parametros, se esperaba un tipo de dato'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // STRUCT_PARAMS ::= STRUCT_PARAMS coma TIPO_DATO_STATE error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de los parametros, se esperaba un identificador'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // STRUCT_PARAMS ::= error identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de los parametros, se esperaba un tipo de dato'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // STRUCT_PARAMS ::= TIPO_DATO_STATE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura de los parametros, se esperaba un identificador'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_PARAMS",46, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // STRUCT_REPRODUCIR ::= reproducir pa_a NOTA_STATE coma OCTAVA_STATE coma TIEMPO_MS_STATE coma CANAL_STATE pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstReproducir((MusicalNotes) a, (Node) b, (Node) c, (Node) d, new PositionToken(eright+1, eleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_REPRODUCIR",47, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // STRUCT_REPRODUCIR ::= reproducir pa_a error coma OCTAVA_STATE coma TIEMPO_MS_STATE coma CANAL_STATE pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-7)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura reproducir, en la seccion de notas'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_REPRODUCIR",47, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // STRUCT_REPRODUCIR ::= reproducir pa_a NOTA_STATE coma error coma TIEMPO_MS_STATE coma CANAL_STATE pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura reproducir, en la seccion de octavas'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_REPRODUCIR",47, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // STRUCT_REPRODUCIR ::= reproducir pa_a NOTA_STATE coma OCTAVA_STATE coma error coma CANAL_STATE pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura reproducir, en la seccion de tiempo'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_REPRODUCIR",47, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // STRUCT_REPRODUCIR ::= reproducir pa_a NOTA_STATE coma OCTAVA_STATE coma TIEMPO_MS_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura reproducir, en la seccion de canal'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_REPRODUCIR",47, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NOTA_STATE ::= do_rsv 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.C;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NOTA_STATE ::= do_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.C_S;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NOTA_STATE ::= re 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.D;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NOTA_STATE ::= re_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.D_S;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NOTA_STATE ::= mi 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.E;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NOTA_STATE ::= fa 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.F;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NOTA_STATE ::= fa_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.F_S;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NOTA_STATE ::= sol 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.G;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NOTA_STATE ::= sol_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.G_S;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NOTA_STATE ::= la 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.A;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NOTA_STATE ::= la_s 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.A_S;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NOTA_STATE ::= si 
            {
              Object RESULT =null;
		RESULT = MusicalNotes.B;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("NOTA_STATE",48, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OCTAVA_STATE ::= VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OCTAVA_STATE",49, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TIEMPO_MS_STATE ::= VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIEMPO_MS_STATE",50, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CANAL_STATE ::= VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("CANAL_STATE",51, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // STRUCT_ESPERAR ::= esperar pa_a VALOR_STATE coma VALOR_STATE pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstEsperar((Node) a, (Node) b, new PositionToken(aright+1, aleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ESPERAR",52, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // STRUCT_ESPERAR ::= esperar pa_a error coma VALOR_STATE pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura esperar, en la seccion de tiempo'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ESPERAR",52, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // STRUCT_ESPERAR ::= esperar pa_a VALOR_STATE coma error pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura esperar, en la seccion de canal'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ESPERAR",52, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // STRUCT_ORDENAR ::= ordenar pa_a VALOR_ORDENAR_STATE pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = (Node) a;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ORDENAR",53, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // STRUCT_ORDENAR ::= ordenar pa_a error pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura ordenar, en el parametro'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_ORDENAR",53, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // VALOR_ORDENAR_STATE ::= identificador coma TIPO_ORDEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new InstOrdenar(new Identifier((String) a, new PositionToken(aright+1, aleft+1), null), (OrderType) b, new PositionToken(aright+1, aleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // VALOR_ORDENAR_STATE ::= VALOR_ARREGLO_STATE coma TIPO_ORDEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		RESULT = new InstOrdenar((Node) a, (OrderType) b, new PositionToken(aright+1, aleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // VALOR_ORDENAR_STATE ::= error coma TIPO_ORDEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura ordenar, se esperaba un identificador, arreglo'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // VALOR_ORDENAR_STATE ::= identificador coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura ordenar, se esperaba un tipo de orden'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // VALOR_ORDENAR_STATE ::= VALOR_ARREGLO_STATE error TIPO_ORDEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura ordenar, se esperaba una coma ',''");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // VALOR_ORDENAR_STATE ::= VALOR_ARREGLO_STATE coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura ordenar, se esperaba un tipo de orden'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_ORDENAR_STATE",54, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TIPO_ORDEN ::= ascendente 
            {
              Object RESULT =null;
		RESULT = OrderType.ASCENDENTE ;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_ORDEN",55, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TIPO_ORDEN ::= descendente 
            {
              Object RESULT =null;
		RESULT = OrderType.DESCENDENTE ;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_ORDEN",55, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TIPO_ORDEN ::= pares 
            {
              Object RESULT =null;
		RESULT = OrderType.PARES ;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_ORDEN",55, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TIPO_ORDEN ::= impares 
            {
              Object RESULT =null;
		RESULT = OrderType.IMPARES ;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_ORDEN",55, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TIPO_ORDEN ::= primos 
            {
              Object RESULT =null;
		RESULT = OrderType.PRIMOS ;
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("TIPO_ORDEN",55, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // STRUCT_SUMARIZAR ::= sumarizar pa_a identificador pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstSumarizar(new Identifier((String) a, new PositionToken(aright+1, aleft+1), null), new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_SUMARIZAR",56, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // STRUCT_SUMARIZAR ::= sumarizar pa_a VALOR_ARREGLO_STATE pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstSumarizar((Node) a, new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_SUMARIZAR",56, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // STRUCT_SUMARIZAR ::= sumarizar pa_a error pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura Sumarizar, se esperaba un identificador, arreglo'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_SUMARIZAR",56, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // STRUCT_LONGITUD ::= longitud pa_a identificador pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstLongitud(new Identifier((String) a, new PositionToken(aright+1, aleft+1), null), new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LONGITUD",57, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // STRUCT_LONGITUD ::= longitud pa_a VALOR_ARREGLO_STATE pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstLongitud((Node) a, new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LONGITUD",57, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // STRUCT_LONGITUD ::= longitud pa_a cadena pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstLongitud(new Primitive(new PositionToken(aright+1, aleft+1), DataType.CADENA, (String) a), new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LONGITUD",57, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // STRUCT_LONGITUD ::= longitud pa_a error pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura Longitud, se esperaba un identificador, arreglo o cadena'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LONGITUD",57, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // STRUCT_MENSAJE ::= mensaje pa_a VALOR_STATE pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new InstMensaje((Node) a, new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_MENSAJE",58, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // STRUCT_MENSAJE ::= mensaje pa_a error pa_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura Mensaje, se esperaba un valor'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_MENSAJE",58, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // STRUCT_METODO_PRINCIPAL ::= principal pa_a pa_c llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		RESULT = new Principal((List<Node>) a, new PositionToken(bright+1, bleft+1));
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_METODO_PRINCIPAL",59, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // STRUCT_METODO_PRINCIPAL ::= principal error llave_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura Principal'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_METODO_PRINCIPAL",59, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // STRUCT_METODO_PRINCIPAL ::= principal error llave_a SENTENCIAS_CODIGO llave_c 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura Principal, se esperava ()'");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_METODO_PRINCIPAL",59, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // VALOR_DATA ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.ENTERO, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // VALOR_DATA ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.DOBLE, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // VALOR_DATA ::= true_rsv 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.BOOLEAN, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // VALOR_DATA ::= false_rsv 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.BOOLEAN, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // VALOR_DATA ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // VALOR_DATA ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CADENA, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // VALOR_DATA ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Identifier((String) a,new PositionToken(aright+1, aleft+1), DataType.IDENTIFICADOR); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // VALOR_DATA ::= caracter_special_comilla_simple 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER_ESPECIAL_COMILLA_SIMPLE, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // VALOR_DATA ::= caracter_special_hashtag 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER_ESPECIAL_HASHTAG, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // VALOR_DATA ::= caracter_special_r 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER_ESPECIAL_R, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // VALOR_DATA ::= caracter_special_t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER_ESPECIAL_T, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // VALOR_DATA ::= caracter_special_n 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new Primitive(new PositionToken(aright+1, aleft+1), DataType.CARACTER_ESPECIAL_N, a); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // VALOR_DATA ::= STRUCT_LLAMADA_FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // VALOR_DATA ::= STRUCT_LLAMADA_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // VALOR_DATA ::= STRUCT_REPRODUCIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // VALOR_DATA ::= STRUCT_ORDENAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // VALOR_DATA ::= STRUCT_SUMARIZAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // VALOR_DATA ::= STRUCT_LONGITUD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",60, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // STRUCT_LLAMADA_FUNCION ::= identificador pa_a PARAMAS_STATE_LLAMADA pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		 RESULT = new CallFunction((String) a, (List<Node>) b, new PositionToken(aright+1, aleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_FUNCION",61, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // STRUCT_LLAMADA_FUNCION ::= identificador pa_a pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		 RESULT = new CallFunction((String) a, null, new PositionToken(aright+1, aleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_FUNCION",61, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // STRUCT_LLAMADA_FUNCION ::= identificador pa_a error pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en los parametros de la llamada a la funcion"+ (String) a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_FUNCION",61, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // PARAMAS_STATE_LLAMADA ::= PARAMAS_STATE_LLAMADA coma VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		
								List<Node> params = (List<Node>) a;
								params.add((Node) b);
								RESULT = params;
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("PARAMAS_STATE_LLAMADA",62, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // PARAMAS_STATE_LLAMADA ::= VALOR_STATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 
								List<Node> params = new ArrayList<>();
								params.add((Node) a);
								RESULT = params;
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("PARAMAS_STATE_LLAMADA",62, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // PARAMAS_STATE_LLAMADA ::= error coma VALOR_STATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en los parametros de la llamada a la funcion");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("PARAMAS_STATE_LLAMADA",62, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // PARAMAS_STATE_LLAMADA ::= PARAMAS_STATE_LLAMADA coma error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en los parametros de la llamada a la funcion se esperaba una VALOR");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("PARAMAS_STATE_LLAMADA",62, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // STRUCT_LLAMADA_ARREGLO ::= identificador DIMESION_POS_ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		
								RESULT = new CallArreglo((String) a, (List<Node>) b, new PositionToken(aright+1, aleft+1), null);
							
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_ARREGLO",63, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // STRUCT_LLAMADA_ARREGLO ::= identificador error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la dimension del arreglo"+ (String) a);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_ARREGLO",63, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // STRUCT_LLAMADA_ARREGLO ::= error DIMESION_POS_ARREGLO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la llamada a un arreglo; se esperaba una ID");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_LLAMADA_ARREGLO",63, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA mas OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.ADD, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA menos OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.SUBTRAC, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA por OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.MULTI, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA div OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.DIV, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA modulo OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.MOD, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA potencia OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationArithmetic(ArithType.POW, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null); 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // OPERACION_ARITMETICA ::= pa_a OPERACION_ARITMETICA pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OPERACION_ARITMETICA ::= VALOR_DATA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // OPERACION_ARITMETICA ::= pa_a error pa_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la OPERACION");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // OPERACION_ARITMETICA ::= error OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la OPERACION, se esperaba una VALOR");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",64, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntaxAnalyzerMain$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerMain$do_action_part00000001(
    int                        CUP$SyntaxAnalyzerMain$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerMain$parser,
    java.util.Stack            CUP$SyntaxAnalyzerMain$stack,
    int                        CUP$SyntaxAnalyzerMain$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxAnalyzerMain$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxAnalyzerMain$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // OPERACION_RACIONAL ::= OPERACION_RACIONAL igual_igual OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.EQUAL, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // OPERACION_RACIONAL ::= OPERACION_RACIONAL diferente OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.NOT_EQUAL, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // OPERACION_RACIONAL ::= OPERACION_RACIONAL mayor_q OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.GRATE_THAN, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // OPERACION_RACIONAL ::= OPERACION_RACIONAL menor_q OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.LESS_THAN, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // OPERACION_RACIONAL ::= OPERACION_RACIONAL mayor_igual OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.GRATE_THAN_EQUAL, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // OPERACION_RACIONAL ::= OPERACION_RACIONAL menor_igual OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.LESS_THAN_EQUAL, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // OPERACION_RACIONAL ::= is_null OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationRational(RationalTypes.IS_NULL, (Node) a, null, new PositionToken(aright+1, aleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // OPERACION_RACIONAL ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // OPERACION_RACIONAL ::= is_null error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la OPERACION RACIONAL, se esperaba una VALOR o Una Operacion Racional");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_RACIONAL",65, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // OPERACION_LOGICA ::= OPERACION_LOGICA and OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.AND, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // OPERACION_LOGICA ::= OPERACION_LOGICA nand OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.NAND, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // OPERACION_LOGICA ::= OPERACION_LOGICA or OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.OR, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // OPERACION_LOGICA ::= OPERACION_LOGICA nor OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.NOR, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // OPERACION_LOGICA ::= OPERACION_LOGICA xor OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.XOR, (Node) a, (Node) b, new PositionToken(cright+1, cleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // OPERACION_LOGICA ::= not OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = new OperationLogical(LogicalTypes.NOT, (Node) a, null, new PositionToken(aright+1, aleft+1), null);  
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // OPERACION_LOGICA ::= not error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la OPERACION LOGICA, se esperaba una VALOR RACIONAL");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // OPERACION_LOGICA ::= OPERACION_RACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",66, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // VALOR_STATE ::= OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_STATE",67, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // VALOR_CODICIONAL ::= OPERACION_LOGICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("VALOR_CODICIONAL",68, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO COMENTARIOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_ASIGNACION_VAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_DECLARACION_ARREGLO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_ASIGNACION_ARREGLO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO CONDICIONAL_SI_SINO_SI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_CONDICIONAL_SWITCH 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_PARA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_MIENTRAS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_HACER_MIENTRAS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_REPRODUCIR punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_ESPERAR punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_ORDENAR punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_SUMARIZAR punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_LONGITUD punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_MENSAJE punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_LLAMADA_FUNCION punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO STRUCT_RETORNAR punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add((Node) b); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO salir punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add(new NodeFinally(NodeEndType.SALIR, null, new PositionToken(aright+1, aleft+1), null)); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // SENTENCIAS_CODIGO ::= SENTENCIAS_CODIGO continuar punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		List<Node> sentences = (List<Node>) d; sentences.add(new NodeFinally(NodeEndType.CONTINUAR, null, new PositionToken(aright+1, aleft+1), null)); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // SENTENCIAS_CODIGO ::= 
            {
              Object RESULT =null;
		List<Node> sentences = new ArrayList<>(); RESULT = sentences; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO",69, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // STRUCT_RETORNAR ::= retornar VALOR_CODICIONAL 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		NodeFinally nodeReturn = new NodeFinally(NodeEndType.RETORNAR, (Node) a, new PositionToken(mright+1, mleft+1), null);
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_RETORNAR",72, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // STRUCT_RETORNAR ::= retornar error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en el VALOR DE RETORNO, no es un valor aceptado");
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("STRUCT_RETORNAR",72, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.elementAt(CUP$SyntaxAnalyzerMain$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SENTENCIAS_CODIGO_CASO ::= SENTENCIAS_CODIGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO_CASO",70, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // SENTENCIAS_CODIGO_FUNC_PROC ::= SENTENCIAS_CODIGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerMain$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntaxAnalyzerMain$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_CODIGO_FUNC_PROC",71, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerMain$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerMain$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntaxAnalyzerMain$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerMain$do_action(
    int                        CUP$SyntaxAnalyzerMain$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerMain$parser,
    java.util.Stack            CUP$SyntaxAnalyzerMain$stack,
    int                        CUP$SyntaxAnalyzerMain$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$SyntaxAnalyzerMain$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$SyntaxAnalyzerMain$do_action_part00000000(
                               CUP$SyntaxAnalyzerMain$act_num,
                               CUP$SyntaxAnalyzerMain$parser,
                               CUP$SyntaxAnalyzerMain$stack,
                               CUP$SyntaxAnalyzerMain$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$SyntaxAnalyzerMain$do_action_part00000001(
                               CUP$SyntaxAnalyzerMain$act_num,
                               CUP$SyntaxAnalyzerMain$parser,
                               CUP$SyntaxAnalyzerMain$stack,
                               CUP$SyntaxAnalyzerMain$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
