/* The following code was generated by JFlex 1.4.3 on 9/9/23 01:32 */

package com.yeferal.desktopreproductor.gramm.comunication;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.yeferal.desktopreproductor.ast.errors.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/9/23 01:32 from the specification file
 * <tt>LexCom.jflex</tt>
 */
public class LexicalAnalyzerCom implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  5, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36, 14, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  2, 30,  3,  0, 
     0,  0,  0,  0, 31,  0, 35,  0,  0, 25,  0,  0, 15, 34, 26, 27, 
    17,  0, 33, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 16, 21, 10, 13, 23, 28,  0,  0,  9,  0,  0,  8, 20, 19,  7, 
    18,  0, 22,  6, 11, 12, 29,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\11\1\1\5"+
    "\4\1\13\0\1\6\4\0\1\7\6\0\1\10\1\0"+
    "\1\11\1\12\1\13\1\14\21\0\1\15\4\0\1\16"+
    "\5\0\1\17\1\0\1\20\1\21\1\22\23\0\1\23"+
    "\1\24\7\0\1\25\23\0\1\26\2\0\1\27\1\0"+
    "\1\30\6\0\1\31\1\32\1\33\14\0\1\34\1\35"+
    "\3\0\1\36\1\0\1\37\1\40\4\0\1\41\1\0"+
    "\1\42\4\0\1\43\3\0\1\44\10\0\1\45\1\46"+
    "\3\0\1\47\1\0\1\50\1\0\1\51\2\0\1\52"+
    "\1\53\1\54\6\0\1\55\1\56\1\0\1\57\1\60"+
    "\1\61\3\0\1\62\2\0\1\63\1\64\1\65\1\0"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\45\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\45"+
    "\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\45"+
    "\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534"+
    "\0\u0559\0\u057e\0\u05a3\0\45\0\u05c8\0\u05ed\0\u0612\0\45"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a"+
    "\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862"+
    "\0\u0887\0\u08ac\0\u03e7\0\u08d1\0\u08f6\0\u091b\0\u0940\0\45"+
    "\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\45"+
    "\0\45\0\45\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21"+
    "\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49"+
    "\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\45\0\45\0\u0d27"+
    "\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\45\0\u0e2a"+
    "\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52"+
    "\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a"+
    "\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\45\0\u1158\0\45"+
    "\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280"+
    "\0\45\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383"+
    "\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\45\0\u1486"+
    "\0\u14ab\0\u14d0\0\45\0\u14f5\0\45\0\45\0\u151a\0\u153f"+
    "\0\u1564\0\u1589\0\45\0\u15ae\0\45\0\u15d3\0\u15f8\0\u161d"+
    "\0\u1642\0\45\0\u1667\0\u168c\0\u16b1\0\45\0\u16d6\0\u16fb"+
    "\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\45\0\45"+
    "\0\u17fe\0\u1823\0\u1848\0\45\0\u186d\0\45\0\u1892\0\45"+
    "\0\u18b7\0\u18dc\0\45\0\45\0\45\0\u1901\0\u1926\0\u194b"+
    "\0\u1970\0\u1995\0\u19ba\0\45\0\45\0\u19df\0\45\0\45"+
    "\0\45\0\u1a04\0\u1a29\0\u1a4e\0\45\0\u1a73\0\u1a98\0\45"+
    "\0\45\0\45\0\u1abd\0\45\0\45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\7\2\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\4\2\1\16"+
    "\3\2\1\17\1\2\1\20\1\21\1\2\1\22\1\23"+
    "\1\24\1\2\46\0\1\3\51\0\1\25\1\26\1\27"+
    "\1\0\1\30\1\31\1\0\1\32\1\33\3\0\1\34"+
    "\1\35\25\0\1\6\37\0\1\36\5\37\1\40\22\37"+
    "\1\41\1\37\1\42\12\37\14\0\1\43\41\0\1\44"+
    "\6\0\1\45\34\0\1\46\45\0\1\47\44\0\1\50"+
    "\42\0\1\51\4\0\1\52\37\0\1\53\1\0\1\54"+
    "\61\0\1\55\25\0\1\56\64\0\1\57\26\0\1\60"+
    "\53\0\1\61\33\0\1\62\47\0\1\63\43\0\1\64"+
    "\53\0\1\65\35\0\1\66\47\0\1\67\3\0\1\70"+
    "\32\0\1\71\1\72\1\73\1\0\1\74\1\75\1\0"+
    "\1\76\4\0\1\77\1\100\32\0\1\101\42\0\1\102"+
    "\41\0\1\103\40\0\5\37\1\40\44\37\1\40\23\37"+
    "\1\104\20\37\1\40\25\37\1\105\11\37\26\0\1\106"+
    "\24\0\1\107\76\0\1\110\33\0\1\111\23\0\1\112"+
    "\44\0\1\113\62\0\1\114\44\0\1\115\30\0\1\116"+
    "\63\0\1\117\55\0\1\120\44\0\1\121\44\0\1\122"+
    "\14\0\1\123\47\0\1\124\37\0\1\125\61\0\1\126"+
    "\43\0\1\127\50\0\1\130\31\0\1\131\40\0\1\132"+
    "\47\0\1\133\43\0\1\134\53\0\1\135\35\0\1\136"+
    "\47\0\1\137\3\0\1\140\35\0\1\141\42\0\1\142"+
    "\43\0\1\143\51\0\1\144\10\0\1\145\20\0\5\37"+
    "\1\146\44\37\1\147\37\37\20\0\1\150\37\0\1\151"+
    "\51\0\1\152\37\0\1\153\44\0\1\154\56\0\1\155"+
    "\46\0\1\156\55\0\1\157\16\0\1\160\43\0\1\161"+
    "\53\0\1\162\37\0\1\163\51\0\1\164\33\0\1\165"+
    "\55\0\1\166\33\0\1\167\45\0\1\170\47\0\1\171"+
    "\37\0\1\172\61\0\1\173\43\0\1\174\50\0\1\175"+
    "\31\0\1\176\37\0\1\177\51\0\1\200\10\0\1\201"+
    "\33\0\1\202\51\0\1\203\51\0\1\204\31\0\1\205"+
    "\52\0\1\206\37\0\1\207\51\0\1\210\44\0\1\211"+
    "\52\0\1\212\44\0\1\213\32\0\1\214\42\0\1\215"+
    "\67\0\1\216\27\0\1\217\34\0\1\220\37\0\1\221"+
    "\53\0\1\222\40\0\1\223\47\0\1\224\53\0\1\225"+
    "\37\0\1\226\51\0\1\227\33\0\1\230\55\0\1\231"+
    "\33\0\1\232\50\0\1\233\51\0\1\234\51\0\1\235"+
    "\37\0\1\236\27\0\1\237\67\0\1\240\27\0\1\241"+
    "\42\0\1\242\43\0\1\243\14\0\1\244\50\0\1\245"+
    "\24\0\1\246\64\0\1\247\26\0\1\250\53\0\1\251"+
    "\32\0\1\252\41\0\1\253\52\0\1\254\36\0\1\255"+
    "\53\0\1\256\67\0\1\257\27\0\1\260\34\0\1\261"+
    "\37\0\1\262\53\0\1\263\40\0\1\264\56\0\1\265"+
    "\27\0\1\266\67\0\1\267\24\0\1\270\65\0\1\271"+
    "\24\0\1\272\63\0\1\273\32\0\1\274\53\0\1\275"+
    "\34\0\1\276\34\0\1\277\44\0\1\300\50\0\1\301"+
    "\46\0\1\302\53\0\1\303\27\0\1\304\2\0\1\305"+
    "\41\0\1\306\52\0\1\307\36\0\1\310\47\0\1\311"+
    "\65\0\1\312\20\0\1\313\44\0\1\314\64\0\1\315"+
    "\32\0\1\316\62\0\1\317\27\0\1\320\46\0\1\321"+
    "\53\0\1\322\34\0\1\323\34\0\1\324\44\0\1\325"+
    "\50\0\1\326\40\0\1\327\44\0\1\330\61\0\1\331"+
    "\61\0\1\332\20\0\1\333\50\0\1\334\32\0\1\335"+
    "\55\0\1\336\53\0\1\337\41\0\1\340\44\0\1\341"+
    "\27\0\1\342\56\0\1\343\32\0\1\344\44\0\1\345"+
    "\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\12\1\1\11\4\1\13\0"+
    "\1\11\4\0\1\1\6\0\1\11\1\0\2\1\1\11"+
    "\1\1\21\0\1\1\4\0\1\11\5\0\1\1\1\0"+
    "\3\11\23\0\2\11\7\0\1\11\23\0\1\1\2\0"+
    "\1\11\1\0\1\11\6\0\2\1\1\11\14\0\1\1"+
    "\1\11\3\0\1\11\1\0\2\11\4\0\1\11\1\0"+
    "\1\11\4\0\1\11\3\0\1\11\10\0\2\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\6\0"+
    "\2\11\1\0\3\11\3\0\1\11\2\0\3\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    List<ErrorGramm> lexialErrors = new ArrayList<>();

    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        // System.out.print(s+" ");
    }

    public void addError(int row, int column, String token, String description){
        lexialErrors.add(new ErrorGramm(new PositionToken(row, column), ErrorType.LEXICAL, token, description));
    }

    public List<ErrorGramm> getLexicalErrors(){
        return lexialErrors;
    }

    String cadena="";

    // private void cambiarEstado(){
    //     switch(seccionActual){
    //         case 0: yybegin(YYINITIAL); break;
    //         case 1: yybegin(REQUEST); break;
    //     }
    // }
    



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzerCom(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzerCom(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.lista_c , yycolumn, yyline, yytext());
          }
        case 56: break;
        case 12: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.fa , yycolumn, yyline, yytext());
          }
        case 57: break;
        case 53: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.solicitud_a , yycolumn, yyline, yytext());
          }
        case 58: break;
        case 1: 
          { addError(yyline+1, yycolumn+1, yytext(), "Caracter o Token no reconocido");
                                            System.out.println("Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                            //ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
          }
        case 59: break;
        case 33: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.canal_a , yycolumn, yyline, yytext());
          }
        case 60: break;
        case 38: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.listas_a , yycolumn, yyline, yytext());
          }
        case 61: break;
        case 42: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pistas_a , yycolumn, yyline, yytext());
          }
        case 62: break;
        case 43: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nombre_a , yycolumn, yyline, yytext());
          }
        case 63: break;
        case 23: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.lista , yycolumn, yyline, yytext());
          }
        case 64: break;
        case 3: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.cerrar , yycolumn, yyline, yytext());
          }
        case 65: break;
        case 19: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.si_rsv , yycolumn, yyline, yytext());
          }
        case 66: break;
        case 52: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.frecuencia , yycolumn, yyline, yytext());
          }
        case 67: break;
        case 45: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.octava_c , yycolumn, yyline, yytext());
          }
        case 68: break;
        case 15: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.sol , yycolumn, yyline, yytext());
          }
        case 69: break;
        case 27: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.tipo_a , yycolumn, yyline, yytext());
          }
        case 70: break;
        case 50: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.duracion_a , yycolumn, yyline, yytext());
          }
        case 71: break;
        case 13: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.decimal , yycolumn, yyline, Double.parseDouble(yytext()));
          }
        case 72: break;
        case 18: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.fa_s , yycolumn, yyline, yytext());
          }
        case 73: break;
        case 51: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pistanueva , yycolumn, yyline, yytext());
          }
        case 74: break;
        case 36: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nota_c , yycolumn, yyline, yytext());
          }
        case 75: break;
        case 7: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.la , yycolumn, yyline, yytext());
          }
        case 76: break;
        case 34: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.datos_a , yycolumn, yyline, yytext());
          }
        case 77: break;
        case 11: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.mi , yycolumn, yyline, yytext());
          }
        case 78: break;
        case 16: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.do_s , yycolumn, yyline, yytext());
          }
        case 79: break;
        case 26: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.canal_ab , yycolumn, yyline, yytext());
          }
        case 80: break;
        case 9: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.do_rsv , yycolumn, yyline, yytext());
          }
        case 81: break;
        case 17: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.re_s , yycolumn, yyline, yytext());
          }
        case 82: break;
        case 6: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.cadena , yycolumn, yyline, yytext().substring(1, yytext().length() - 1));
          }
        case 83: break;
        case 5: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.igual , yycolumn, yyline, yytext());
          }
        case 84: break;
        case 25: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.lista_a , yycolumn, yyline, yytext());
          }
        case 85: break;
        case 31: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nombre , yycolumn, yyline, yytext());
          }
        case 86: break;
        case 49: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.aleatorio , yycolumn, yyline, yytext());
          }
        case 87: break;
        case 55: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.solicitud_c , yycolumn, yyline, yytext());
          }
        case 88: break;
        case 14: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.la_s , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 22: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nota_ab , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 40: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.canal_c , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 46: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.listas_c , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 30: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pistas , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 37: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.octava_a , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 32: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.numero_rsv , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 8: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.si , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 48: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nombre_c , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 47: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pistas_c , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 10: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.re , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.no , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 4: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.numero , yycolumn, yyline, Integer.parseInt(yytext()));
          }
        case 101: break;
        case 24: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pista , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 29: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.nota_a , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 28: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.pista_ab , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 44: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.duracion , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 35: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.tipo_c , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 54: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.duracion_c , yycolumn, yyline, yytext());
          }
        case 107: break;
        case 41: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolComCode.datos_c , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 2: 
          { /*Ignore*/
          }
        case 109: break;
        case 21: 
          { printConsole(yytext()); return new Symbol(SymbolComCode.sol_s , yycolumn, yyline, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SymbolComCode.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
