
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.yeferal.desktopreproductor.gramm.list;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.yeferal.desktopreproductor.ast.errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntaxAnalyzerList extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolListCode.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntaxAnalyzerList() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntaxAnalyzerList(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzerList(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\005\000\002\004\003\000\002\005\007" +
    "\000\002\006\011\000\002\006\007\000\002\006\005\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\013\007\000\002" +
    "\013\005\000\002\014\003\000\002\014\002\000\002\015" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\012\ufffd\015\ufffd\001" +
    "\002\000\004\016\016\001\002\000\006\012\013\015\014" +
    "\001\002\000\004\002\uffff\001\002\000\004\004\011\001" +
    "\002\000\006\012\ufffe\015\ufffe\001\002\000\004\011\017" +
    "\001\002\000\014\003\025\005\030\006\022\007\027\010" +
    "\024\001\002\000\010\003\064\012\ufff8\015\065\001\002" +
    "\000\010\003\ufff3\012\ufff3\015\ufff3\001\002\000\004\016" +
    "\060\001\002\000\010\003\ufff1\012\ufff1\015\ufff1\001\002" +
    "\000\004\016\044\001\002\000\006\012\ufff5\015\042\001" +
    "\002\000\010\003\ufff4\012\ufff4\015\ufff4\001\002\000\004" +
    "\016\036\001\002\000\004\016\034\001\002\000\010\003" +
    "\ufff2\012\ufff2\015\ufff2\001\002\000\004\012\033\001\002" +
    "\000\006\012\ufffc\015\ufffc\001\002\000\004\021\035\001" +
    "\002\000\010\003\ufff0\012\ufff0\015\ufff0\001\002\000\010" +
    "\003\037\017\040\020\041\001\002\000\010\003\uffea\012" +
    "\uffea\015\uffea\001\002\000\010\003\uffec\012\uffec\015\uffec" +
    "\001\002\000\010\003\uffeb\012\uffeb\015\uffeb\001\002\000" +
    "\012\005\030\006\022\007\027\010\024\001\002\000\004" +
    "\012\ufff6\001\002\000\006\003\045\013\046\001\002\000" +
    "\010\003\uffe8\012\uffe8\015\uffe8\001\002\000\010\003\047" +
    "\014\uffe6\022\050\001\002\000\010\003\uffe2\014\uffe2\015" +
    "\uffe2\001\002\000\010\003\uffe4\014\uffe4\015\uffe4\001\002" +
    "\000\010\003\054\014\uffe7\015\055\001\002\000\004\014" +
    "\053\001\002\000\010\003\uffe9\012\uffe9\015\uffe9\001\002" +
    "\000\004\022\057\001\002\000\004\022\056\001\002\000" +
    "\010\003\uffe5\014\uffe5\015\uffe5\001\002\000\010\003\uffe3" +
    "\014\uffe3\015\uffe3\001\002\000\010\003\061\017\062\020" +
    "\063\001\002\000\010\003\uffed\012\uffed\015\uffed\001\002" +
    "\000\010\003\uffef\012\uffef\015\uffef\001\002\000\010\003" +
    "\uffee\012\uffee\015\uffee\001\002\000\012\005\030\006\022" +
    "\007\027\010\024\001\002\000\012\005\030\006\022\007" +
    "\027\010\024\001\002\000\006\012\ufff9\015\067\001\002" +
    "\000\012\005\030\006\022\007\027\010\024\001\002\000" +
    "\006\012\ufffa\015\071\001\002\000\012\005\030\006\022" +
    "\007\027\010\024\001\002\000\004\012\ufffb\001\002\000" +
    "\004\012\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\011\005\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\031\007" +
    "\017\010\025\011\020\012\030\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\042\010\025\011\020" +
    "\012\030\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\051\015\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\072\010\025\011\020\012\030\013\022\001" +
    "\001\000\014\007\065\010\025\011\020\012\030\013\022" +
    "\001\001\000\002\001\001\000\014\007\067\010\025\011" +
    "\020\012\030\013\022\001\001\000\002\001\001\000\014" +
    "\007\071\010\025\011\020\012\030\013\022\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxAnalyzerList$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxAnalyzerList$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxAnalyzerList$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
	List<ErrorGramm> syntaxErrors = new ArrayList<>();
    List<TrackList> listTrack = new ArrayList<>();
    VerificatorCamp veri = new VerificatorCamp();

	public void syntax_error(Symbol s) {
		int row = s.right+1;
		int column = s.left+1;
		String token = s.value + "";
		addError(row, column, ErrorType.SYNTACTIC, token, "Secuencia de Token no reconocida.");
		System.out.println("ERROR: Fila: "+(s.right+1)+", Columna: "+(s.left+1)+", Token: "+s.value);

	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		if(cur_token.toString().equals("#0")){
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  "Fin del archivo";
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
            
        }else{
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String token =  (String) cur_token.value;
			int column = cur_token.left+1;
			int row = cur_token.right+1;
			addError(row, column, ErrorType.SYNTACTIC, token, "No se pudo recuperar y seguir analizando.");
			
        }
		System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
	}

	public void addError(int row, int column, ErrorType errorType, String token, String description){
        syntaxErrors.add(new ErrorGramm(new PositionToken(row, column), errorType, token, description));
    }

	public List<ErrorGramm> getSyntaxErrors(){
        return syntaxErrors;
    }

	public List<TrackList> getListTracks(){
		return listTrack;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntaxAnalyzerList$actions {


    

  private final SyntaxAnalyzerList parser;

  /** Constructor */
  CUP$SyntaxAnalyzerList$actions(SyntaxAnalyzerList parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerList$do_action_part00000000(
    int                        CUP$SyntaxAnalyzerList$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerList$parser,
    java.util.Stack            CUP$SyntaxAnalyzerList$stack,
    int                        CUP$SyntaxAnalyzerList$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxAnalyzerList$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxAnalyzerList$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxAnalyzerList$parser.done_parsing();
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CODE 
            {
              Object RESULT =null;

              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODE ::= llave_a STRUCT_LIST llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		parser.listTrack = (List<TrackList>) a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STRUCT_LIST ::= STRUCT_LIST coma LISTA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		List<TrackList> list = (List<TrackList>) b; list.add((TrackList) a); RESULT=list;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_LIST",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCT_LIST ::= LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		List<TrackList> list = new ArrayList<>(); list.add((TrackList) a); RESULT=list;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_LIST",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA ::= lista dos_puntos llave_a CONTENT_LIST llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENT_LIST ::= CONTENT_MOD coma CONTENT_MOD coma CONTENT_MOD coma CONTENT_MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		
                TrackList trl = parser.veri.fromFour(a,b,c,d);
                if(trl!=null){
                    RESULT = trl;
                }else{
                    parser.addError(aright+1, aleft+1, ErrorType.SYNTACTIC, (String) a, "CAMPOS INCORRECTOS, deben de ser diferentes");
                }
                
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENT_LIST ::= CONTENT_MOD coma CONTENT_MOD coma CONTENT_MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		
                TrackList trl = parser.veri.fromThree(a,b,c);
                if(trl!=null){
                    RESULT = trl;
                }else{
                    parser.addError(aright+1, aleft+1, ErrorType.SYNTACTIC, (String) a, "CAMPOS INCORRECTOS, deben de ser diferentes");
                }
                
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENT_LIST ::= CONTENT_MOD coma CONTENT_MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		
                TrackList trl = parser.veri.fromTwo(a,b);
                if(trl!=null){
                    RESULT = trl;
                }else{
                    parser.addError(aright+1, aleft+1, ErrorType.SYNTACTIC, (String) a, "CAMPOS INCORRECTOS, deben de ser diferentes");
                }
                
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENT_LIST ::= CONTENT_MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		
                TrackList trl = parser.veri.fromOne(a);
                if(trl!=null){
                    RESULT = trl;
                }else{
                    parser.addError(aright+1, aleft+1, ErrorType.SYNTACTIC, (String) a, "CAMPOS INCORRECTOS, deben de ser diferentes");
                }
                
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENT_LIST ::= CONTENT_MOD error CONTENT_MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura, se esperaba una coma ,");
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENT_LIST ::= error coma CONTENT_MOD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura, se esperaba un parametro");
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENT_LIST ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura del contenido de la lista");
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_LIST",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENT_MOD ::= STRUCT_NOMBRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_MOD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENT_MOD ::= STRUCT_RANDOM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_MOD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENT_MOD ::= STRUCT_CIRCULAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_MOD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENT_MOD ::= STRUCT_PISTAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("CONTENT_MOD",5, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCT_NOMBRE ::= nombre dos_puntos cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_NOMBRE",6, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCT_RANDOM ::= random dos_puntos true_rsv 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_RANDOM",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCT_RANDOM ::= random dos_puntos false_rsv 
            {
              Object RESULT =null;
		RESULT = 0;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_RANDOM",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_RANDOM ::= random dos_puntos error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;

              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_RANDOM",7, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCT_CIRCULAR ::= circular dos_puntos true_rsv 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_CIRCULAR",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRUCT_CIRCULAR ::= circular dos_puntos false_rsv 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_CIRCULAR",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STRUCT_CIRCULAR ::= circular dos_puntos error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;

              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_CIRCULAR",8, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STRUCT_PISTAS ::= pistas dos_puntos corchete_a LIST_TRACKS corchete_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTAS",9, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRUCT_PISTAS ::= pistas dos_puntos error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;

              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("STRUCT_PISTAS",9, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_TRACKS ::= MULTI_TRACK 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		RESULT = a;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("LIST_TRACKS",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIST_TRACKS ::= 
            {
              Object RESULT =null;
		List<String> list = new ArrayList<>(); RESULT=list;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("LIST_TRACKS",10, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MULTI_TRACK ::= MULTI_TRACK coma identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		List<String> list = (List<String>) b; list.add((String) a); RESULT=list;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("MULTI_TRACK",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MULTI_TRACK ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		List<String> list = new ArrayList<>(); list.add((String) a); RESULT=list;
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("MULTI_TRACK",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MULTI_TRACK ::= MULTI_TRACK error identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error, se esperaba una coma ,");
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("MULTI_TRACK",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.elementAt(CUP$SyntaxAnalyzerList$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MULTI_TRACK ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzerList$stack.peek()).value;
		parser.addError(eright+1, eleft+1, ErrorType.SYNTACTIC, (String) e, "Error en la estructura, se esperaba una Identificado");
              CUP$SyntaxAnalyzerList$result = parser.getSymbolFactory().newSymbol("MULTI_TRACK",11, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzerList$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzerList$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntaxAnalyzerList$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzerList$do_action(
    int                        CUP$SyntaxAnalyzerList$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzerList$parser,
    java.util.Stack            CUP$SyntaxAnalyzerList$stack,
    int                        CUP$SyntaxAnalyzerList$top)
    throws java.lang.Exception
    {
              return CUP$SyntaxAnalyzerList$do_action_part00000000(
                               CUP$SyntaxAnalyzerList$act_num,
                               CUP$SyntaxAnalyzerList$parser,
                               CUP$SyntaxAnalyzerList$stack,
                               CUP$SyntaxAnalyzerList$top);
    }
}

}
