/* The following code was generated by JFlex 1.4.3 on 18/8/23 23:21 */

package com.yeferal.desktopreproductor.gramm.editor;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/8/23 23:21 from the specification file
 * <tt>paintLex.jflex</tt>
 */
public class LexicalAnalyzerPaint implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55, 23,  9, 28,  0, 21, 24, 69, 10, 11,  5, 19, 16,  4, 68, 20, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0, 17,  3, 18,  6,  0, 
     0, 53, 52, 49, 26, 42, 33,  7, 61, 63,  7, 46, 37, 31,  7, 62, 
    38,  7, 29, 35, 66,  7, 47,  7,  7,  7,  7, 12,  0, 13, 22, 67, 
     0, 34, 51, 50, 45, 30, 58, 54, 57, 32, 65, 46, 36, 60, 44, 27, 
    39,  7, 48, 40, 41, 59, 47, 56, 43,  7, 64, 14, 25, 15,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  7,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  7,  0,  0, 
     0,  7,  0,  7,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\1\27\7\1\1\1\0\1\27\1\30\1\31\1\32"+
    "\2\0\1\33\1\34\1\35\1\36\1\37\1\40\2\0"+
    "\1\41\1\42\1\43\1\44\2\7\1\45\4\7\1\46"+
    "\1\7\1\47\4\7\1\50\4\7\1\51\20\7\2\0"+
    "\1\52\2\0\1\31\1\53\1\54\1\55\1\56\3\7"+
    "\1\57\10\7\1\60\4\7\1\61\5\7\1\62\7\7"+
    "\1\63\6\7\1\52\1\0\1\64\17\7\1\65\1\66"+
    "\6\7\1\67\2\7\1\70\1\71\1\72\2\7\1\73"+
    "\4\7\1\64\1\74\12\7\1\75\3\7\1\0\1\76"+
    "\3\7\1\77\1\100\7\7\1\101\6\7\1\102\6\7"+
    "\1\0\1\103\3\7\1\104\2\7\1\105\2\7\1\106"+
    "\1\107\2\7\1\110\1\7\1\111\1\7\1\112\2\7"+
    "\1\113\1\114\6\7\1\115\1\7\1\116\1\117\1\120"+
    "\3\7\1\121\3\7\1\122\3\7\1\123\1\124\1\125"+
    "\1\126\1\7\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\106\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\u0276\0\u02bc\0\106\0\106\0\106\0\u0302"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\106\0\106\0\u0aaa\0\106\0\u0af0"+
    "\0\u0230\0\106\0\106\0\106\0\106\0\106\0\106\0\u0b36"+
    "\0\u0b7c\0\106\0\106\0\106\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u0df2\0\u159a\0\u15e0\0\106\0\u1626\0\u166c\0\106\0\u0af0"+
    "\0\106\0\106\0\106\0\u16b2\0\u16f8\0\u173e\0\106\0\u1784"+
    "\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\106"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\106\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u01a4\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u159a\0\u1ffe\0\u1626\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\106\0\u245e\0\u24a4\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u01a4\0\u2648\0\u268e\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u26d4\0\u271a\0\u01a4\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\106\0\u01a4\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u01a4\0\u2b34\0\u2b7a\0\u2bc0"+
    "\0\u2c06\0\u01a4\0\u2c4c\0\u2c92\0\u2cd8\0\u01a4\0\u01a4\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u01a4\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u01a4\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u01a4\0\u3296\0\u32dc"+
    "\0\u3322\0\u01a4\0\u3368\0\u33ae\0\u01a4\0\u33f4\0\u343a\0\u01a4"+
    "\0\u01a4\0\u3480\0\u34c6\0\u01a4\0\u350c\0\u01a4\0\u3552\0\u01a4"+
    "\0\u3598\0\u35de\0\u01a4\0\106\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u01a4\0\u37c8\0\u01a4\0\u01a4\0\u01a4\0\u380e"+
    "\0\u3854\0\u389a\0\u01a4\0\u38e0\0\u3926\0\u396c\0\u01a4\0\u39b2"+
    "\0\u39f8\0\u3a3e\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u3a84\0\u01a4"+
    "\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\2\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\2\46\1\47\1\50"+
    "\1\36\2\10\1\51\1\52\1\53\1\54\2\55\2\56"+
    "\1\42\1\10\1\3\1\10\1\57\1\60\1\10\1\61"+
    "\1\57\1\34\1\40\2\10\1\50\2\2\1\62\107\0"+
    "\2\3\64\0\1\3\22\0\1\63\15\0\1\64\67\0"+
    "\1\65\107\0\1\66\13\0\1\67\72\0\2\10\21\0"+
    "\2\10\1\0\32\10\1\0\14\10\12\0\1\11\73\0"+
    "\1\70\1\0\11\71\1\72\74\71\22\0\1\73\105\0"+
    "\1\74\1\75\104\0\1\76\4\0\1\77\1\100\1\101"+
    "\104\0\1\102\1\103\105\0\1\104\63\0\2\10\21\0"+
    "\1\10\1\105\1\0\1\10\1\106\30\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\107\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\1\10"+
    "\1\110\30\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\13\10\1\111\2\10\1\112\1\113\12\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\1\10\1\114"+
    "\1\10\1\115\26\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\32\10\1\0\4\10\1\116\7\10\11\0"+
    "\2\10\21\0\2\10\1\0\5\10\1\117\24\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\1\10\1\120"+
    "\11\10\1\121\7\10\1\122\6\10\1\0\14\10\11\0"+
    "\2\10\21\0\1\10\1\123\1\0\3\10\1\124\1\10"+
    "\1\125\24\10\1\0\1\126\2\10\1\127\10\10\11\0"+
    "\2\10\21\0\1\10\1\130\1\0\32\10\1\0\14\10"+
    "\11\0\2\10\21\0\1\10\1\130\1\0\5\10\1\131"+
    "\24\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\3\10\1\132\1\10\1\133\15\10\1\134\6\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\3\10\1\124"+
    "\1\10\1\125\24\10\1\0\1\126\2\10\1\127\10\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\135\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\1\10\1\136\1\0"+
    "\1\10\1\106\30\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\1\10\1\137\30\10\1\0\14\10\11\0"+
    "\2\10\21\0\1\10\1\140\1\0\1\10\1\141\3\10"+
    "\1\142\24\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\1\10\1\143\30\10\1\0\14\10\11\0\2\10"+
    "\21\0\1\10\1\144\1\0\5\10\1\145\24\10\1\0"+
    "\14\10\11\0\2\10\21\0\1\10\1\146\1\0\32\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\5\10"+
    "\1\147\24\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\5\10\1\150\24\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\1\10\1\114\1\10\1\151\26\10"+
    "\1\0\14\10\2\0\34\152\1\153\50\152\1\154\4\155"+
    "\1\156\1\0\100\155\2\66\1\157\103\66\10\0\1\160"+
    "\125\0\1\161\106\0\1\162\63\0\2\10\21\0\2\10"+
    "\1\163\26\10\1\164\3\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\32\10\1\0\2\10\1\165\11\10"+
    "\11\0\2\10\21\0\2\10\1\0\20\10\1\166\11\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\167\12\10"+
    "\1\170\1\10\1\171\15\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\12\10\1\172\17\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\14\10\1\173\15\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\14\10"+
    "\1\174\15\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\175\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\1\10\1\176\30\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\12\10\1\177\17\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\200\7\10"+
    "\1\201\22\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\13\10\1\202\16\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\25\10\1\203\4\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\204\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\7\10"+
    "\1\205\22\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\206\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\7\10\1\207\22\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\3\10\1\210\26\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\32\10"+
    "\1\0\4\10\1\211\7\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\212\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\213\32\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\13\10\1\214\16\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\215\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\3\10"+
    "\1\216\26\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\32\10\1\0\3\10\1\217\10\10\11\0\2\10"+
    "\21\0\2\10\1\0\26\10\1\164\3\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\1\10\1\220\30\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\3\10"+
    "\1\221\26\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\23\10\1\222\6\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\23\10\1\223\6\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\12\10\1\170\1\10"+
    "\1\171\15\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\224\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\13\10\1\225\4\10\1\226\2\10"+
    "\1\227\6\10\1\0\14\10\11\0\2\10\21\0\1\10"+
    "\1\230\1\0\32\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\25\10\1\231\4\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\7\10\1\201\22\10\1\0"+
    "\14\10\107\0\1\154\34\0\1\152\14\0\1\152\2\0"+
    "\1\152\3\0\1\152\24\0\1\232\4\155\1\233\105\155"+
    "\1\233\1\155\1\234\77\155\7\0\2\10\21\0\2\10"+
    "\1\0\7\10\1\235\22\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\5\10\1\236\24\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\1\10\1\237\30\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\23\10"+
    "\1\240\6\10\1\0\14\10\11\0\2\10\21\0\1\10"+
    "\1\241\1\0\32\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\1\10\1\242\30\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\3\10\1\243\26\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\1\10\1\244"+
    "\30\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\13\10\1\245\16\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\17\10\1\246\12\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\5\10\1\247\24\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\13\10\1\250"+
    "\16\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\25\10\1\251\4\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\1\10\1\252\30\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\1\10\1\253\30\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\254\32\10\1\0"+
    "\14\10\11\0\2\10\21\0\1\10\1\255\1\0\32\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\3\10"+
    "\1\256\26\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\14\10\1\257\15\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\5\10\1\260\24\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\31\10\1\261\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\14\10\1\262"+
    "\15\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\1\10\1\263\3\10\1\264\24\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\17\10\1\265\12\10\1\0"+
    "\4\10\1\266\7\10\11\0\2\10\21\0\2\10\1\0"+
    "\1\10\1\267\30\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\12\10\1\270\17\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\20\10\1\271\11\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\20\10\1\272"+
    "\11\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\14\10\1\273\15\10\1\0\14\10\11\0\2\10\21\0"+
    "\1\10\1\274\1\0\32\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\1\10\1\275\30\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\5\10\1\276\24\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\7\10"+
    "\1\277\22\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\1\10\1\300\30\10\1\0\14\10\2\0\4\155"+
    "\1\233\1\155\1\301\77\155\7\0\2\10\21\0\2\10"+
    "\1\0\1\10\1\302\30\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\32\10\1\0\3\10\1\303\10\10"+
    "\11\0\2\10\21\0\2\10\1\0\17\10\1\304\12\10"+
    "\1\0\14\10\11\0\2\10\21\0\1\10\1\305\1\0"+
    "\32\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\23\10\1\306\6\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\23\10\1\307\6\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\1\10\1\310\30\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\23\10\1\311"+
    "\6\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\5\10\1\312\24\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\14\10\1\313\15\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\23\10\1\314\6\10\1\0"+
    "\14\10\11\0\2\10\21\0\1\10\1\315\1\0\1\10"+
    "\1\315\30\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\1\10\1\316\30\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\17\10\1\317\12\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\31\10\1\320\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\32\10\1\321"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\23\10\1\322"+
    "\6\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\25\10\1\323\4\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\23\10\1\324\6\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\3\10\1\325\26\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\5\10\1\326"+
    "\24\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\13\10\1\327\16\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\25\10\1\330\4\10\1\0\14\10\11\0"+
    "\2\10\21\0\1\10\1\331\1\0\32\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\5\10\1\332\24\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\3\10"+
    "\1\333\26\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\334\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\25\10\1\335\4\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\1\10\1\336\30\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\23\10"+
    "\1\337\6\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\7\10\1\340\22\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\5\10\1\341\24\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\20\10\1\342\11\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\17\10"+
    "\1\343\12\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\5\10\1\344\24\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\17\10\1\345\12\10\1\0\14\10"+
    "\11\0\2\10\21\0\1\10\1\346\1\0\32\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\32\10\1\0"+
    "\11\10\1\347\2\10\11\0\2\10\21\0\2\10\1\0"+
    "\23\10\1\350\6\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\1\10\1\351\30\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\17\10\1\352\12\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\20\10\1\353"+
    "\11\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\7\10\1\354\22\10\1\0\14\10\52\0\1\355\44\0"+
    "\2\10\21\0\2\10\1\0\32\10\1\0\1\10\1\356"+
    "\12\10\11\0\2\10\21\0\2\10\1\0\3\10\1\357"+
    "\26\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\14\10\1\360\15\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\3\10\1\361\26\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\13\10\1\362\16\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\20\10\1\363"+
    "\11\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\17\10\1\364\12\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\5\10\1\365\24\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\14\10\1\366\15\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\5\10\1\367"+
    "\24\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\14\10\1\370\15\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\23\10\1\371\6\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\32\10\1\0\3\10\1\372"+
    "\10\10\11\0\2\10\21\0\2\10\1\0\5\10\1\373"+
    "\24\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\23\10\1\374\6\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\20\10\1\375\11\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\1\10\1\376\30\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\5\10\1\377"+
    "\24\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\13\10\1\u0100\16\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\20\10\1\u0101\11\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\1\10\1\u0102\30\10\1\0"+
    "\14\10\11\0\2\10\21\0\1\10\1\u0103\1\0\32\10"+
    "\1\0\14\10\42\0\1\u0104\54\0\2\10\21\0\2\10"+
    "\1\0\32\10\1\0\10\10\1\u0105\3\10\11\0\2\10"+
    "\21\0\2\10\1\0\32\10\1\0\3\10\1\u0106\10\10"+
    "\11\0\2\10\21\0\2\10\1\0\12\10\1\u0107\17\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\1\10"+
    "\1\u0108\30\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\32\10\1\0\3\10\1\u0109\10\10\11\0\2\10"+
    "\21\0\2\10\1\0\1\10\1\u010a\30\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\17\10\1\u010b\12\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\25\10"+
    "\1\u010c\4\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\23\10\1\u010d\6\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\1\10\1\u010e\30\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\13\10\1\u010f\16\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\1\10"+
    "\1\u0110\30\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\u0111\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\5\10\1\u0112\24\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\20\10\1\u0113\11\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\5\10"+
    "\1\u0114\24\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\23\10\1\u0115\6\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\5\10\1\u0116\24\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\u0117\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\3\10"+
    "\1\u0118\26\10\1\0\14\10\11\0\2\10\21\0\2\10"+
    "\1\0\17\10\1\u0119\12\10\1\0\14\10\11\0\2\10"+
    "\21\0\2\10\1\0\14\10\1\u011a\15\10\1\0\14\10"+
    "\11\0\2\10\21\0\2\10\1\0\23\10\1\u011b\6\10"+
    "\1\0\14\10\11\0\2\10\21\0\2\10\1\0\7\10"+
    "\1\u011c\22\10\1\0\14\10\11\0\2\10\21\0\1\10"+
    "\1\267\1\0\32\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\23\10\1\u011d\6\10\1\0\14\10\11\0"+
    "\2\10\21\0\2\10\1\0\23\10\1\u011e\6\10\1\0"+
    "\14\10\11\0\2\10\21\0\2\10\1\0\14\10\1\u011f"+
    "\15\10\1\0\14\10\11\0\2\10\21\0\2\10\1\0"+
    "\1\10\1\u0120\30\10\1\0\14\10\11\0\2\10\21\0"+
    "\2\10\1\0\1\10\1\u0121\30\10\1\0\14\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\10\11\2\1\3\11"+
    "\33\1\1\0\2\11\1\1\1\11\2\0\6\11\2\0"+
    "\3\11\45\1\2\0\1\11\2\0\1\11\1\1\3\11"+
    "\3\1\1\11\10\1\1\11\12\1\1\11\17\1\1\0"+
    "\20\1\1\11\24\1\1\11\17\1\1\0\33\1\1\0"+
    "\26\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        //System.out.print(s);
    }
    String cadena="";
    public Pintar pintar = new Pintar();

    



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzerPaint(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzerPaint(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 88: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DESCENDENTE , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 86: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.REPRODUCIR , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 37: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.RE , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 18: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MAS , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 85: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CONTINUAR , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 21: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.POTENCIA , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 31: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DIFERENTE , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 59: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CASO , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 14: 
          { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.LLAVE_C , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 13: 
          { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.LLAVE_A , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 28: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.IGUAL_IGUAL , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 68: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PRIMOS , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 78: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.RETORNAR , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 56: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.TRUE , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 67: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SWITCH , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 30: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MAS_MAS , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 2: 
          { /*Ignore*/
          }
        case 105: break;
        case 83: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SUMARIZAR , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 73: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MENSAJE , yycolumn, yyline, yytext());
          }
        case 107: break;
        case 82: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CARACTER_RSV , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 76: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SINO_SI , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 57: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.KEEP , yycolumn, yyline, yytext());
          }
        case 110: break;
        case 65: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.HACER , yycolumn, yyline, yytext());
          }
        case 111: break;
        case 5: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.POR , yycolumn, yyline, yytext());
          }
        case 112: break;
        case 44: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.NAND , yycolumn, yyline, yytext());
          }
        case 113: break;
        case 9: 
          { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PA_A , yycolumn, yyline, yytext());
          }
        case 114: break;
        case 58: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.VOID , yycolumn, yyline, yytext());
          }
        case 115: break;
        case 42: 
          { printConsole(yytext()); pintar.pintaNaranja((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CARACTER , yycolumn, yyline, yytext());
          }
        case 116: break;
        case 43: 
          { printConsole(yytext()); pintar.pintaMorado((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DECIMAL , yycolumn, yyline, yytext());
          }
        case 117: break;
        case 23: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MENOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 118: break;
        case 16: 
          { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PUNTO_COMA , yycolumn, yyline, yytext());
          }
        case 119: break;
        case 34: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.XOR , yycolumn, yyline, yytext());
          }
        case 120: break;
        case 55: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PARA , yycolumn, yyline, yytext());
          }
        case 121: break;
        case 46: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DO_S , yycolumn, yyline, yytext());
          }
        case 122: break;
        case 36: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DO , yycolumn, yyline, yytext());
          }
        case 123: break;
        case 74: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.IMPARES , yycolumn, yyline, yytext());
          }
        case 124: break;
        case 22: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.NOT , yycolumn, yyline, yytext());
          }
        case 125: break;
        case 84: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PRINCIPAL , yycolumn, yyline, yytext());
          }
        case 126: break;
        case 45: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.NOR , yycolumn, yyline, yytext());
          }
        case 127: break;
        case 35: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.OR , yycolumn, yyline, yytext());
          }
        case 128: break;
        case 54: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SINO , yycolumn, yyline, yytext());
          }
        case 129: break;
        case 52: 
          { printConsole("COMENTARIO: "+yytext()+"\n"); pintar.pintaGris((int) yychar,yylength()); return new Symbol(SymbolPaintCode.COMENTARIO_BLOQUE , yycolumn, yyline, yytext());
          }
        case 130: break;
        case 61: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.FALSE , yycolumn, yyline, yytext());
          }
        case 131: break;
        case 1: 
          { //System.out.println("CUALQUIER_SIM: "+yytext()); 
                                    //ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                    //listaErrores.add(e);
                                    //return new Symbol(Simbolos.CUALQUIER_SIM , yycolumn, yyline, yytext());
                                            //printConsole("ERR: "+yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); /*return new Symbol(SymbolPaintCode.OTROS , yycolumn, yyline, yytext());*/
          }
        case 132: break;
        case 12: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CORCHETE_C , yycolumn, yyline, yytext());
          }
        case 133: break;
        case 26: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MAYOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 134: break;
        case 62: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SALIR , yycolumn, yyline, yytext());
          }
        case 135: break;
        case 27: 
          { printConsole(yytext()); pintar.pintaNaranja((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CADENA , yycolumn, yyline, yytext());
          }
        case 136: break;
        case 69: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CADENA_RSV , yycolumn, yyline, yytext());
          }
        case 137: break;
        case 79: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.EXTIENDE , yycolumn, yyline, yytext());
          }
        case 138: break;
        case 33: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.AND , yycolumn, yyline, yytext());
          }
        case 139: break;
        case 41: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.LA , yycolumn, yyline, yytext());
          }
        case 140: break;
        case 72: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.ESPERAR , yycolumn, yyline, yytext());
          }
        case 141: break;
        case 77: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.BOOLEAN , yycolumn, yyline, yytext());
          }
        case 142: break;
        case 17: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.IGUAL , yycolumn, yyline, yytext());
          }
        case 143: break;
        case 47: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.RE_S , yycolumn, yyline, yytext());
          }
        case 144: break;
        case 80: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MIENTRAS , yycolumn, yyline, yytext());
          }
        case 145: break;
        case 24: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MENOS_MENOS , yycolumn, yyline, yytext());
          }
        case 146: break;
        case 87: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.ASCENDENTE , yycolumn, yyline, yytext());
          }
        case 147: break;
        case 71: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.ORDENAR , yycolumn, yyline, yytext());
          }
        case 148: break;
        case 70: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DEFAULT , yycolumn, yyline, yytext());
          }
        case 149: break;
        case 15: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.COMA , yycolumn, yyline, yytext());
          }
        case 150: break;
        case 6: 
          { printConsole("Mayor"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MAYOR_Q , yycolumn, yyline, yytext());
          }
        case 151: break;
        case 40: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SI , yycolumn, yyline, yytext());
          }
        case 152: break;
        case 3: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MENOR_Q , yycolumn, yyline, yytext());
          }
        case 153: break;
        case 32: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.IS_NULL , yycolumn, yyline, yytext());
          }
        case 154: break;
        case 11: 
          { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.CORCHETE_A , yycolumn, yyline, yytext());
          }
        case 155: break;
        case 25: 
          { printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n"); pintar.pintaGris((int) yychar,yylength()); return new Symbol(SymbolPaintCode.COMENTARIO_LINEA , yycolumn, yyline, yytext());
          }
        case 156: break;
        case 20: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MODULO , yycolumn, yyline, yytext());
          }
        case 157: break;
        case 10: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PA_C , yycolumn, yyline, yytext());
          }
        case 158: break;
        case 29: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MAS_IGUAL , yycolumn, yyline, yytext());
          }
        case 159: break;
        case 7: 
          { printConsole(yytext()); pintar.pintaVerde((int) yychar,yylength()); return new Symbol(SymbolPaintCode.IDENTIFICADOR , yycolumn, yyline, yytext());
          }
        case 160: break;
        case 39: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.FA , yycolumn, yyline, yytext());
          }
        case 161: break;
        case 60: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DOBLE , yycolumn, yyline, yytext());
          }
        case 162: break;
        case 81: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.LONGITUD , yycolumn, yyline, yytext());
          }
        case 163: break;
        case 8: 
          { printConsole(yytext()); pintar.pintaMorado((int) yychar,yylength()); return new Symbol(SymbolPaintCode.NUMERO , yycolumn, yyline, yytext());
          }
        case 164: break;
        case 49: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SOL , yycolumn, yyline, yytext());
          }
        case 165: break;
        case 66: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.ENTERO , yycolumn, yyline, yytext());
          }
        case 166: break;
        case 51: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.VAR , yycolumn, yyline, yytext());
          }
        case 167: break;
        case 19: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.DIVISION , yycolumn, yyline, yytext());
          }
        case 168: break;
        case 4: 
          { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MENOS , yycolumn, yyline, yytext());
          }
        case 169: break;
        case 75: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.ARREGLO , yycolumn, yyline, yytext());
          }
        case 170: break;
        case 63: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PISTA, yycolumn, yyline, yytext());
          }
        case 171: break;
        case 48: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.FA_S , yycolumn, yyline, yytext());
          }
        case 172: break;
        case 38: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.MI , yycolumn, yyline, yytext());
          }
        case 173: break;
        case 50: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.LA_S , yycolumn, yyline, yytext());
          }
        case 174: break;
        case 53: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.SOL_S , yycolumn, yyline, yytext());
          }
        case 175: break;
        case 64: 
          { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SymbolPaintCode.PARES , yycolumn, yyline, yytext());
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SymbolPaintCode.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
