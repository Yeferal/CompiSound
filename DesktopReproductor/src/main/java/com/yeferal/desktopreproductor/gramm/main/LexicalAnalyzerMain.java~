/* The following code was generated by JFlex 1.4.3 on 4/9/23 17:36 */

package com.yeferal.desktopreproductor.gramm.main;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import com.yeferal.desktopreproductor.ast.errors.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/9/23 17:36 from the specification file
 * <tt>LexMain.jflex</tt>
 */
public class LexicalAnalyzerMain implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    56, 24,  9, 29,  0, 22, 25, 70, 10, 11,  5, 20, 16,  4, 69, 21, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 18, 17,  3, 19,  6,  0, 
     0, 54, 53, 50, 27, 43, 34,  7, 62, 64,  7, 47, 38, 32,  7, 63, 
    39,  7, 30, 36, 67,  7, 48,  7,  7,  7,  7, 12,  0, 13, 23, 68, 
     0, 35, 52, 51, 46, 31, 59, 55, 58, 33, 66, 47, 37, 61, 45, 28, 
    40,  7, 49, 41, 42, 60, 48, 57, 44,  7, 65, 14, 26, 15,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  7,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  7,  0,  0, 
     0,  7,  0,  7,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\1\27\7\1\1\1\0\1\30\1\31\1\32"+
    "\1\33\2\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\2\7\1\46\4\7"+
    "\1\47\1\7\1\50\3\7\1\51\4\7\1\52\20\7"+
    "\2\0\1\53\2\0\1\32\1\54\1\55\1\56\1\57"+
    "\4\7\1\60\10\7\1\61\3\7\1\62\5\7\1\63"+
    "\7\7\1\64\6\7\4\0\1\53\1\0\1\65\17\7"+
    "\1\66\1\67\6\7\1\70\2\7\1\71\1\72\1\73"+
    "\2\7\1\74\4\7\1\75\1\76\1\77\1\100\1\101"+
    "\1\65\1\102\13\7\1\103\2\7\1\0\1\104\3\7"+
    "\1\105\1\106\7\7\1\107\7\7\1\110\5\7\1\0"+
    "\1\111\3\7\1\112\2\7\1\113\3\7\1\114\1\115"+
    "\2\7\1\116\1\7\1\117\1\7\1\120\1\7\1\121"+
    "\1\122\6\7\1\123\2\7\1\124\1\125\1\126\2\7"+
    "\1\127\3\7\1\130\3\7\1\131\1\132\1\133\1\7"+
    "\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\107\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\u027f\0\u02c6\0\107\0\107\0\107"+
    "\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe"+
    "\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736"+
    "\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e"+
    "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\107\0\107\0\u0ad1\0\107"+
    "\0\u0b18\0\u0238\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\u0b5f\0\u0ba6\0\107\0\107\0\107\0\u0bed\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323"+
    "\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b"+
    "\0\u0e25\0\u15a2\0\u15e9\0\107\0\u1630\0\u1677\0\107\0\u0b18"+
    "\0\107\0\107\0\107\0\u16be\0\u1705\0\u174c\0\u1793\0\107"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\107\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\107\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u1df4\0\u1e3b\0\u01aa\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u1630"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\107"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u01aa"+
    "\0\u27f0\0\u2837\0\u01aa\0\u01aa\0\u01aa\0\u287e\0\u28c5\0\u01aa"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\u01aa\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u01aa\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u01aa\0\u2e0a\0\u2e51\0\u2e98\0\u01aa\0\u01aa"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u01aa"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u01aa"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u01aa\0\u346b"+
    "\0\u34b2\0\u34f9\0\u01aa\0\u3540\0\u3587\0\u01aa\0\u35ce\0\u3615"+
    "\0\u365c\0\u01aa\0\u01aa\0\u36a3\0\u36ea\0\u01aa\0\u3731\0\u01aa"+
    "\0\u3778\0\u01aa\0\u37bf\0\u01aa\0\107\0\u3806\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u01aa\0\u39b0\0\u39f7\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u3a3e\0\u3a85\0\u01aa\0\u3acc\0\u3b13\0\u3b5a\0\u01aa"+
    "\0\u3ba1\0\u3be8\0\u3c2f\0\u01aa\0\u01aa\0\u01aa\0\u3c76\0\u01aa"+
    "\0\u01aa\0\u01aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\2\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\47\1\50"+
    "\1\51\1\37\2\10\1\52\1\53\1\54\1\55\2\56"+
    "\2\57\1\43\1\10\1\3\1\10\1\60\1\61\1\10"+
    "\1\62\1\60\1\35\1\41\2\10\1\51\2\2\1\63"+
    "\110\0\2\3\65\0\1\3\22\0\1\64\16\0\1\65"+
    "\67\0\1\66\110\0\1\67\14\0\1\70\72\0\2\10"+
    "\22\0\2\10\1\0\32\10\1\0\14\10\12\0\1\11"+
    "\74\0\1\71\1\0\11\72\1\73\75\72\23\0\1\74"+
    "\106\0\1\75\1\76\105\0\1\77\4\0\1\100\1\101"+
    "\1\102\105\0\1\103\1\104\106\0\1\105\63\0\2\10"+
    "\22\0\1\10\1\106\1\0\1\10\1\107\30\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\23\10\1\110"+
    "\6\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\1\10\1\111\30\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\13\10\1\112\2\10\1\113\1\114\12\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\115\1\10\1\116\26\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\32\10\1\0\4\10\1\117\7\10"+
    "\11\0\2\10\22\0\2\10\1\0\5\10\1\120\24\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\13\10"+
    "\1\121\7\10\1\122\6\10\1\0\14\10\11\0\2\10"+
    "\22\0\1\10\1\123\1\0\3\10\1\124\1\10\1\125"+
    "\24\10\1\0\1\126\2\10\1\127\10\10\11\0\2\10"+
    "\22\0\1\10\1\130\1\0\32\10\1\0\14\10\11\0"+
    "\2\10\22\0\1\10\1\130\1\0\5\10\1\131\24\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\3\10"+
    "\1\132\1\10\1\133\15\10\1\134\6\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\3\10\1\124\1\10"+
    "\1\125\24\10\1\0\1\126\2\10\1\127\10\10\11\0"+
    "\2\10\22\0\2\10\1\0\23\10\1\135\6\10\1\0"+
    "\14\10\11\0\2\10\22\0\1\10\1\136\1\0\1\10"+
    "\1\107\30\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\1\10\1\137\30\10\1\0\14\10\11\0\2\10"+
    "\22\0\1\10\1\140\1\0\1\10\1\141\3\10\1\142"+
    "\24\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\1\10\1\143\30\10\1\0\14\10\11\0\2\10\22\0"+
    "\1\10\1\144\1\0\5\10\1\145\24\10\1\0\14\10"+
    "\11\0\2\10\22\0\1\10\1\146\1\0\32\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\5\10\1\147"+
    "\24\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\5\10\1\150\24\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\1\10\1\115\1\10\1\151\26\10\1\0"+
    "\14\10\2\0\35\152\1\153\50\152\1\154\4\155\1\156"+
    "\1\0\101\155\2\67\1\157\104\67\10\0\1\160\127\0"+
    "\1\161\107\0\1\162\63\0\2\10\22\0\2\10\1\163"+
    "\26\10\1\164\3\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\13\10\1\165\16\10\1\0\2\10\1\166"+
    "\11\10\11\0\2\10\22\0\2\10\1\0\20\10\1\167"+
    "\11\10\1\0\14\10\11\0\2\10\22\0\2\10\1\170"+
    "\12\10\1\171\1\10\1\172\15\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\12\10\1\173\17\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\14\10\1\174"+
    "\15\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\14\10\1\175\15\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\17\10\1\176\12\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\1\10\1\177\30\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\12\10\1\200"+
    "\17\10\1\0\14\10\11\0\2\10\22\0\2\10\1\201"+
    "\7\10\1\202\22\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\25\10\1\203\4\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\23\10\1\204\6\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\7\10\1\205"+
    "\22\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\17\10\1\206\12\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\7\10\1\207\22\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\3\10\1\210\26\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\32\10\1\0"+
    "\4\10\1\211\7\10\11\0\2\10\22\0\2\10\1\0"+
    "\17\10\1\212\12\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\213\32\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\13\10\1\214\16\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\23\10\1\215\6\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\3\10\1\216"+
    "\26\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\32\10\1\0\3\10\1\217\10\10\11\0\2\10\22\0"+
    "\2\10\1\0\26\10\1\164\3\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\1\10\1\220\30\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\3\10\1\221"+
    "\26\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\23\10\1\222\6\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\223\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\12\10\1\171\1\10\1\172"+
    "\15\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\17\10\1\224\12\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\13\10\1\225\4\10\1\226\2\10\1\227"+
    "\6\10\1\0\14\10\11\0\2\10\22\0\1\10\1\230"+
    "\1\0\32\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\25\10\1\231\4\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\7\10\1\202\22\10\1\0\14\10"+
    "\110\0\1\154\35\0\1\232\14\0\1\233\2\0\1\234"+
    "\3\0\1\235\24\0\1\236\4\155\1\237\106\155\1\237"+
    "\1\155\1\240\100\155\7\0\2\10\22\0\2\10\1\0"+
    "\7\10\1\241\22\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\25\10\1\242\4\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\5\10\1\243\24\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\1\10\1\244"+
    "\30\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\23\10\1\245\6\10\1\0\14\10\11\0\2\10\22\0"+
    "\1\10\1\246\1\0\32\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\1\10\1\247\30\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\3\10\1\250\26\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\251\30\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\13\10\1\252\16\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\17\10\1\253\12\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\5\10\1\254\24\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\13\10"+
    "\1\255\16\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\1\10\1\256\30\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\1\10\1\257\30\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\260\32\10\1\0\14\10"+
    "\11\0\2\10\22\0\1\10\1\261\1\0\32\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\3\10\1\262"+
    "\26\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\14\10\1\263\15\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\5\10\1\264\24\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\31\10\1\265\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\14\10\1\266\15\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\267\3\10\1\270\24\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\17\10\1\271\12\10\1\0\4\10"+
    "\1\272\7\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\273\30\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\12\10\1\274\17\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\20\10\1\275\11\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\20\10\1\276\11\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\14\10"+
    "\1\277\15\10\1\0\14\10\11\0\2\10\22\0\1\10"+
    "\1\300\1\0\32\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\1\10\1\301\30\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\5\10\1\302\24\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\7\10\1\303"+
    "\22\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\1\10\1\304\30\10\1\0\14\10\110\0\1\305\106\0"+
    "\1\306\106\0\1\307\106\0\1\310\106\0\1\311\4\155"+
    "\1\237\1\155\1\312\100\155\7\0\2\10\22\0\2\10"+
    "\1\0\1\10\1\313\30\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\1\10\1\314\30\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\32\10\1\0\3\10"+
    "\1\315\10\10\11\0\2\10\22\0\2\10\1\0\17\10"+
    "\1\316\12\10\1\0\14\10\11\0\2\10\22\0\1\10"+
    "\1\317\1\0\32\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\320\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\23\10\1\321\6\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\1\10\1\322"+
    "\30\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\23\10\1\323\6\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\5\10\1\324\24\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\14\10\1\325\15\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\23\10\1\326"+
    "\6\10\1\0\14\10\11\0\2\10\22\0\1\10\1\327"+
    "\1\0\1\10\1\327\30\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\17\10\1\330\12\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\31\10\1\331\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\32\10\1\332"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\23\10\1\333"+
    "\6\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\25\10\1\334\4\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\335\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\3\10\1\336\26\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\5\10\1\337"+
    "\24\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\13\10\1\340\16\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\25\10\1\341\4\10\1\0\14\10\11\0"+
    "\2\10\22\0\1\10\1\342\1\0\32\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\5\10\1\343\24\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\3\10"+
    "\1\344\26\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\17\10\1\345\12\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\25\10\1\346\4\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\1\10\1\347\30\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\23\10"+
    "\1\350\6\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\17\10\1\351\12\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\7\10\1\352\22\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\5\10\1\353\24\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\20\10"+
    "\1\354\11\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\17\10\1\355\12\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\5\10\1\356\24\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\17\10\1\357\12\10"+
    "\1\0\14\10\11\0\2\10\22\0\1\10\1\360\1\0"+
    "\32\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\32\10\1\0\11\10\1\361\2\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\362\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\1\10\1\363\30\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\20\10\1\364"+
    "\11\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\7\10\1\365\22\10\1\0\14\10\53\0\1\366\44\0"+
    "\2\10\22\0\2\10\1\0\32\10\1\0\1\10\1\367"+
    "\12\10\11\0\2\10\22\0\2\10\1\0\3\10\1\370"+
    "\26\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\14\10\1\371\15\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\3\10\1\372\26\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\13\10\1\373\16\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\20\10\1\374"+
    "\11\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\17\10\1\375\12\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\5\10\1\376\24\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\14\10\1\377\15\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\5\10\1\u0100"+
    "\24\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\20\10\1\u0101\11\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\14\10\1\u0102\15\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\23\10\1\u0103\6\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\32\10\1\0"+
    "\3\10\1\u0104\10\10\11\0\2\10\22\0\2\10\1\0"+
    "\5\10\1\u0105\24\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\u0106\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\20\10\1\u0107\11\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\1\10\1\u0108"+
    "\30\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\5\10\1\u0109\24\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\13\10\1\u010a\16\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\1\10\1\u010b\30\10\1\0"+
    "\14\10\11\0\2\10\22\0\1\10\1\u010c\1\0\32\10"+
    "\1\0\14\10\43\0\1\u010d\54\0\2\10\22\0\2\10"+
    "\1\0\32\10\1\0\10\10\1\u010e\3\10\11\0\2\10"+
    "\22\0\2\10\1\0\32\10\1\0\3\10\1\u010f\10\10"+
    "\11\0\2\10\22\0\2\10\1\0\12\10\1\u0110\17\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\u0111\30\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\32\10\1\0\3\10\1\u0112\10\10\11\0\2\10"+
    "\22\0\2\10\1\0\1\10\1\u0113\30\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\17\10\1\u0114\12\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\1\10"+
    "\1\u0115\30\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\25\10\1\u0116\4\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\23\10\1\u0117\6\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\1\10\1\u0118\30\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\13\10"+
    "\1\u0119\16\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\17\10\1\u011a\12\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\5\10\1\u011b\24\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\20\10\1\u011c\11\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\5\10"+
    "\1\u011d\24\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\23\10\1\u011e\6\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\5\10\1\u011f\24\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\23\10\1\u0120\6\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\17\10"+
    "\1\u0121\12\10\1\0\14\10\11\0\2\10\22\0\2\10"+
    "\1\0\3\10\1\u0122\26\10\1\0\14\10\11\0\2\10"+
    "\22\0\2\10\1\0\14\10\1\u0123\15\10\1\0\14\10"+
    "\11\0\2\10\22\0\2\10\1\0\23\10\1\u0124\6\10"+
    "\1\0\14\10\11\0\2\10\22\0\2\10\1\0\7\10"+
    "\1\u0125\22\10\1\0\14\10\11\0\2\10\22\0\1\10"+
    "\1\273\1\0\32\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\23\10\1\u0126\6\10\1\0\14\10\11\0"+
    "\2\10\22\0\2\10\1\0\14\10\1\u0127\15\10\1\0"+
    "\14\10\11\0\2\10\22\0\2\10\1\0\23\10\1\u0128"+
    "\6\10\1\0\14\10\11\0\2\10\22\0\2\10\1\0"+
    "\1\10\1\u0129\30\10\1\0\14\10\11\0\2\10\22\0"+
    "\2\10\1\0\1\10\1\u012a\30\10\1\0\14\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15549];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\11\11\2\1\3\11"+
    "\33\1\1\0\2\11\1\1\1\11\2\0\6\11\2\0"+
    "\3\11\44\1\2\0\1\11\2\0\1\11\1\1\3\11"+
    "\4\1\1\11\10\1\1\11\11\1\1\11\16\1\4\0"+
    "\1\1\1\0\20\1\1\11\24\1\6\11\17\1\1\0"+
    "\33\1\1\0\26\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    List<ErrorGramm> lexialErrors = new ArrayList<>();

    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        System.out.print(s+" ");
    }

    public void addError(int row, int column, String token, String description){
        lexialErrors.add(new ErrorGramm(new PositionToken(row, column), ErrorType.LEXICAL, token, description));
    }

    public List<ErrorGramm> getLexicalErrors(){
        return lexialErrors;
    }

    String cadena="";

    



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzerMain(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzerMain(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.sol , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 22: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.potencia , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 53: 
          { printConsole("COMENTARIO: "+yytext()+"\n"); return new Symbol(SymbolMainCode.comentario_bloque , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 62: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_special_t , yycolumn, yyline, yytext().substring(2, yytext().length() - 1));
          }
        case 98: break;
        case 37: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.do_rsv , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 28: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.cadena , yycolumn, yyline, yytext().substring(1, yytext().length() - 1));
          }
        case 100: break;
        case 47: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.do_s , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 19: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mas , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 61: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_special_hashtag , yycolumn, yyline, yytext().substring(2, yytext().length() - 1));
          }
        case 103: break;
        case 45: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.nand , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 21: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.modulo , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 94: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.descendente , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 52: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.var , yycolumn, yyline, yytext());
          }
        case 107: break;
        case 11: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolMainCode.corchete_a , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 29: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.igual_igual , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 92: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.reproducir , yycolumn, yyline, yytext());
          }
        case 110: break;
        case 79: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mensaje , yycolumn, yyline, yytext());
          }
        case 111: break;
        case 64: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_special_r , yycolumn, yyline, yytext().substring(2, yytext().length() - 1));
          }
        case 112: break;
        case 89: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.sumarizar , yycolumn, yyline, yytext());
          }
        case 113: break;
        case 88: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_rsv , yycolumn, yyline, yytext());
          }
        case 114: break;
        case 24: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.menor_igual , yycolumn, yyline, yytext());
          }
        case 115: break;
        case 31: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mas_mas , yycolumn, yyline, yytext());
          }
        case 116: break;
        case 71: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.hacer , yycolumn, yyline, yytext());
          }
        case 117: break;
        case 75: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.cadena_rsv , yycolumn, yyline, yytext());
          }
        case 118: break;
        case 67: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.false_rsv , yycolumn, yyline, false);
          }
        case 119: break;
        case 59: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.void_rsv , yycolumn, yyline, yytext());
          }
        case 120: break;
        case 8: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.numero , yycolumn, yyline, Integer.parseInt(yytext()));
          }
        case 121: break;
        case 80: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.impares , yycolumn, yyline, yytext());
          }
        case 122: break;
        case 2: 
          { /*Ignore*/
          }
        case 123: break;
        case 17: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.dos_puntos , yycolumn, yyline, yytext());
          }
        case 124: break;
        case 6: 
          { printConsole("Mayor"); return new Symbol(SymbolMainCode.mayor_q , yycolumn, yyline, yytext());
          }
        case 125: break;
        case 84: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.retornar , yycolumn, yyline, yytext());
          }
        case 126: break;
        case 5: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.por , yycolumn, yyline, yytext());
          }
        case 127: break;
        case 69: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.pista, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 42: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.la , yycolumn, yyline, yytext());
          }
        case 129: break;
        case 3: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.menor_q , yycolumn, yyline, yytext());
          }
        case 130: break;
        case 27: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mayor_igual , yycolumn, yyline, yytext());
          }
        case 131: break;
        case 60: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caso , yycolumn, yyline, yytext());
          }
        case 132: break;
        case 57: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.true_rsv , yycolumn, yyline, true);
          }
        case 133: break;
        case 35: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.xor , yycolumn, yyline, yytext());
          }
        case 134: break;
        case 48: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.re_s , yycolumn, yyline, yytext());
          }
        case 135: break;
        case 68: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.salir , yycolumn, yyline, yytext());
          }
        case 136: break;
        case 33: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.is_null , yycolumn, yyline, yytext());
          }
        case 137: break;
        case 73: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.switch_rsv , yycolumn, yyline, yytext());
          }
        case 138: break;
        case 15: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.coma , yycolumn, yyline, yytext());
          }
        case 139: break;
        case 90: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.principal , yycolumn, yyline, yytext());
          }
        case 140: break;
        case 78: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.esperar , yycolumn, yyline, yytext());
          }
        case 141: break;
        case 63: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_special_n , yycolumn, yyline, yytext().substring(2, yytext().length() - 1));
          }
        case 142: break;
        case 54: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.sol_s , yycolumn, yyline, yytext());
          }
        case 143: break;
        case 77: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.ordenar , yycolumn, yyline, yytext());
          }
        case 144: break;
        case 85: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.extiende , yycolumn, yyline, yytext());
          }
        case 145: break;
        case 72: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.entero , yycolumn, yyline, yytext());
          }
        case 146: break;
        case 23: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.not , yycolumn, yyline, yytext());
          }
        case 147: break;
        case 58: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.keep , yycolumn, yyline, yytext());
          }
        case 148: break;
        case 41: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.si , yycolumn, yyline, yytext());
          }
        case 149: break;
        case 25: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.menos_menos , yycolumn, yyline, yytext());
          }
        case 150: break;
        case 46: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.nor , yycolumn, yyline, yytext());
          }
        case 151: break;
        case 14: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolMainCode.llave_c , yycolumn, yyline, yytext());
          }
        case 152: break;
        case 13: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolMainCode.llave_a , yycolumn, yyline, yytext());
          }
        case 153: break;
        case 34: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.and , yycolumn, yyline, yytext());
          }
        case 154: break;
        case 43: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter , yycolumn, yyline, yytext().substring(1, yytext().length() - 1));
          }
        case 155: break;
        case 93: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.ascendente , yycolumn, yyline, yytext());
          }
        case 156: break;
        case 12: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.corchete_c , yycolumn, yyline, yytext());
          }
        case 157: break;
        case 56: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.para , yycolumn, yyline, yytext());
          }
        case 158: break;
        case 1: 
          { addError(yyline+1, yycolumn+1, yytext(), "Caracter o Token no reconocido");
                                            System.out.println("Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                            //ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
          }
        case 159: break;
        case 18: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.igual , yycolumn, yyline, yytext());
          }
        case 160: break;
        case 55: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.sino , yycolumn, yyline, yytext());
          }
        case 161: break;
        case 49: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.fa_s , yycolumn, yyline, yytext());
          }
        case 162: break;
        case 86: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mientras , yycolumn, yyline, yytext());
          }
        case 163: break;
        case 40: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.fa , yycolumn, yyline, yytext());
          }
        case 164: break;
        case 83: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.boolean_rsv , yycolumn, yyline, yytext());
          }
        case 165: break;
        case 66: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.doble , yycolumn, yyline, yytext());
          }
        case 166: break;
        case 9: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolMainCode.pa_a , yycolumn, yyline, yytext());
          }
        case 167: break;
        case 82: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.sino_si , yycolumn, yyline, yytext());
          }
        case 168: break;
        case 32: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.diferente , yycolumn, yyline, yytext());
          }
        case 169: break;
        case 16: 
          { printConsole(yytext()+"\n"); return new Symbol(SymbolMainCode.punto_coma , yycolumn, yyline, yytext());
          }
        case 170: break;
        case 39: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mi , yycolumn, yyline, yytext());
          }
        case 171: break;
        case 65: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.caracter_special_comilla_simple , yycolumn, yyline, yytext().substring(2, yytext().length() - 1));
          }
        case 172: break;
        case 87: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.longitud , yycolumn, yyline, yytext());
          }
        case 173: break;
        case 76: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.default_rsv , yycolumn, yyline, yytext());
          }
        case 174: break;
        case 74: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.primos , yycolumn, yyline, yytext());
          }
        case 175: break;
        case 51: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.la_s , yycolumn, yyline, yytext());
          }
        case 176: break;
        case 81: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.arreglo , yycolumn, yyline, yytext());
          }
        case 177: break;
        case 44: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.decimal , yycolumn, yyline, Double.parseDouble(yytext()));
          }
        case 178: break;
        case 30: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.mas_igual , yycolumn, yyline, yytext());
          }
        case 179: break;
        case 70: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.pares , yycolumn, yyline, yytext());
          }
        case 180: break;
        case 36: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.or , yycolumn, yyline, yytext());
          }
        case 181: break;
        case 38: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.re , yycolumn, yyline, yytext());
          }
        case 182: break;
        case 10: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.pa_c , yycolumn, yyline, yytext());
          }
        case 183: break;
        case 26: 
          { printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n"); return new Symbol(SymbolMainCode.comentario_linea , yycolumn, yyline, yytext());
          }
        case 184: break;
        case 7: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.identificador , yycolumn, yyline, yytext());
          }
        case 185: break;
        case 91: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.continuar , yycolumn, yyline, yytext());
          }
        case 186: break;
        case 20: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.div , yycolumn, yyline, yytext());
          }
        case 187: break;
        case 4: 
          { printConsole(yytext()); return new Symbol(SymbolMainCode.menos , yycolumn, yyline, yytext());
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SymbolMainCode.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
